name: 🍎 Build iOS App

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'ios-native/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ios-native/**'
  workflow_dispatch: # Allow manual triggers

jobs:
  build-ios:
    name: Build EezyBuild iOS App
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: 📋 Display Xcode Version
      run: xcodebuild -version
      
    - name: 🔍 List Available Simulators
      run: xcrun simctl list devices available
      
    - name: 🏗️ Build iOS App (Debug)
      working-directory: ios-native/EezyBuild
      run: |
        echo "🔨 Building EezyBuild iOS App..."
        xcodebuild \
          -project EezyBuild.xcodeproj \
          -scheme EezyBuild \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
          -configuration Debug \
          clean build \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE=""
          
    - name: 🧪 Run iOS Tests (if available)
      working-directory: ios-native/EezyBuild
      continue-on-error: true
      run: |
        echo "🧪 Running tests..."
        xcodebuild test \
          -project EezyBuild.xcodeproj \
          -scheme EezyBuild \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" || echo "⚠️ Tests not configured yet"
          
    - name: 📦 Archive iOS App
      working-directory: ios-native/EezyBuild
      run: |
        echo "📦 Creating archive..."
        xcodebuild archive \
          -project EezyBuild.xcodeproj \
          -scheme EezyBuild \
          -archivePath EezyBuild.xcarchive \
          -configuration Release \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE=""
          
    - name: 📱 Export IPA (Ad Hoc)
      working-directory: ios-native/EezyBuild
      run: |
        echo "📱 Exporting IPA..."
        
        # Create export options plist
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>compileBitcode</key>
            <false/>
            <key>stripSwiftSymbols</key>
            <false/>
            <key>signingStyle</key>
            <string>manual</string>
        </dict>
        </plist>
        EOF
        
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath EezyBuild.xcarchive \
          -exportPath ./Export \
          -exportOptionsPlist ExportOptions.plist || echo "⚠️ IPA export failed - need proper signing"
          
    - name: 🎯 Prepare Build Artifacts
      run: |
        echo "🎯 Preparing artifacts..."
        mkdir -p build-artifacts
        
        # Copy build logs
        echo "Build completed at $(date)" > build-artifacts/build-info.txt
        echo "Commit: ${{ github.sha }}" >> build-artifacts/build-info.txt
        echo "Branch: ${{ github.ref_name }}" >> build-artifacts/build-info.txt
        
        # Copy any generated IPA (if successful)
        if [ -d "ios-native/EezyBuild/Export" ]; then
          cp -r ios-native/EezyBuild/Export/* build-artifacts/ 2>/dev/null || echo "No IPA files found"
        fi
        
        # Copy archive for reference
        if [ -d "ios-native/EezyBuild/EezyBuild.xcarchive" ]; then
          echo "✅ Archive created successfully" >> build-artifacts/build-info.txt
        fi
        
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EezyBuild-iOS-Build-${{ github.run_number }}
        path: build-artifacts/
        retention-days: 30
        
    - name: 📊 Build Summary
      run: |
        echo "## 🍎 iOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Build Completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Xcode Version**: $(xcodebuild -version | head -n1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Download Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "Check the **Artifacts** section below to download build files." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚠️ Next Steps for IPA Generation" >> $GITHUB_STEP_SUMMARY
        echo "For a signed IPA that can run on devices:" >> $GITHUB_STEP_SUMMARY
        echo "1. Set up Apple Developer certificates" >> $GITHUB_STEP_SUMMARY
        echo "2. Add provisioning profiles to repository secrets" >> $GITHUB_STEP_SUMMARY
        echo "3. Enable code signing in the workflow" >> $GITHUB_STEP_SUMMARY

  # Optional: Deploy to TestFlight (when certificates are set up)
  deploy-testflight:
    name: 🚀 Deploy to TestFlight
    runs-on: macos-latest
    needs: build-ios
    if: false # Set to true when ready for TestFlight deployment
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔐 Setup Certificates
      # This would set up signing certificates
      # when you're ready for device deployment
      run: echo "Certificate setup would go here"
      
    - name: 🚀 Upload to TestFlight
      # This would upload to TestFlight
      # when certificates are configured
      run: echo "TestFlight upload would go here"