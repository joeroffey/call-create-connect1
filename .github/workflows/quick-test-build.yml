name: 📱 Build Mobile Apps (APK & IPA)

on:
  workflow_dispatch: # Allow manual triggers
    inputs:
      build_android:
        description: 'Build Android APK'
        required: false
        default: true
        type: boolean
      build_ios:
        description: 'Build iOS IPA'
        required: false
        default: true
        type: boolean
      build_type:
        description: 'Build Type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'

jobs:
  build-android:
    if: ${{ github.event.inputs.build_android != 'false' }}
    name: 🤖 Build Android APK
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🏗️ Build Web App
      run: npm run build
      
    - name: 📱 Setup Capacitor
      run: |
        npm install -g @capacitor/cli
        npx cap sync android
        
    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 📋 Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > android/local.properties
        
    - name: 🔨 Build Android APK
      run: |
        cd android
        chmod +x ./gradlew
        if [ "${{ github.event.inputs.build_type }}" = "release" ]; then
          ./gradlew assembleRelease
        else
          ./gradlew assembleDebug
        fi
        
    - name: 📋 List APK Files
      run: |
        echo "🔍 Generated APK files:"
        find android -name "*.apk" -type f | while read file; do
          echo "📱 $file ($(du -h "$file" | cut -f1))"
        done
        
    - name: 📤 Upload APK Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-${{ github.event.inputs.build_type || 'debug' }}
        path: |
          android/app/build/outputs/apk/**/*.apk
        retention-days: 30
        
    - name: 📊 APK Build Summary
      run: |
        echo "✅ Android APK Build Complete!"
        echo "📱 Build Type: ${{ github.event.inputs.build_type || 'debug' }}"
        echo "📦 APK files are available in the artifacts section"
        echo "🔗 Download from: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  build-ios:
    if: ${{ github.event.inputs.build_ios != 'false' }}
    name: 🍎 Build iOS IPA
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🏗️ Build Web App
      run: npm run build
      
    - name: 📱 Setup Capacitor
      run: |
        npm install -g @capacitor/cli
        npx cap sync ios
        
    - name: 🔨 Build iOS App
      run: |
        cd ios
        
        # Build for simulator (unsigned)
        if [ "${{ github.event.inputs.build_type }}" = "debug" ]; then
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            -derivedDataPath build/ \
            build
            
          # Create simulator build archive
          mkdir -p build/simulator
          cp -r build/Build/Products/Debug-iphonesimulator/App.app build/simulator/
          cd build/simulator
          zip -r ../../EezyBuild-iOS-Simulator.zip App.app
          cd ../..
        else
          # For release builds (requires signing)
          echo "⚠️ Release builds require code signing certificates"
          echo "Building unsigned release version for testing..."
          
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            -derivedDataPath build/ \
            build
            
          mkdir -p build/release
          cp -r build/Build/Products/Release-iphonesimulator/App.app build/release/
          cd build/release
          zip -r ../../EezyBuild-iOS-Release-Unsigned.zip App.app
          cd ../..
        fi
        
    - name: 📋 List iOS Build Files
      run: |
        echo "🔍 Generated iOS files:"
        find ios -name "*.zip" -o -name "*.app" -o -name "*.ipa" | while read file; do
          echo "📱 $file"
        done
        
    - name: 📤 Upload iOS Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-${{ github.event.inputs.build_type || 'debug' }}
        path: |
          ios/*.zip
          ios/*.ipa
        retention-days: 30
        
    - name: 📊 iOS Build Summary
      run: |
        echo "✅ iOS Build Complete!"
        echo "📱 Build Type: ${{ github.event.inputs.build_type || 'debug' }}"
        echo "🔗 Download from: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "📋 Installation Instructions:"
        echo "• For iOS Simulator: Unzip and drag App.app to simulator"
        echo "• For iOS Device: Requires Xcode to install on connected device"
        echo "• For TestFlight: Requires Apple Developer account and code signing"

  build-summary:
    needs: [build-android, build-ios]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: 📊 Build Summary
      run: |
        echo "🎉 Mobile App Build Complete!"
        echo ""
        echo "📱 Build Results:"
        echo "• Android APK: ${{ needs.build-android.result }}"
        echo "• iOS IPA: ${{ needs.build-ios.result }}"
        echo ""
        echo "📦 Download your apps from:"
        echo "🔗 https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "🧪 Testing Instructions:"
        echo "• Android: Install APK directly on device or emulator"
        echo "• iOS: Use Xcode to install on simulator or device"
        echo ""
        echo "✨ Your EezyBuild app includes:"
        echo "• Native camera access"
        echo "• File system operations"
        echo "• Native sharing"
        echo "• Push notifications"
        echo "• Haptic feedback"
        echo "• And 10+ more native features!"
