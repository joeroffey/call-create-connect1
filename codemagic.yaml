workflows:
  # iOS Simulator Build (Free tier compatible)
  ios-simulator:
    name: 🍎 iOS Simulator Build
    instance_type: mac_mini_m1
    max_build_duration: 30
    environment:
      xcode: latest
      cocoapods: default
    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: 📋 Build Information
        script: |
          echo "🔍 Build Environment Information:"
          echo "Xcode Version: $(xcodebuild -version)"
          echo "macOS Version: $(sw_vers -productVersion)"
          echo "Build Type: Simulator"
          echo "Project: EezyBuild iOS App"
          
      - name: 🔍 List Available Simulators
        script: |
          echo "📱 Available iOS Simulators:"
          xcrun simctl list devices available | grep iPhone || true
          
      - name: 🏗️ Build iOS App for Simulator
        script: |
          echo "🔨 Building EezyBuild for iOS Simulator..."
          cd ios-native/EezyBuild
          
          # Clean build
          xcodebuild clean \
            -project EezyBuild.xcodeproj \
            -scheme EezyBuild \
            -configuration Debug
          
          # Build for simulator
          xcodebuild build \
            -project EezyBuild.xcodeproj \
            -scheme EezyBuild \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 14' \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            SWIFT_COMPILATION_MODE=singlefile \
            GCC_OPTIMIZATION_LEVEL=0 \
            SWIFT_OPTIMIZATION_LEVEL=-Onone
            
      - name: 🧪 Test Basic Functionality
        script: |
          echo "🧪 Testing basic app functionality..."
          cd ios-native/EezyBuild
          # Try to run basic tests if available
          xcodebuild test \
            -project EezyBuild.xcodeproj \
            -scheme EezyBuild \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 14' \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO || echo "⚠️ Tests not configured yet"
    artifacts:
      - ios-native/EezyBuild/build/**/*.app
      - ios-native/EezyBuild/build/**/Build/Products/**/*.app

  # iOS Device Build (Simplified - No App Store publishing)
  ios-device:
    name: 📱 iOS Device Build (IPA)
    instance_type: mac_mini_m1
    max_build_duration: 45
    environment:
      xcode: latest
      cocoapods: default
      groups:
        - ios_credentials # Add your certificates as a group in Codemagic settings
      vars:
        BUNDLE_ID: "com.eezybuild.app"
        XCODE_PROJECT: "ios-native/EezyBuild/EezyBuild.xcodeproj"
        XCODE_SCHEME: "EezyBuild"
    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: 'v*'
          include: true
    scripts:
      - name: 📋 Device Build Information
        script: |
          echo "🔍 Device Build Environment:"
          echo "Xcode Version: $(xcodebuild -version)"
          echo "Bundle ID: $BUNDLE_ID"
          echo "Build Type: Device/Ad Hoc"
          
      - name: 🔐 Set up certificates and provisioning profiles
        script: |
          echo "🔐 Setting up iOS certificates and provisioning profiles..."
          keychain initialize
          
          # Try to fetch signing files
          app-store-connect fetch-signing-files $BUNDLE_ID \
            --type IOS_APP_DEVELOPMENT \
            --create || echo "⚠️ Certificate setup failed - check Codemagic settings"
            
          keychain add-certificates
          xcode-project use-profiles
          
      - name: 📄 Create Export Options
        script: |
          echo "📄 Creating export options plist..."
          cat > /Users/builder/export_options.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF
          
      - name: 📦 Build and Archive iOS App
        script: |
          echo "📦 Building and archiving iOS app..."
          cd ios-native/EezyBuild
          
          # Clean first
          xcodebuild clean \
            -project EezyBuild.xcodeproj \
            -scheme EezyBuild
          
          # Archive for device
          xcodebuild archive \
            -project EezyBuild.xcodeproj \
            -scheme EezyBuild \
            -archivePath EezyBuild.xcarchive \
            -configuration Release \
            -destination 'generic/platform=iOS' || echo "❌ Archive failed"
            
      - name: � Export IPA
        script: |
          echo "📱 Exporting IPA for distribution..."
          cd ios-native/EezyBuild
          
          # Check if archive exists
          if [ -d "EezyBuild.xcarchive" ]; then
            echo "✅ Archive found, exporting IPA..."
            xcodebuild -exportArchive \
              -archivePath EezyBuild.xcarchive \
              -exportPath ./build \
              -exportOptionsPlist /Users/builder/export_options.plist || echo "❌ IPA export failed"
          else
            echo "❌ No archive found to export"
          fi
          
      - name: 📊 Build Results
        script: |
          echo "📊 Build Results Summary:"
          cd ios-native/EezyBuild
          
          if [ -f "build/EezyBuild.ipa" ]; then
            echo "🎉 SUCCESS! IPA file generated:"
            ls -la build/EezyBuild.ipa
            echo "📱 This IPA can be installed on iPhone devices"
          else
            echo "❌ No IPA file found"
            echo "Available files:"
            find build/ -name "*.ipa" 2>/dev/null || echo "No IPA files found"
          fi
          
    artifacts:
      - ios-native/EezyBuild/build/*.ipa
      - ios-native/EezyBuild/EezyBuild.xcarchive
      - ios-native/EezyBuild/build/**/*
