var e=Object.defineProperty,t=Object.defineProperties,n=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,a=(t,n,r)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[n]=r,c=(e,t)=>{for(var n in t||(t={}))o.call(t,n)&&a(e,n,t[n]);if(r)for(var n of r(t))i.call(t,n)&&a(e,n,t[n]);return e},s=(e,r)=>t(e,n(r)),u=(e,t)=>{var n={};for(var a in e)o.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&r)for(var a of r(e))t.indexOf(a)<0&&i.call(e,a)&&(n[a]=e[a]);return n},l=(e,t,n)=>new Promise((r,o)=>{var i=e=>{try{c(n.next(e))}catch(t){o(t)}},a=e=>{try{c(n.throw(e))}catch(t){o(t)}},c=e=>e.done?r(e.value):Promise.resolve(e.value).then(i,a);c((n=n.apply(e,t)).next())});import{r as d,a as f,R as p,b as m,c as h}from"./vendor-BuTl1vWo.js";var v={exports:{}},g={},y=d,w=Symbol.for("react.element"),b=Symbol.for("react.fragment"),x=Object.prototype.hasOwnProperty,_=y.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,E={key:!0,ref:!0,__self:!0,__source:!0};function R(e,t,n){var r,o={},i=null,a=null;for(r in void 0!==n&&(i=""+n),void 0!==t.key&&(i=""+t.key),void 0!==t.ref&&(a=t.ref),t)x.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:w,type:e,key:i,ref:a,props:o,_owner:_.current}}g.Fragment=b,g.jsx=R,g.jsxs=R,v.exports=g;var C=v.exports;function D(e,t,{checkForDefaultPrevented:n=!0}={}){return function(r){if(null==e||e(r),!1===n||!r.defaultPrevented)return null==t?void 0:t(r)}}function M(...e){return t=>e.forEach(e=>function(e,t){"function"==typeof e?e(t):null!=e&&(e.current=t)}(e,t))}function O(...e){return d.useCallback(M(...e),e)}function P(e,t=[]){let n=[];const r=()=>{const t=n.map(e=>d.createContext(e));return function(n){const r=(null==n?void 0:n[e])||t;return d.useMemo(()=>({["__scope".concat(e)]:s(c({},n),{[e]:r})}),[n,r])}};return r.scopeName=e,[function(t,r){const o=d.createContext(r),i=n.length;n=[...n,r];const a=t=>{var n;const r=t,{scope:a,children:c}=r,s=u(r,["scope","children"]),l=(null==(n=null==a?void 0:a[e])?void 0:n[i])||o,f=d.useMemo(()=>s,Object.values(s));return C.jsx(l.Provider,{value:f,children:c})};return a.displayName=t+"Provider",[a,function(n,a){var c;const s=(null==(c=null==a?void 0:a[e])?void 0:c[i])||o,u=d.useContext(s);if(u)return u;if(void 0!==r)return r;throw new Error("`".concat(n,"` must be used within `").concat(t,"`"))}]},S(r,...t)]}function S(...e){const t=e[0];if(1===e.length)return t;const n=()=>{const n=e.map(e=>({useScope:e(),scopeName:e.scopeName}));return function(e){const r=n.reduce((t,{useScope:n,scopeName:r})=>{const o=n(e)["__scope".concat(r)];return c(c({},t),o)},{});return d.useMemo(()=>({["__scope".concat(t.scopeName)]:r}),[r])}};return n.scopeName=t.scopeName,n}var A=d.forwardRef((e,t)=>{const n=e,{children:r}=n,o=u(n,["children"]),i=d.Children.toArray(r),a=i.find(T);if(a){const e=a.props.children,n=i.map(t=>t===a?d.Children.count(e)>1?d.Children.only(null):d.isValidElement(e)?e.props.children:null:t);return C.jsx(N,s(c({},o),{ref:t,children:d.isValidElement(e)?d.cloneElement(e,void 0,n):null}))}return C.jsx(N,s(c({},o),{ref:t,children:r}))});A.displayName="Slot";var N=d.forwardRef((e,t)=>{const n=e,{children:r}=n,o=u(n,["children"]);if(d.isValidElement(r)){const e=function(e){var t,n;let r=null==(t=Object.getOwnPropertyDescriptor(e.props,"ref"))?void 0:t.get,o=r&&"isReactWarning"in r&&r.isReactWarning;if(o)return e.ref;if(r=null==(n=Object.getOwnPropertyDescriptor(e,"ref"))?void 0:n.get,o=r&&"isReactWarning"in r&&r.isReactWarning,o)return e.props.ref;return e.props.ref||e.ref}(r);return d.cloneElement(r,s(c({},function(e,t){const n=c({},t);for(const r in t){const o=e[r],i=t[r];/^on[A-Z]/.test(r)?o&&i?n[r]=(...e)=>{i(...e),o(...e)}:o&&(n[r]=o):"style"===r?n[r]=c(c({},o),i):"className"===r&&(n[r]=[o,i].filter(Boolean).join(" "))}return c(c({},e),n)}(o,r.props)),{ref:t?M(t,e):e}))}return d.Children.count(r)>1?d.Children.only(null):null});N.displayName="SlotClone";var j=({children:e})=>C.jsx(C.Fragment,{children:e});function T(e){return d.isValidElement(e)&&e.type===j}var k=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","span","svg","ul"].reduce((e,t)=>{const n=d.forwardRef((e,n)=>{const r=e,{asChild:o}=r,i=u(r,["asChild"]),a=o?A:t;return"undefined"!=typeof window&&(window[Symbol.for("radix-ui")]=!0),C.jsx(a,s(c({},i),{ref:n}))});return n.displayName="Primitive.".concat(t),s(c({},e),{[t]:n})},{});function F(e,t){e&&f.flushSync(()=>e.dispatchEvent(t))}function I(e){const t=d.useRef(e);return d.useEffect(()=>{t.current=e}),d.useMemo(()=>(...e)=>{var n;return null==(n=t.current)?void 0:n.call(t,...e)},[])}var L,W="dismissableLayer.update",B="dismissableLayer.pointerDownOutside",K="dismissableLayer.focusOutside",H=d.createContext({layers:new Set,layersWithOutsidePointerEventsDisabled:new Set,branches:new Set}),U=d.forwardRef((e,t)=>{var n;const r=e,{disableOutsidePointerEvents:o=!1,onEscapeKeyDown:i,onPointerDownOutside:a,onFocusOutside:l,onInteractOutside:f,onDismiss:p}=r,m=u(r,["disableOutsidePointerEvents","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","onDismiss"]),h=d.useContext(H),[v,g]=d.useState(null),y=null!=(n=null==v?void 0:v.ownerDocument)?n:null==globalThis?void 0:globalThis.document,[,w]=d.useState({}),b=O(t,e=>g(e)),x=Array.from(h.layers),[_]=[...h.layersWithOutsidePointerEventsDisabled].slice(-1),E=x.indexOf(_),R=v?x.indexOf(v):-1,M=h.layersWithOutsidePointerEventsDisabled.size>0,P=R>=E,S=function(e,t=(null==globalThis?void 0:globalThis.document)){const n=I(e),r=d.useRef(!1),o=d.useRef(()=>{});return d.useEffect(()=>{const e=e=>{if(e.target&&!r.current){let r=function(){z(B,n,i,{discrete:!0})};const i={originalEvent:e};"touch"===e.pointerType?(t.removeEventListener("click",o.current),o.current=r,t.addEventListener("click",o.current,{once:!0})):r()}else t.removeEventListener("click",o.current);r.current=!1},i=window.setTimeout(()=>{t.addEventListener("pointerdown",e)},0);return()=>{window.clearTimeout(i),t.removeEventListener("pointerdown",e),t.removeEventListener("click",o.current)}},[t,n]),{onPointerDownCapture:()=>r.current=!0}}(e=>{const t=e.target,n=[...h.branches].some(e=>e.contains(t));P&&!n&&(null==a||a(e),null==f||f(e),e.defaultPrevented||null==p||p())},y),A=function(e,t=(null==globalThis?void 0:globalThis.document)){const n=I(e),r=d.useRef(!1);return d.useEffect(()=>{const e=e=>{if(e.target&&!r.current){z(K,n,{originalEvent:e},{discrete:!1})}};return t.addEventListener("focusin",e),()=>t.removeEventListener("focusin",e)},[t,n]),{onFocusCapture:()=>r.current=!0,onBlurCapture:()=>r.current=!1}}(e=>{const t=e.target;[...h.branches].some(e=>e.contains(t))||(null==l||l(e),null==f||f(e),e.defaultPrevented||null==p||p())},y);return function(e,t=(null==globalThis?void 0:globalThis.document)){const n=I(e);d.useEffect(()=>{const e=e=>{"Escape"===e.key&&n(e)};return t.addEventListener("keydown",e,{capture:!0}),()=>t.removeEventListener("keydown",e,{capture:!0})},[n,t])}(e=>{R===h.layers.size-1&&(null==i||i(e),!e.defaultPrevented&&p&&(e.preventDefault(),p()))},y),d.useEffect(()=>{if(v)return o&&(0===h.layersWithOutsidePointerEventsDisabled.size&&(L=y.body.style.pointerEvents,y.body.style.pointerEvents="none"),h.layersWithOutsidePointerEventsDisabled.add(v)),h.layers.add(v),V(),()=>{o&&1===h.layersWithOutsidePointerEventsDisabled.size&&(y.body.style.pointerEvents=L)}},[v,y,o,h]),d.useEffect(()=>()=>{v&&(h.layers.delete(v),h.layersWithOutsidePointerEventsDisabled.delete(v),V())},[v,h]),d.useEffect(()=>{const e=()=>w({});return document.addEventListener(W,e),()=>document.removeEventListener(W,e)},[]),C.jsx(k.div,s(c({},m),{ref:b,style:c({pointerEvents:M?P?"auto":"none":void 0},e.style),onFocusCapture:D(e.onFocusCapture,A.onFocusCapture),onBlurCapture:D(e.onBlurCapture,A.onBlurCapture),onPointerDownCapture:D(e.onPointerDownCapture,S.onPointerDownCapture)}))});U.displayName="DismissableLayer";function V(){const e=new CustomEvent(W);document.dispatchEvent(e)}function z(e,t,n,{discrete:r}){const o=n.originalEvent.target,i=new CustomEvent(e,{bubbles:!1,cancelable:!0,detail:n});t&&o.addEventListener(e,t,{once:!0}),r?F(o,i):o.dispatchEvent(i)}d.forwardRef((e,t)=>{const n=d.useContext(H),r=d.useRef(null),o=O(t,r);return d.useEffect(()=>{const e=r.current;if(e)return n.branches.add(e),()=>{n.branches.delete(e)}},[n.branches]),C.jsx(k.div,s(c({},e),{ref:o}))}).displayName="DismissableLayerBranch";var G=Boolean(null==globalThis?void 0:globalThis.document)?d.useLayoutEffect:()=>{},X=p["useId".toString()]||(()=>{}),Y=0;function q(e){const[t,n]=d.useState(X());return G(()=>{n(e=>null!=e?e:String(Y++))},[e]),t?"radix-".concat(t):""}const Z=["top","right","bottom","left"],$=Math.min,J=Math.max,Q=Math.round,ee=Math.floor,te=e=>({x:e,y:e}),ne={left:"right",right:"left",bottom:"top",top:"bottom"},re={start:"end",end:"start"};function oe(e,t,n){return J(e,$(t,n))}function ie(e,t){return"function"==typeof e?e(t):e}function ae(e){return e.split("-")[0]}function ce(e){return e.split("-")[1]}function se(e){return"x"===e?"y":"x"}function ue(e){return"y"===e?"height":"width"}function le(e){return["top","bottom"].includes(ae(e))?"y":"x"}function de(e){return se(le(e))}function fe(e){return e.replace(/start|end/g,e=>re[e])}function pe(e){return e.replace(/left|right|bottom|top/g,e=>ne[e])}function me(e){return"number"!=typeof e?function(e){return c({top:0,right:0,bottom:0,left:0},e)}(e):{top:e,right:e,bottom:e,left:e}}function he(e){const{x:t,y:n,width:r,height:o}=e;return{width:r,height:o,top:n,left:t,right:t+r,bottom:n+o,x:t,y:n}}function ve(e,t,n){let{reference:r,floating:o}=e;const i=le(t),a=de(t),c=ue(a),s=ae(t),u="y"===i,l=r.x+r.width/2-o.width/2,d=r.y+r.height/2-o.height/2,f=r[c]/2-o[c]/2;let p;switch(s){case"top":p={x:l,y:r.y-o.height};break;case"bottom":p={x:l,y:r.y+r.height};break;case"right":p={x:r.x+r.width,y:d};break;case"left":p={x:r.x-o.width,y:d};break;default:p={x:r.x,y:r.y}}switch(ce(t)){case"start":p[a]-=f*(n&&u?-1:1);break;case"end":p[a]+=f*(n&&u?-1:1)}return p}function ge(e,t){return l(this,null,function*(){var n;void 0===t&&(t={});const{x:r,y:o,platform:i,rects:a,elements:c,strategy:s}=e,{boundary:u="clippingAncestors",rootBoundary:l="viewport",elementContext:d="floating",altBoundary:f=!1,padding:p=0}=ie(t,e),m=me(p),h=c[f?"floating"===d?"reference":"floating":d],v=he(yield i.getClippingRect({element:null==(n=yield null==i.isElement?void 0:i.isElement(h))||n?h:h.contextElement||(yield null==i.getDocumentElement?void 0:i.getDocumentElement(c.floating)),boundary:u,rootBoundary:l,strategy:s})),g="floating"===d?{x:r,y:o,width:a.floating.width,height:a.floating.height}:a.reference,y=yield null==i.getOffsetParent?void 0:i.getOffsetParent(c.floating),w=(yield null==i.isElement?void 0:i.isElement(y))&&(yield null==i.getScale?void 0:i.getScale(y))||{x:1,y:1},b=he(i.convertOffsetParentRelativeRectToViewportRelativeRect?yield i.convertOffsetParentRelativeRectToViewportRelativeRect({elements:c,rect:g,offsetParent:y,strategy:s}):g);return{top:(v.top-b.top+m.top)/w.y,bottom:(b.bottom-v.bottom+m.bottom)/w.y,left:(v.left-b.left+m.left)/w.x,right:(b.right-v.right+m.right)/w.x}})}function ye(e,t){return{top:e.top-t.height,right:e.right-t.width,bottom:e.bottom-t.height,left:e.left-t.width}}function we(e){return Z.some(t=>e[t]>=0)}function be(){return"undefined"!=typeof window}function xe(e){return Re(e)?(e.nodeName||"").toLowerCase():"#document"}function _e(e){var t;return(null==e||null==(t=e.ownerDocument)?void 0:t.defaultView)||window}function Ee(e){var t;return null==(t=(Re(e)?e.ownerDocument:e.document)||window.document)?void 0:t.documentElement}function Re(e){return!!be()&&(e instanceof Node||e instanceof _e(e).Node)}function Ce(e){return!!be()&&(e instanceof Element||e instanceof _e(e).Element)}function De(e){return!!be()&&(e instanceof HTMLElement||e instanceof _e(e).HTMLElement)}function Me(e){return!(!be()||"undefined"==typeof ShadowRoot)&&(e instanceof ShadowRoot||e instanceof _e(e).ShadowRoot)}function Oe(e){const{overflow:t,overflowX:n,overflowY:r,display:o}=Te(e);return/auto|scroll|overlay|hidden|clip/.test(t+r+n)&&!["inline","contents"].includes(o)}function Pe(e){return["table","td","th"].includes(xe(e))}function Se(e){return[":popover-open",":modal"].some(t=>{try{return e.matches(t)}catch(n){return!1}})}function Ae(e){const t=Ne(),n=Ce(e)?Te(e):e;return"none"!==n.transform||"none"!==n.perspective||!!n.containerType&&"normal"!==n.containerType||!t&&!!n.backdropFilter&&"none"!==n.backdropFilter||!t&&!!n.filter&&"none"!==n.filter||["transform","perspective","filter"].some(e=>(n.willChange||"").includes(e))||["paint","layout","strict","content"].some(e=>(n.contain||"").includes(e))}function Ne(){return!("undefined"==typeof CSS||!CSS.supports)&&CSS.supports("-webkit-backdrop-filter","none")}function je(e){return["html","body","#document"].includes(xe(e))}function Te(e){return _e(e).getComputedStyle(e)}function ke(e){return Ce(e)?{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}:{scrollLeft:e.scrollX,scrollTop:e.scrollY}}function Fe(e){if("html"===xe(e))return e;const t=e.assignedSlot||e.parentNode||Me(e)&&e.host||Ee(e);return Me(t)?t.host:t}function Ie(e){const t=Fe(e);return je(t)?e.ownerDocument?e.ownerDocument.body:e.body:De(t)&&Oe(t)?t:Ie(t)}function Le(e,t,n){var r;void 0===t&&(t=[]),void 0===n&&(n=!0);const o=Ie(e),i=o===(null==(r=e.ownerDocument)?void 0:r.body),a=_e(o);if(i){const e=We(a);return t.concat(a,a.visualViewport||[],Oe(o)?o:[],e&&n?Le(e):[])}return t.concat(o,Le(o,[],n))}function We(e){return e.parent&&Object.getPrototypeOf(e.parent)?e.frameElement:null}function Be(e){const t=Te(e);let n=parseFloat(t.width)||0,r=parseFloat(t.height)||0;const o=De(e),i=o?e.offsetWidth:n,a=o?e.offsetHeight:r,c=Q(n)!==i||Q(r)!==a;return c&&(n=i,r=a),{width:n,height:r,$:c}}function Ke(e){return Ce(e)?e:e.contextElement}function He(e){const t=Ke(e);if(!De(t))return te(1);const n=t.getBoundingClientRect(),{width:r,height:o,$:i}=Be(t);let a=(i?Q(n.width):n.width)/r,c=(i?Q(n.height):n.height)/o;return a&&Number.isFinite(a)||(a=1),c&&Number.isFinite(c)||(c=1),{x:a,y:c}}const Ue=te(0);function Ve(e){const t=_e(e);return Ne()&&t.visualViewport?{x:t.visualViewport.offsetLeft,y:t.visualViewport.offsetTop}:Ue}function ze(e,t,n,r){void 0===t&&(t=!1),void 0===n&&(n=!1);const o=e.getBoundingClientRect(),i=Ke(e);let a=te(1);t&&(r?Ce(r)&&(a=He(r)):a=He(e));const c=function(e,t,n){return void 0===t&&(t=!1),!(!n||t&&n!==_e(e))&&t}(i,n,r)?Ve(i):te(0);let s=(o.left+c.x)/a.x,u=(o.top+c.y)/a.y,l=o.width/a.x,d=o.height/a.y;if(i){const e=_e(i),t=r&&Ce(r)?_e(r):r;let n=e,o=We(n);for(;o&&r&&t!==n;){const e=He(o),t=o.getBoundingClientRect(),r=Te(o),i=t.left+(o.clientLeft+parseFloat(r.paddingLeft))*e.x,a=t.top+(o.clientTop+parseFloat(r.paddingTop))*e.y;s*=e.x,u*=e.y,l*=e.x,d*=e.y,s+=i,u+=a,n=_e(o),o=We(n)}}return he({width:l,height:d,x:s,y:u})}function Ge(e,t){const n=ke(e).scrollLeft;return t?t.left+n:ze(Ee(e)).left+n}function Xe(e,t,n){let r;if("viewport"===t)r=function(e,t){const n=_e(e),r=Ee(e),o=n.visualViewport;let i=r.clientWidth,a=r.clientHeight,c=0,s=0;if(o){i=o.width,a=o.height;const e=Ne();(!e||e&&"fixed"===t)&&(c=o.offsetLeft,s=o.offsetTop)}return{width:i,height:a,x:c,y:s}}(e,n);else if("document"===t)r=function(e){const t=Ee(e),n=ke(e),r=e.ownerDocument.body,o=J(t.scrollWidth,t.clientWidth,r.scrollWidth,r.clientWidth),i=J(t.scrollHeight,t.clientHeight,r.scrollHeight,r.clientHeight);let a=-n.scrollLeft+Ge(e);const c=-n.scrollTop;return"rtl"===Te(r).direction&&(a+=J(t.clientWidth,r.clientWidth)-o),{width:o,height:i,x:a,y:c}}(Ee(e));else if(Ce(t))r=function(e,t){const n=ze(e,!0,"fixed"===t),r=n.top+e.clientTop,o=n.left+e.clientLeft,i=De(e)?He(e):te(1);return{width:e.clientWidth*i.x,height:e.clientHeight*i.y,x:o*i.x,y:r*i.y}}(t,n);else{const n=Ve(e);r=s(c({},t),{x:t.x-n.x,y:t.y-n.y})}return he(r)}function Ye(e,t){const n=Fe(e);return!(n===t||!Ce(n)||je(n))&&("fixed"===Te(n).position||Ye(n,t))}function qe(e,t,n){const r=De(t),o=Ee(t),i="fixed"===n,a=ze(e,!0,i,t);let c={scrollLeft:0,scrollTop:0};const s=te(0);if(r||!r&&!i)if(("body"!==xe(t)||Oe(o))&&(c=ke(t)),r){const e=ze(t,!0,i,t);s.x=e.x+t.clientLeft,s.y=e.y+t.clientTop}else o&&(s.x=Ge(o));let u=0,l=0;if(o&&!r&&!i){const e=o.getBoundingClientRect();l=e.top+c.scrollTop,u=e.left+c.scrollLeft-Ge(o,e)}return{x:a.left+c.scrollLeft-s.x-u,y:a.top+c.scrollTop-s.y-l,width:a.width,height:a.height}}function Ze(e){return"static"===Te(e).position}function $e(e,t){if(!De(e)||"fixed"===Te(e).position)return null;if(t)return t(e);let n=e.offsetParent;return Ee(e)===n&&(n=n.ownerDocument.body),n}function Je(e,t){const n=_e(e);if(Se(e))return n;if(!De(e)){let t=Fe(e);for(;t&&!je(t);){if(Ce(t)&&!Ze(t))return t;t=Fe(t)}return n}let r=$e(e,t);for(;r&&Pe(r)&&Ze(r);)r=$e(r,t);return r&&je(r)&&Ze(r)&&!Ae(r)?n:r||function(e){let t=Fe(e);for(;De(t)&&!je(t);){if(Ae(t))return t;if(Se(t))return null;t=Fe(t)}return null}(e)||n}const Qe={convertOffsetParentRelativeRectToViewportRelativeRect:function(e){let{elements:t,rect:n,offsetParent:r,strategy:o}=e;const i="fixed"===o,a=Ee(r),c=!!t&&Se(t.floating);if(r===a||c&&i)return n;let s={scrollLeft:0,scrollTop:0},u=te(1);const l=te(0),d=De(r);if((d||!d&&!i)&&(("body"!==xe(r)||Oe(a))&&(s=ke(r)),De(r))){const e=ze(r);u=He(r),l.x=e.x+r.clientLeft,l.y=e.y+r.clientTop}return{width:n.width*u.x,height:n.height*u.y,x:n.x*u.x-s.scrollLeft*u.x+l.x,y:n.y*u.y-s.scrollTop*u.y+l.y}},getDocumentElement:Ee,getClippingRect:function(e){let{element:t,boundary:n,rootBoundary:r,strategy:o}=e;const i=[..."clippingAncestors"===n?Se(t)?[]:function(e,t){const n=t.get(e);if(n)return n;let r=Le(e,[],!1).filter(e=>Ce(e)&&"body"!==xe(e)),o=null;const i="fixed"===Te(e).position;let a=i?Fe(e):e;for(;Ce(a)&&!je(a);){const t=Te(a),n=Ae(a);n||"fixed"!==t.position||(o=null),(i?!n&&!o:!n&&"static"===t.position&&o&&["absolute","fixed"].includes(o.position)||Oe(a)&&!n&&Ye(e,a))?r=r.filter(e=>e!==a):o=t,a=Fe(a)}return t.set(e,r),r}(t,this._c):[].concat(n),r],a=i[0],c=i.reduce((e,n)=>{const r=Xe(t,n,o);return e.top=J(r.top,e.top),e.right=$(r.right,e.right),e.bottom=$(r.bottom,e.bottom),e.left=J(r.left,e.left),e},Xe(t,a,o));return{width:c.right-c.left,height:c.bottom-c.top,x:c.left,y:c.top}},getOffsetParent:Je,getElementRects:function(e){return l(this,null,function*(){const t=this.getOffsetParent||Je,n=this.getDimensions,r=yield n(e.floating);return{reference:qe(e.reference,yield t(e.floating),e.strategy),floating:{x:0,y:0,width:r.width,height:r.height}}})},getClientRects:function(e){return Array.from(e.getClientRects())},getDimensions:function(e){const{width:t,height:n}=Be(e);return{width:t,height:n}},getScale:He,isElement:Ce,isRTL:function(e){return"rtl"===Te(e).direction}};function et(e,t,n,r){void 0===r&&(r={});const{ancestorScroll:o=!0,ancestorResize:i=!0,elementResize:a="function"==typeof ResizeObserver,layoutShift:u="function"==typeof IntersectionObserver,animationFrame:l=!1}=r,d=Ke(e),f=o||i?[...d?Le(d):[],...Le(t)]:[];f.forEach(e=>{o&&e.addEventListener("scroll",n,{passive:!0}),i&&e.addEventListener("resize",n)});const p=d&&u?function(e,t){let n,r=null;const o=Ee(e);function i(){var e;clearTimeout(n),null==(e=r)||e.disconnect(),r=null}return function a(u,l){void 0===u&&(u=!1),void 0===l&&(l=1),i();const{left:d,top:f,width:p,height:m}=e.getBoundingClientRect();if(u||t(),!p||!m)return;const h={rootMargin:-ee(f)+"px "+-ee(o.clientWidth-(d+p))+"px "+-ee(o.clientHeight-(f+m))+"px "+-ee(d)+"px",threshold:J(0,$(1,l))||1};let v=!0;function g(e){const t=e[0].intersectionRatio;if(t!==l){if(!v)return a();t?a(!1,t):n=setTimeout(()=>{a(!1,1e-7)},1e3)}v=!1}try{r=new IntersectionObserver(g,s(c({},h),{root:o.ownerDocument}))}catch(y){r=new IntersectionObserver(g,h)}r.observe(e)}(!0),i}(d,n):null;let m,h=-1,v=null;a&&(v=new ResizeObserver(e=>{let[r]=e;r&&r.target===d&&v&&(v.unobserve(t),cancelAnimationFrame(h),h=requestAnimationFrame(()=>{var e;null==(e=v)||e.observe(t)})),n()}),d&&!l&&v.observe(d),v.observe(t));let g=l?ze(e):null;return l&&function t(){const r=ze(e);!g||r.x===g.x&&r.y===g.y&&r.width===g.width&&r.height===g.height||n();g=r,m=requestAnimationFrame(t)}(),n(),()=>{var e;f.forEach(e=>{o&&e.removeEventListener("scroll",n),i&&e.removeEventListener("resize",n)}),null==p||p(),null==(e=v)||e.disconnect(),v=null,l&&cancelAnimationFrame(m)}}const tt=function(e){return void 0===e&&(e=0),{name:"offset",options:e,fn(t){return l(this,null,function*(){var n,r;const{x:o,y:i,placement:a,middlewareData:u}=t,d=yield function(e,t){return l(this,null,function*(){const{placement:n,platform:r,elements:o}=e,i=yield null==r.isRTL?void 0:r.isRTL(o.floating),a=ae(n),c=ce(n),s="y"===le(n),u=["left","top"].includes(a)?-1:1,l=i&&s?-1:1,d=ie(t,e);let{mainAxis:f,crossAxis:p,alignmentAxis:m}="number"==typeof d?{mainAxis:d,crossAxis:0,alignmentAxis:null}:{mainAxis:d.mainAxis||0,crossAxis:d.crossAxis||0,alignmentAxis:d.alignmentAxis};return c&&"number"==typeof m&&(p="end"===c?-1*m:m),s?{x:p*l,y:f*u}:{x:f*u,y:p*l}})}(t,e);return a===(null==(n=u.offset)?void 0:n.placement)&&null!=(r=u.arrow)&&r.alignmentOffset?{}:{x:o+d.x,y:i+d.y,data:s(c({},d),{placement:a})}})}}},nt=function(e){return void 0===e&&(e={}),{name:"shift",options:e,fn(t){return l(this,null,function*(){const{x:n,y:r,placement:o}=t,i=ie(e,t),{mainAxis:a=!0,crossAxis:l=!1,limiter:d={fn:e=>{let{x:t,y:n}=e;return{x:t,y:n}}}}=i,f=u(i,["mainAxis","crossAxis","limiter"]),p={x:n,y:r},m=yield ge(t,f),h=le(ae(o)),v=se(h);let g=p[v],y=p[h];if(a){const e="y"===v?"bottom":"right";g=oe(g+m["y"===v?"top":"left"],g,g-m[e])}if(l){const e="y"===h?"bottom":"right";y=oe(y+m["y"===h?"top":"left"],y,y-m[e])}const w=d.fn(s(c({},t),{[v]:g,[h]:y}));return s(c({},w),{data:{x:w.x-n,y:w.y-r,enabled:{[v]:a,[h]:l}}})})}}},rt=function(e){return void 0===e&&(e={}),{name:"flip",options:e,fn(t){return l(this,null,function*(){var n,r;const{placement:o,middlewareData:i,rects:a,initialPlacement:c,platform:s,elements:l}=t,d=ie(e,t),{mainAxis:f=!0,crossAxis:p=!0,fallbackPlacements:m,fallbackStrategy:h="bestFit",fallbackAxisSideDirection:v="none",flipAlignment:g=!0}=d,y=u(d,["mainAxis","crossAxis","fallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment"]);if(null!=(n=i.arrow)&&n.alignmentOffset)return{};const w=ae(o),b=le(c),x=ae(c)===c,_=yield null==s.isRTL?void 0:s.isRTL(l.floating),E=m||(x||!g?[pe(c)]:function(e){const t=pe(e);return[fe(e),t,fe(t)]}(c)),R="none"!==v;!m&&R&&E.push(...function(e,t,n,r){const o=ce(e);let i=function(e,t,n){const r=["left","right"],o=["right","left"],i=["top","bottom"],a=["bottom","top"];switch(e){case"top":case"bottom":return n?t?o:r:t?r:o;case"left":case"right":return t?i:a;default:return[]}}(ae(e),"start"===n,r);return o&&(i=i.map(e=>e+"-"+o),t&&(i=i.concat(i.map(fe)))),i}(c,g,v,_));const C=[c,...E],D=yield ge(t,y),M=[];let O=(null==(r=i.flip)?void 0:r.overflows)||[];if(f&&M.push(D[w]),p){const e=function(e,t,n){void 0===n&&(n=!1);const r=ce(e),o=de(e),i=ue(o);let a="x"===o?r===(n?"end":"start")?"right":"left":"start"===r?"bottom":"top";return t.reference[i]>t.floating[i]&&(a=pe(a)),[a,pe(a)]}(o,a,_);M.push(D[e[0]],D[e[1]])}if(O=[...O,{placement:o,overflows:M}],!M.every(e=>e<=0)){var P,S;const e=((null==(P=i.flip)?void 0:P.index)||0)+1,t=C[e];if(t)return{data:{index:e,overflows:O},reset:{placement:t}};let n=null==(S=O.filter(e=>e.overflows[0]<=0).sort((e,t)=>e.overflows[1]-t.overflows[1])[0])?void 0:S.placement;if(!n)switch(h){case"bestFit":{var A;const e=null==(A=O.filter(e=>{if(R){const t=le(e.placement);return t===b||"y"===t}return!0}).map(e=>[e.placement,e.overflows.filter(e=>e>0).reduce((e,t)=>e+t,0)]).sort((e,t)=>e[1]-t[1])[0])?void 0:A[0];e&&(n=e);break}case"initialPlacement":n=c}if(o!==n)return{reset:{placement:n}}}return{}})}}},ot=function(e){return void 0===e&&(e={}),{name:"size",options:e,fn(t){return l(this,null,function*(){var n,r;const{placement:o,rects:i,platform:a,elements:l}=t,d=ie(e,t),{apply:f=()=>{}}=d,p=u(d,["apply"]),m=yield ge(t,p),h=ae(o),v=ce(o),g="y"===le(o),{width:y,height:w}=i.floating;let b,x;"top"===h||"bottom"===h?(b=h,x=v===((yield null==a.isRTL?void 0:a.isRTL(l.floating))?"start":"end")?"left":"right"):(x=h,b="end"===v?"top":"bottom");const _=w-m.top-m.bottom,E=y-m.left-m.right,R=$(w-m[b],_),C=$(y-m[x],E),D=!t.middlewareData.shift;let M=R,O=C;if(null!=(n=t.middlewareData.shift)&&n.enabled.x&&(O=E),null!=(r=t.middlewareData.shift)&&r.enabled.y&&(M=_),D&&!v){const e=J(m.left,0),t=J(m.right,0),n=J(m.top,0),r=J(m.bottom,0);g?O=y-2*(0!==e||0!==t?e+t:J(m.left,m.right)):M=w-2*(0!==n||0!==r?n+r:J(m.top,m.bottom))}yield f(s(c({},t),{availableWidth:O,availableHeight:M}));const P=yield a.getDimensions(l.floating);return y!==P.width||w!==P.height?{reset:{rects:!0}}:{}})}}},it=function(e){return void 0===e&&(e={}),{name:"hide",options:e,fn(t){return l(this,null,function*(){const{rects:n}=t,r=ie(e,t),{strategy:o="referenceHidden"}=r,i=u(r,["strategy"]);switch(o){case"referenceHidden":{const e=ye(yield ge(t,s(c({},i),{elementContext:"reference"})),n.reference);return{data:{referenceHiddenOffsets:e,referenceHidden:we(e)}}}case"escaped":{const e=ye(yield ge(t,s(c({},i),{altBoundary:!0})),n.floating);return{data:{escapedOffsets:e,escaped:we(e)}}}default:return{}}})}}},at=e=>({name:"arrow",options:e,fn(t){return l(this,null,function*(){const{x:n,y:r,placement:o,rects:i,platform:a,elements:s,middlewareData:u}=t,{element:l,padding:d=0}=ie(e,t)||{};if(null==l)return{};const f=me(d),p={x:n,y:r},m=de(o),h=ue(m),v=yield a.getDimensions(l),g="y"===m,y=g?"top":"left",w=g?"bottom":"right",b=g?"clientHeight":"clientWidth",x=i.reference[h]+i.reference[m]-p[m]-i.floating[h],_=p[m]-i.reference[m],E=yield null==a.getOffsetParent?void 0:a.getOffsetParent(l);let R=E?E[b]:0;R&&(yield null==a.isElement?void 0:a.isElement(E))||(R=s.floating[b]||i.floating[h]);const C=x/2-_/2,D=R/2-v[h]/2-1,M=$(f[y],D),O=$(f[w],D),P=M,S=R-v[h]-O,A=R/2-v[h]/2+C,N=oe(P,A,S),j=!u.arrow&&null!=ce(o)&&A!==N&&i.reference[h]/2-(A<P?M:O)-v[h]/2<0,T=j?A<P?A-P:A-S:0;return{[m]:p[m]+T,data:c({[m]:N,centerOffset:A-N-T},j&&{alignmentOffset:T}),reset:j}})}}),ct=function(e){return void 0===e&&(e={}),{options:e,fn(t){const{x:n,y:r,placement:o,rects:i,middlewareData:a}=t,{offset:s=0,mainAxis:u=!0,crossAxis:l=!0}=ie(e,t),d={x:n,y:r},f=le(o),p=se(f);let m=d[p],h=d[f];const v=ie(s,t),g="number"==typeof v?{mainAxis:v,crossAxis:0}:c({mainAxis:0,crossAxis:0},v);if(u){const e="y"===p?"height":"width",t=i.reference[p]-i.floating[e]+g.mainAxis,n=i.reference[p]+i.reference[e]-g.mainAxis;m<t?m=t:m>n&&(m=n)}if(l){var y,w;const e="y"===p?"width":"height",t=["top","left"].includes(ae(o)),n=i.reference[f]-i.floating[e]+(t&&(null==(y=a.offset)?void 0:y[f])||0)+(t?0:g.crossAxis),r=i.reference[f]+i.reference[e]+(t?0:(null==(w=a.offset)?void 0:w[f])||0)-(t?g.crossAxis:0);h<n?h=n:h>r&&(h=r)}return{[p]:m,[f]:h}}}},st=(e,t,n)=>{const r=new Map,o=c({platform:Qe},n),i=s(c({},o.platform),{_c:r});return((e,t,n)=>l(void 0,null,function*(){const{placement:r="bottom",strategy:o="absolute",middleware:i=[],platform:a}=n,u=i.filter(Boolean),l=yield null==a.isRTL?void 0:a.isRTL(t);let d=yield a.getElementRects({reference:e,floating:t,strategy:o}),{x:f,y:p}=ve(d,r,l),m=r,h={},v=0;for(let n=0;n<u.length;n++){const{name:i,fn:g}=u[n],{x:y,y:w,data:b,reset:x}=yield g({x:f,y:p,initialPlacement:r,placement:m,strategy:o,middlewareData:h,rects:d,platform:a,elements:{reference:e,floating:t}});f=null!=y?y:f,p=null!=w?w:p,h=s(c({},h),{[i]:c(c({},h[i]),b)}),x&&v<=50&&(v++,"object"==typeof x&&(x.placement&&(m=x.placement),x.rects&&(d=!0===x.rects?yield a.getElementRects({reference:e,floating:t,strategy:o}):x.rects),({x:f,y:p}=ve(d,m,l))),n=-1)}return{x:f,y:p,placement:m,strategy:o,middlewareData:h}}))(e,t,s(c({},o),{platform:i}))};var ut="undefined"!=typeof document?d.useLayoutEffect:d.useEffect;function lt(e,t){if(e===t)return!0;if(typeof e!=typeof t)return!1;if("function"==typeof e&&e.toString()===t.toString())return!0;let n,r,o;if(e&&t&&"object"==typeof e){if(Array.isArray(e)){if(n=e.length,n!==t.length)return!1;for(r=n;0!==r--;)if(!lt(e[r],t[r]))return!1;return!0}if(o=Object.keys(e),n=o.length,n!==Object.keys(t).length)return!1;for(r=n;0!==r--;)if(!{}.hasOwnProperty.call(t,o[r]))return!1;for(r=n;0!==r--;){const n=o[r];if(("_owner"!==n||!e.$$typeof)&&!lt(e[n],t[n]))return!1}return!0}return e!=e&&t!=t}function dt(e){if("undefined"==typeof window)return 1;return(e.ownerDocument.defaultView||window).devicePixelRatio||1}function ft(e,t){const n=dt(e);return Math.round(t*n)/n}function pt(e){const t=d.useRef(e);return ut(()=>{t.current=e}),t}const mt=(e,t)=>s(c({},tt(e)),{options:[e,t]}),ht=(e,t)=>s(c({},nt(e)),{options:[e,t]}),vt=(e,t)=>s(c({},ct(e)),{options:[e,t]}),gt=(e,t)=>s(c({},rt(e)),{options:[e,t]}),yt=(e,t)=>s(c({},ot(e)),{options:[e,t]}),wt=(e,t)=>s(c({},it(e)),{options:[e,t]}),bt=(e,t)=>s(c({},(e=>({name:"arrow",options:e,fn(t){const{element:n,padding:r}="function"==typeof e?e(t):e;return n&&(o=n,{}.hasOwnProperty.call(o,"current"))?null!=n.current?at({element:n.current,padding:r}).fn(t):{}:n?at({element:n,padding:r}).fn(t):{};var o}}))(e)),{options:[e,t]});var xt=d.forwardRef((e,t)=>{const n=e,{children:r,width:o=10,height:i=5}=n,a=u(n,["children","width","height"]);return C.jsx(k.svg,s(c({},a),{ref:t,width:o,height:i,viewBox:"0 0 30 10",preserveAspectRatio:"none",children:e.asChild?r:C.jsx("polygon",{points:"0,0 30,0 15,10"})}))});xt.displayName="Arrow";var _t=xt;function Et(...e){const t=e[0];if(1===e.length)return t;const n=()=>{const n=e.map(e=>({useScope:e(),scopeName:e.scopeName}));return function(e){const r=n.reduce((t,{useScope:n,scopeName:r})=>{const o=n(e)["__scope".concat(r)];return c(c({},t),o)},{});return d.useMemo(()=>({["__scope".concat(t.scopeName)]:r}),[r])}};return n.scopeName=t.scopeName,n}function Rt(e){const[t,n]=d.useState(void 0);return G(()=>{if(e){n({width:e.offsetWidth,height:e.offsetHeight});const t=new ResizeObserver(t=>{if(!Array.isArray(t))return;if(!t.length)return;const r=t[0];let o,i;if("borderBoxSize"in r){const e=r.borderBoxSize,t=Array.isArray(e)?e[0]:e;o=t.inlineSize,i=t.blockSize}else o=e.offsetWidth,i=e.offsetHeight;n({width:o,height:i})});return t.observe(e,{box:"border-box"}),()=>t.unobserve(e)}n(void 0)},[e]),t}var Ct="Popper",[Dt,Mt]=function(e,t=[]){let n=[];const r=()=>{const t=n.map(e=>d.createContext(e));return function(n){const r=(null==n?void 0:n[e])||t;return d.useMemo(()=>({["__scope".concat(e)]:s(c({},n),{[e]:r})}),[n,r])}};return r.scopeName=e,[function(t,r){const o=d.createContext(r),i=n.length;function a(t){const n=t,{scope:r,children:a}=n,c=u(n,["scope","children"]),s=(null==r?void 0:r[e][i])||o,l=d.useMemo(()=>c,Object.values(c));return C.jsx(s.Provider,{value:l,children:a})}return n=[...n,r],a.displayName=t+"Provider",[a,function(n,a){const c=(null==a?void 0:a[e][i])||o,s=d.useContext(c);if(s)return s;if(void 0!==r)return r;throw new Error("`".concat(n,"` must be used within `").concat(t,"`"))}]},Et(r,...t)]}(Ct),[Ot,Pt]=Dt(Ct),St=e=>{const{__scopePopper:t,children:n}=e,[r,o]=d.useState(null);return C.jsx(Ot,{scope:t,anchor:r,onAnchorChange:o,children:n})};St.displayName=Ct;var At="PopperAnchor",Nt=d.forwardRef((e,t)=>{const n=e,{__scopePopper:r,virtualRef:o}=n,i=u(n,["__scopePopper","virtualRef"]),a=Pt(At,r),l=d.useRef(null),f=O(t,l);return d.useEffect(()=>{a.onAnchorChange((null==o?void 0:o.current)||l.current)}),o?null:C.jsx(k.div,s(c({},i),{ref:f}))});Nt.displayName=At;var jt="PopperContent",[Tt,kt]=Dt(jt),Ft=d.forwardRef((e,t)=>{var n,r,o,i,a,l,p,m;const h=e,{__scopePopper:v,side:g="bottom",sideOffset:y=0,align:w="center",alignOffset:b=0,arrowPadding:x=0,avoidCollisions:_=!0,collisionBoundary:E=[],collisionPadding:R=0,sticky:D="partial",hideWhenDetached:M=!1,updatePositionStrategy:P="optimized",onPlaced:S}=h,A=u(h,["__scopePopper","side","sideOffset","align","alignOffset","arrowPadding","avoidCollisions","collisionBoundary","collisionPadding","sticky","hideWhenDetached","updatePositionStrategy","onPlaced"]),N=Pt(jt,v),[j,T]=d.useState(null),F=O(t,e=>T(e)),[L,W]=d.useState(null),B=Rt(L),K=null!=(n=null==B?void 0:B.width)?n:0,H=null!=(r=null==B?void 0:B.height)?r:0,U=g+("center"!==w?"-"+w:""),V="number"==typeof R?R:c({top:0,right:0,bottom:0,left:0},R),z=Array.isArray(E)?E:[E],X=z.length>0,Y={padding:V,boundary:z.filter(Bt),altBoundary:X},{refs:q,floatingStyles:Z,placement:$,isPositioned:J,middlewareData:Q}=function(e){void 0===e&&(e={});const{placement:t="bottom",strategy:n="absolute",middleware:r=[],platform:o,elements:{reference:i,floating:a}={},transform:u=!0,whileElementsMounted:l,open:p}=e,[m,h]=d.useState({x:0,y:0,strategy:n,placement:t,middlewareData:{},isPositioned:!1}),[v,g]=d.useState(r);lt(v,r)||g(r);const[y,w]=d.useState(null),[b,x]=d.useState(null),_=d.useCallback(e=>{e!==D.current&&(D.current=e,w(e))},[]),E=d.useCallback(e=>{e!==M.current&&(M.current=e,x(e))},[]),R=i||y,C=a||b,D=d.useRef(null),M=d.useRef(null),O=d.useRef(m),P=null!=l,S=pt(l),A=pt(o),N=pt(p),j=d.useCallback(()=>{if(!D.current||!M.current)return;const e={placement:t,strategy:n,middleware:v};A.current&&(e.platform=A.current),st(D.current,M.current,e).then(e=>{const t=s(c({},e),{isPositioned:!1!==N.current});T.current&&!lt(O.current,t)&&(O.current=t,f.flushSync(()=>{h(t)}))})},[v,t,n,A,N]);ut(()=>{!1===p&&O.current.isPositioned&&(O.current.isPositioned=!1,h(e=>s(c({},e),{isPositioned:!1})))},[p]);const T=d.useRef(!1);ut(()=>(T.current=!0,()=>{T.current=!1}),[]),ut(()=>{if(R&&(D.current=R),C&&(M.current=C),R&&C){if(S.current)return S.current(R,C,j);j()}},[R,C,j,S,P]);const k=d.useMemo(()=>({reference:D,floating:M,setReference:_,setFloating:E}),[_,E]),F=d.useMemo(()=>({reference:R,floating:C}),[R,C]),I=d.useMemo(()=>{const e={position:n,left:0,top:0};if(!F.floating)return e;const t=ft(F.floating,m.x),r=ft(F.floating,m.y);return u?c(s(c({},e),{transform:"translate("+t+"px, "+r+"px)"}),dt(F.floating)>=1.5&&{willChange:"transform"}):{position:n,left:t,top:r}},[n,u,F.floating,m.x,m.y]);return d.useMemo(()=>s(c({},m),{update:j,refs:k,elements:F,floatingStyles:I}),[m,j,k,F,I])}({strategy:"fixed",placement:U,whileElementsMounted:(...e)=>et(...e,{animationFrame:"always"===P}),elements:{reference:N.anchor},middleware:[mt({mainAxis:y+H,alignmentAxis:b}),_&&ht(c({mainAxis:!0,crossAxis:!1,limiter:"partial"===D?vt():void 0},Y)),_&&gt(c({},Y)),yt(s(c({},Y),{apply:({elements:e,rects:t,availableWidth:n,availableHeight:r})=>{const{width:o,height:i}=t.reference,a=e.floating.style;a.setProperty("--radix-popper-available-width","".concat(n,"px")),a.setProperty("--radix-popper-available-height","".concat(r,"px")),a.setProperty("--radix-popper-anchor-width","".concat(o,"px")),a.setProperty("--radix-popper-anchor-height","".concat(i,"px"))}})),L&&bt({element:L,padding:x}),Kt({arrowWidth:K,arrowHeight:H}),M&&wt(c({strategy:"referenceHidden"},Y))]}),[ee,te]=Ht($),ne=I(S);G(()=>{J&&(null==ne||ne())},[J,ne]);const re=null==(o=Q.arrow)?void 0:o.x,oe=null==(i=Q.arrow)?void 0:i.y,ie=0!==(null==(a=Q.arrow)?void 0:a.centerOffset),[ae,ce]=d.useState();return G(()=>{j&&ce(window.getComputedStyle(j).zIndex)},[j]),C.jsx("div",{ref:q.setFloating,"data-radix-popper-content-wrapper":"",style:c(s(c({},Z),{transform:J?Z.transform:"translate(0, -200%)",minWidth:"max-content",zIndex:ae,"--radix-popper-transform-origin":[null==(l=Q.transformOrigin)?void 0:l.x,null==(p=Q.transformOrigin)?void 0:p.y].join(" ")}),(null==(m=Q.hide)?void 0:m.referenceHidden)&&{visibility:"hidden",pointerEvents:"none"}),dir:e.dir,children:C.jsx(Tt,{scope:v,placedSide:ee,onArrowChange:W,arrowX:re,arrowY:oe,shouldHideArrow:ie,children:C.jsx(k.div,s(c({"data-side":ee,"data-align":te},A),{ref:F,style:s(c({},A.style),{animation:J?void 0:"none"})}))})})});Ft.displayName=jt;var It="PopperArrow",Lt={top:"bottom",right:"left",bottom:"top",left:"right"},Wt=d.forwardRef(function(e,t){const n=e,{__scopePopper:r}=n,o=u(n,["__scopePopper"]),i=kt(It,r),a=Lt[i.placedSide];return C.jsx("span",{ref:i.onArrowChange,style:{position:"absolute",left:i.arrowX,top:i.arrowY,[a]:0,transformOrigin:{top:"",right:"0 0",bottom:"center 0",left:"100% 0"}[i.placedSide],transform:{top:"translateY(100%)",right:"translateY(50%) rotate(90deg) translateX(-50%)",bottom:"rotate(180deg)",left:"translateY(50%) rotate(-90deg) translateX(50%)"}[i.placedSide],visibility:i.shouldHideArrow?"hidden":void 0},children:C.jsx(_t,s(c({},o),{ref:t,style:s(c({},o.style),{display:"block"})}))})});function Bt(e){return null!==e}Wt.displayName=It;var Kt=e=>({name:"transformOrigin",options:e,fn(t){var n,r,o,i,a;const{placement:c,rects:s,middlewareData:u}=t,l=0!==(null==(n=u.arrow)?void 0:n.centerOffset),d=l?0:e.arrowWidth,f=l?0:e.arrowHeight,[p,m]=Ht(c),h={start:"0%",center:"50%",end:"100%"}[m],v=(null!=(o=null==(r=u.arrow)?void 0:r.x)?o:0)+d/2,g=(null!=(a=null==(i=u.arrow)?void 0:i.y)?a:0)+f/2;let y="",w="";return"bottom"===p?(y=l?h:"".concat(v,"px"),w="".concat(-f,"px")):"top"===p?(y=l?h:"".concat(v,"px"),w="".concat(s.floating.height+f,"px")):"right"===p?(y="".concat(-f,"px"),w=l?h:"".concat(g,"px")):"left"===p&&(y="".concat(s.floating.width+f,"px"),w=l?h:"".concat(g,"px")),{data:{x:y,y:w}}}});function Ht(e){const[t,n="center"]=e.split("-");return[t,n]}var Ut=St,Vt=Nt,zt=Ft,Gt=Wt,Xt=d.forwardRef((e,t)=>{var n;const r=e,{container:o}=r,i=u(r,["container"]),[a,l]=d.useState(!1);G(()=>l(!0),[]);const f=o||a&&(null==(n=null==globalThis?void 0:globalThis.document)?void 0:n.body);return f?m.createPortal(C.jsx(k.div,s(c({},i),{ref:t})),f):null});Xt.displayName="Portal";var Yt=e=>{const{present:t,children:n}=e,r=function(e){const[t,n]=d.useState(),r=d.useRef({}),o=d.useRef(e),i=d.useRef("none"),a=e?"mounted":"unmounted",[c,s]=function(e,t){return d.useReducer((e,n)=>{const r=t[e][n];return null!=r?r:e},e)}(a,{mounted:{UNMOUNT:"unmounted",ANIMATION_OUT:"unmountSuspended"},unmountSuspended:{MOUNT:"mounted",ANIMATION_END:"unmounted"},unmounted:{MOUNT:"mounted"}});return d.useEffect(()=>{const e=qt(r.current);i.current="mounted"===c?e:"none"},[c]),G(()=>{const t=r.current,n=o.current;if(n!==e){const r=i.current,a=qt(t);if(e)s("MOUNT");else if("none"===a||"none"===(null==t?void 0:t.display))s("UNMOUNT");else{s(n&&r!==a?"ANIMATION_OUT":"UNMOUNT")}o.current=e}},[e,s]),G(()=>{var e;if(t){let n;const a=null!=(e=t.ownerDocument.defaultView)?e:window,c=e=>{const i=qt(r.current).includes(e.animationName);if(e.target===t&&i&&(s("ANIMATION_END"),!o.current)){const e=t.style.animationFillMode;t.style.animationFillMode="forwards",n=a.setTimeout(()=>{"forwards"===t.style.animationFillMode&&(t.style.animationFillMode=e)})}},u=e=>{e.target===t&&(i.current=qt(r.current))};return t.addEventListener("animationstart",u),t.addEventListener("animationcancel",c),t.addEventListener("animationend",c),()=>{a.clearTimeout(n),t.removeEventListener("animationstart",u),t.removeEventListener("animationcancel",c),t.removeEventListener("animationend",c)}}s("ANIMATION_END")},[t,s]),{isPresent:["mounted","unmountSuspended"].includes(c),ref:d.useCallback(e=>{e&&(r.current=getComputedStyle(e)),n(e)},[])}}(t),o="function"==typeof n?n({present:r.isPresent}):d.Children.only(n),i=O(r.ref,function(e){var t,n;let r=null==(t=Object.getOwnPropertyDescriptor(e.props,"ref"))?void 0:t.get,o=r&&"isReactWarning"in r&&r.isReactWarning;if(o)return e.ref;if(r=null==(n=Object.getOwnPropertyDescriptor(e,"ref"))?void 0:n.get,o=r&&"isReactWarning"in r&&r.isReactWarning,o)return e.props.ref;return e.props.ref||e.ref}(o));return"function"==typeof n||r.isPresent?d.cloneElement(o,{ref:i}):null};function qt(e){return(null==e?void 0:e.animationName)||"none"}function Zt({prop:e,defaultProp:t,onChange:n=()=>{}}){const[r,o]=function({defaultProp:e,onChange:t}){const n=d.useState(e),[r]=n,o=d.useRef(r),i=I(t);return d.useEffect(()=>{o.current!==r&&(i(r),o.current=r)},[r,o,i]),n}({defaultProp:t,onChange:n}),i=void 0!==e,a=i?e:r,c=I(n);return[a,d.useCallback(t=>{if(i){const n="function"==typeof t?t(e):t;n!==e&&c(n)}else o(t)},[i,e,o,c])]}function $t(...e){const t=e[0];if(1===e.length)return t;const n=()=>{const n=e.map(e=>({useScope:e(),scopeName:e.scopeName}));return function(e){const r=n.reduce((t,{useScope:n,scopeName:r})=>{const o=n(e)["__scope".concat(r)];return c(c({},t),o)},{});return d.useMemo(()=>({["__scope".concat(t.scopeName)]:r}),[r])}};return n.scopeName=t.scopeName,n}function Jt(e){const t=e+"CollectionProvider",[n,r]=function(e,t=[]){let n=[];const r=()=>{const t=n.map(e=>d.createContext(e));return function(n){const r=(null==n?void 0:n[e])||t;return d.useMemo(()=>({["__scope".concat(e)]:s(c({},n),{[e]:r})}),[n,r])}};return r.scopeName=e,[function(t,r){const o=d.createContext(r),i=n.length;function a(t){const n=t,{scope:r,children:a}=n,c=u(n,["scope","children"]),s=(null==r?void 0:r[e][i])||o,l=d.useMemo(()=>c,Object.values(c));return C.jsx(s.Provider,{value:l,children:a})}return n=[...n,r],a.displayName=t+"Provider",[a,function(n,a){const c=(null==a?void 0:a[e][i])||o,s=d.useContext(c);if(s)return s;if(void 0!==r)return r;throw new Error("`".concat(n,"` must be used within `").concat(t,"`"))}]},$t(r,...t)]}(t),[o,i]=n(t,{collectionRef:{current:null},itemMap:new Map}),a=e=>{const{scope:t,children:n}=e,r=h.useRef(null),i=h.useRef(new Map).current;return C.jsx(o,{scope:t,itemMap:i,collectionRef:r,children:n})};a.displayName=t;const l=e+"CollectionSlot",f=h.forwardRef((e,t)=>{const{scope:n,children:r}=e,o=O(t,i(l,n).collectionRef);return C.jsx(A,{ref:o,children:r})});f.displayName=l;const p=e+"CollectionItemSlot",m="data-radix-collection-item",v=h.forwardRef((e,t)=>{const n=e,{scope:r,children:o}=n,a=u(n,["scope","children"]),l=h.useRef(null),d=O(t,l),f=i(p,r);return h.useEffect(()=>(f.itemMap.set(l,c({ref:l},a)),()=>{f.itemMap.delete(l)})),C.jsx(A,s(c({},{[m]:""}),{ref:d,children:o}))});return v.displayName=p,[{Provider:a,Slot:f,ItemSlot:v},function(t){const n=i(e+"CollectionConsumer",t);return h.useCallback(()=>{const e=n.collectionRef.current;if(!e)return[];const t=Array.from(e.querySelectorAll("[".concat(m,"]")));return Array.from(n.itemMap.values()).sort((e,n)=>t.indexOf(e.ref.current)-t.indexOf(n.ref.current))},[n.collectionRef,n.itemMap])},r]}Yt.displayName="Presence";var Qt=d.createContext(void 0);function en(e){const t=d.useContext(Qt);return e||t||"ltr"}var tn=0;function nn(){d.useEffect(()=>{var e,t;const n=document.querySelectorAll("[data-radix-focus-guard]");return document.body.insertAdjacentElement("afterbegin",null!=(e=n[0])?e:rn()),document.body.insertAdjacentElement("beforeend",null!=(t=n[1])?t:rn()),tn++,()=>{1===tn&&document.querySelectorAll("[data-radix-focus-guard]").forEach(e=>e.remove()),tn--}},[])}function rn(){const e=document.createElement("span");return e.setAttribute("data-radix-focus-guard",""),e.tabIndex=0,e.style.outline="none",e.style.opacity="0",e.style.position="fixed",e.style.pointerEvents="none",e}var on="focusScope.autoFocusOnMount",an="focusScope.autoFocusOnUnmount",cn={bubbles:!1,cancelable:!0},sn=d.forwardRef((e,t)=>{const n=e,{loop:r=!1,trapped:o=!1,onMountAutoFocus:i,onUnmountAutoFocus:a}=n,l=u(n,["loop","trapped","onMountAutoFocus","onUnmountAutoFocus"]),[f,p]=d.useState(null),m=I(i),h=I(a),v=d.useRef(null),g=O(t,e=>p(e)),y=d.useRef({paused:!1,pause(){this.paused=!0},resume(){this.paused=!1}}).current;d.useEffect(()=>{if(o){let e=function(e){if(y.paused||!f)return;const t=e.target;f.contains(t)?v.current=t:fn(v.current,{select:!0})},t=function(e){if(y.paused||!f)return;const t=e.relatedTarget;null!==t&&(f.contains(t)||fn(v.current,{select:!0}))},n=function(e){if(document.activeElement===document.body)for(const t of e)t.removedNodes.length>0&&fn(f)};document.addEventListener("focusin",e),document.addEventListener("focusout",t);const r=new MutationObserver(n);return f&&r.observe(f,{childList:!0,subtree:!0}),()=>{document.removeEventListener("focusin",e),document.removeEventListener("focusout",t),r.disconnect()}}},[o,f,y.paused]),d.useEffect(()=>{if(f){pn.add(y);const t=document.activeElement;if(!f.contains(t)){const n=new CustomEvent(on,cn);f.addEventListener(on,m),f.dispatchEvent(n),n.defaultPrevented||(!function(e,{select:t=!1}={}){const n=document.activeElement;for(const r of e)if(fn(r,{select:t}),document.activeElement!==n)return}((e=un(f),e.filter(e=>"A"!==e.tagName)),{select:!0}),document.activeElement===t&&fn(f))}return()=>{f.removeEventListener(on,m),setTimeout(()=>{const e=new CustomEvent(an,cn);f.addEventListener(an,h),f.dispatchEvent(e),e.defaultPrevented||fn(null!=t?t:document.body,{select:!0}),f.removeEventListener(an,h),pn.remove(y)},0)}}var e},[f,m,h,y]);const w=d.useCallback(e=>{if(!r&&!o)return;if(y.paused)return;const t="Tab"===e.key&&!e.altKey&&!e.ctrlKey&&!e.metaKey,n=document.activeElement;if(t&&n){const t=e.currentTarget,[o,i]=function(e){const t=un(e),n=ln(t,e),r=ln(t.reverse(),e);return[n,r]}(t);o&&i?e.shiftKey||n!==i?e.shiftKey&&n===o&&(e.preventDefault(),r&&fn(i,{select:!0})):(e.preventDefault(),r&&fn(o,{select:!0})):n===t&&e.preventDefault()}},[r,o,y.paused]);return C.jsx(k.div,s(c({tabIndex:-1},l),{ref:g,onKeyDown:w}))});function un(e){const t=[],n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,{acceptNode:e=>{const t="INPUT"===e.tagName&&"hidden"===e.type;return e.disabled||e.hidden||t?NodeFilter.FILTER_SKIP:e.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;n.nextNode();)t.push(n.currentNode);return t}function ln(e,t){for(const n of e)if(!dn(n,{upTo:t}))return n}function dn(e,{upTo:t}){if("hidden"===getComputedStyle(e).visibility)return!0;for(;e;){if(void 0!==t&&e===t)return!1;if("none"===getComputedStyle(e).display)return!0;e=e.parentElement}return!1}function fn(e,{select:t=!1}={}){if(e&&e.focus){const n=document.activeElement;e.focus({preventScroll:!0}),e!==n&&function(e){return e instanceof HTMLInputElement&&"select"in e}(e)&&t&&e.select()}}sn.displayName="FocusScope";var pn=function(){let e=[];return{add(t){const n=e[0];t!==n&&(null==n||n.pause()),e=mn(e,t),e.unshift(t)},remove(t){var n;e=mn(e,t),null==(n=e[0])||n.resume()}}}();function mn(e,t){const n=[...e],r=n.indexOf(t);return-1!==r&&n.splice(r,1),n}var hn=new WeakMap,vn=new WeakMap,gn={},yn=0,wn=function(e){return e&&(e.host||wn(e.parentNode))},bn=function(e,t,n,r){var o=function(e,t){return t.map(function(t){if(e.contains(t))return t;var n=wn(t);return n&&e.contains(n)?n:(console.error("aria-hidden",t,"in not contained inside",e,". Doing nothing"),null)}).filter(function(e){return Boolean(e)})}(t,Array.isArray(e)?e:[e]);gn[n]||(gn[n]=new WeakMap);var i=gn[n],a=[],c=new Set,s=new Set(o),u=function(e){e&&!c.has(e)&&(c.add(e),u(e.parentNode))};o.forEach(u);var l=function(e){e&&!s.has(e)&&Array.prototype.forEach.call(e.children,function(e){if(c.has(e))l(e);else try{var t=e.getAttribute(r),o=null!==t&&"false"!==t,s=(hn.get(e)||0)+1,u=(i.get(e)||0)+1;hn.set(e,s),i.set(e,u),a.push(e),1===s&&o&&vn.set(e,!0),1===u&&e.setAttribute(n,"true"),o||e.setAttribute(r,"true")}catch(d){console.error("aria-hidden: cannot operate on ",e,d)}})};return l(t),c.clear(),yn++,function(){a.forEach(function(e){var t=hn.get(e)-1,o=i.get(e)-1;hn.set(e,t),i.set(e,o),t||(vn.has(e)||e.removeAttribute(r),vn.delete(e)),o||e.removeAttribute(n)}),--yn||(hn=new WeakMap,hn=new WeakMap,vn=new WeakMap,gn={})}},xn=function(e,t,n){void 0===n&&(n="data-aria-hidden");var r=Array.from(Array.isArray(e)?e:[e]),o=function(e){return"undefined"==typeof document?null:(Array.isArray(e)?e[0]:e).ownerDocument.body}(e);return o?(r.push.apply(r,Array.from(o.querySelectorAll("[aria-live]"))),bn(r,o,n,"aria-hidden")):function(){return null}},_n=function(){return _n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},_n.apply(this,arguments)};function En(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}"function"==typeof SuppressedError&&SuppressedError;var Rn="right-scroll-bar-position",Cn="width-before-scroll-bar";function Dn(e,t){return"function"==typeof e?e(t):e&&(e.current=t),e}var Mn="undefined"!=typeof window?d.useLayoutEffect:d.useEffect,On=new WeakMap;function Pn(e,t){var n,r,o,i=(n=null,r=function(t){return e.forEach(function(e){return Dn(e,t)})},(o=d.useState(function(){return{value:n,callback:r,facade:{get current(){return o.value},set current(e){var t=o.value;t!==e&&(o.value=e,o.callback(e,t))}}}})[0]).callback=r,o.facade);return Mn(function(){var t=On.get(i);if(t){var n=new Set(t),r=new Set(e),o=i.current;n.forEach(function(e){r.has(e)||Dn(e,null)}),r.forEach(function(e){n.has(e)||Dn(e,o)})}On.set(i,e)},[e]),i}function Sn(e){return e}var An=function(e){var t=e.sideCar,n=En(e,["sideCar"]);if(!t)throw new Error("Sidecar: please provide `sideCar` property to import the right car");var r=t.read();if(!r)throw new Error("Sidecar medium not found");return d.createElement(r,_n({},n))};An.isSideCarExport=!0;var Nn=function(e){void 0===e&&(e={});var t=function(e,t){void 0===t&&(t=Sn);var n=[],r=!1;return{read:function(){if(r)throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");return n.length?n[n.length-1]:e},useMedium:function(e){var o=t(e,r);return n.push(o),function(){n=n.filter(function(e){return e!==o})}},assignSyncMedium:function(e){for(r=!0;n.length;){var t=n;n=[],t.forEach(e)}n={push:function(t){return e(t)},filter:function(){return n}}},assignMedium:function(e){r=!0;var t=[];if(n.length){var o=n;n=[],o.forEach(e),t=n}var i=function(){var n=t;t=[],n.forEach(e)},a=function(){return Promise.resolve().then(i)};a(),n={push:function(e){t.push(e),a()},filter:function(e){return t=t.filter(e),n}}}}}(null);return t.options=_n({async:!0,ssr:!1},e),t}(),jn=function(){},Tn=d.forwardRef(function(e,t){var n=d.useRef(null),r=d.useState({onScrollCapture:jn,onWheelCapture:jn,onTouchMoveCapture:jn}),o=r[0],i=r[1],a=e.forwardProps,c=e.children,s=e.className,u=e.removeScrollBar,l=e.enabled,f=e.shards,p=e.sideCar,m=e.noIsolation,h=e.inert,v=e.allowPinchZoom,g=e.as,y=void 0===g?"div":g,w=e.gapMode,b=En(e,["forwardProps","children","className","removeScrollBar","enabled","shards","sideCar","noIsolation","inert","allowPinchZoom","as","gapMode"]),x=p,_=Pn([n,t]),E=_n(_n({},b),o);return d.createElement(d.Fragment,null,l&&d.createElement(x,{sideCar:Nn,removeScrollBar:u,shards:f,noIsolation:m,inert:h,setCallbacks:i,allowPinchZoom:!!v,lockRef:n,gapMode:w}),a?d.cloneElement(d.Children.only(c),_n(_n({},E),{ref:_})):d.createElement(y,_n({},E,{className:s,ref:_}),c))});Tn.defaultProps={enabled:!0,removeScrollBar:!0,inert:!1},Tn.classNames={fullWidth:Cn,zeroRight:Rn};function kn(){if(!document)return null;var e=document.createElement("style");e.type="text/css";var t=function(){if("undefined"!=typeof __webpack_nonce__)return __webpack_nonce__}();return t&&e.setAttribute("nonce",t),e}var Fn=function(){var e=0,t=null;return{add:function(n){var r,o;0==e&&(t=kn())&&(o=n,(r=t).styleSheet?r.styleSheet.cssText=o:r.appendChild(document.createTextNode(o)),function(e){(document.head||document.getElementsByTagName("head")[0]).appendChild(e)}(t)),e++},remove:function(){! --e&&t&&(t.parentNode&&t.parentNode.removeChild(t),t=null)}}},In=function(){var e,t=(e=Fn(),function(t,n){d.useEffect(function(){return e.add(t),function(){e.remove()}},[t&&n])});return function(e){var n=e.styles,r=e.dynamic;return t(n,r),null}},Ln={left:0,top:0,right:0,gap:0},Wn=function(e){return parseInt(e||"",10)||0},Bn=function(e){if(void 0===e&&(e="margin"),"undefined"==typeof window)return Ln;var t=function(e){var t=window.getComputedStyle(document.body),n=t["padding"===e?"paddingLeft":"marginLeft"],r=t["padding"===e?"paddingTop":"marginTop"],o=t["padding"===e?"paddingRight":"marginRight"];return[Wn(n),Wn(r),Wn(o)]}(e),n=document.documentElement.clientWidth,r=window.innerWidth;return{left:t[0],top:t[1],right:t[2],gap:Math.max(0,r-n+t[2]-t[0])}},Kn=In(),Hn="data-scroll-locked",Un=function(e,t,n,r){var o=e.left,i=e.top,a=e.right,c=e.gap;return void 0===n&&(n="margin"),"\n  .".concat("with-scroll-bars-hidden"," {\n   overflow: hidden ").concat(r,";\n   padding-right: ").concat(c,"px ").concat(r,";\n  }\n  body[").concat(Hn,"] {\n    overflow: hidden ").concat(r,";\n    overscroll-behavior: contain;\n    ").concat([t&&"position: relative ".concat(r,";"),"margin"===n&&"\n    padding-left: ".concat(o,"px;\n    padding-top: ").concat(i,"px;\n    padding-right: ").concat(a,"px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(c,"px ").concat(r,";\n    "),"padding"===n&&"padding-right: ".concat(c,"px ").concat(r,";")].filter(Boolean).join(""),"\n  }\n  \n  .").concat(Rn," {\n    right: ").concat(c,"px ").concat(r,";\n  }\n  \n  .").concat(Cn," {\n    margin-right: ").concat(c,"px ").concat(r,";\n  }\n  \n  .").concat(Rn," .").concat(Rn," {\n    right: 0 ").concat(r,";\n  }\n  \n  .").concat(Cn," .").concat(Cn," {\n    margin-right: 0 ").concat(r,";\n  }\n  \n  body[").concat(Hn,"] {\n    ").concat("--removed-body-scroll-bar-size",": ").concat(c,"px;\n  }\n")},Vn=function(){var e=parseInt(document.body.getAttribute(Hn)||"0",10);return isFinite(e)?e:0},zn=function(e){var t=e.noRelative,n=e.noImportant,r=e.gapMode,o=void 0===r?"margin":r;d.useEffect(function(){return document.body.setAttribute(Hn,(Vn()+1).toString()),function(){var e=Vn()-1;e<=0?document.body.removeAttribute(Hn):document.body.setAttribute(Hn,e.toString())}},[]);var i=d.useMemo(function(){return Bn(o)},[o]);return d.createElement(Kn,{styles:Un(i,!t,o,n?"":"!important")})},Gn=!1;if("undefined"!=typeof window)try{var Xn=Object.defineProperty({},"passive",{get:function(){return Gn=!0,!0}});window.addEventListener("test",Xn,Xn),window.removeEventListener("test",Xn,Xn)}catch(pa){Gn=!1}var Yn=!!Gn&&{passive:!1},qn=function(e,t){if(!(e instanceof Element))return!1;var n=window.getComputedStyle(e);return"hidden"!==n[t]&&!(n.overflowY===n.overflowX&&!function(e){return"TEXTAREA"===e.tagName}(e)&&"visible"===n[t])},Zn=function(e,t){var n=t.ownerDocument,r=t;do{if("undefined"!=typeof ShadowRoot&&r instanceof ShadowRoot&&(r=r.host),$n(e,r)){var o=Jn(e,r);if(o[1]>o[2])return!0}r=r.parentNode}while(r&&r!==n.body);return!1},$n=function(e,t){return"v"===e?function(e){return qn(e,"overflowY")}(t):function(e){return qn(e,"overflowX")}(t)},Jn=function(e,t){return"v"===e?[(n=t).scrollTop,n.scrollHeight,n.clientHeight]:function(e){return[e.scrollLeft,e.scrollWidth,e.clientWidth]}(t);var n},Qn=function(e){return"changedTouches"in e?[e.changedTouches[0].clientX,e.changedTouches[0].clientY]:[0,0]},er=function(e){return[e.deltaX,e.deltaY]},tr=function(e){return e&&"current"in e?e.current:e},nr=function(e){return"\n  .block-interactivity-".concat(e," {pointer-events: none;}\n  .allow-interactivity-").concat(e," {pointer-events: all;}\n")},rr=0,or=[];function ir(e){for(var t=null;null!==e;)e instanceof ShadowRoot&&(t=e.host,e=e.host),e=e.parentNode;return t}const ar=(cr=function(e){var t=d.useRef([]),n=d.useRef([0,0]),r=d.useRef(),o=d.useState(rr++)[0],i=d.useState(In)[0],a=d.useRef(e);d.useEffect(function(){a.current=e},[e]),d.useEffect(function(){if(e.inert){document.body.classList.add("block-interactivity-".concat(o));var t=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}([e.lockRef.current],(e.shards||[]).map(tr),!0).filter(Boolean);return t.forEach(function(e){return e.classList.add("allow-interactivity-".concat(o))}),function(){document.body.classList.remove("block-interactivity-".concat(o)),t.forEach(function(e){return e.classList.remove("allow-interactivity-".concat(o))})}}},[e.inert,e.lockRef.current,e.shards]);var c=d.useCallback(function(e,t){if("touches"in e&&2===e.touches.length||"wheel"===e.type&&e.ctrlKey)return!a.current.allowPinchZoom;var o,i=Qn(e),c=n.current,s="deltaX"in e?e.deltaX:c[0]-i[0],u="deltaY"in e?e.deltaY:c[1]-i[1],l=e.target,d=Math.abs(s)>Math.abs(u)?"h":"v";if("touches"in e&&"h"===d&&"range"===l.type)return!1;var f=Zn(d,l);if(!f)return!0;if(f?o=d:(o="v"===d?"h":"v",f=Zn(d,l)),!f)return!1;if(!r.current&&"changedTouches"in e&&(s||u)&&(r.current=o),!o)return!0;var p=r.current||o;return function(e,t,n,r,o){var i=function(e,t){return"h"===e&&"rtl"===t?-1:1}(e,window.getComputedStyle(t).direction),a=i*r,c=n.target,s=t.contains(c),u=!1,l=a>0,d=0,f=0;do{var p=Jn(e,c),m=p[0],h=p[1]-p[2]-i*m;(m||h)&&$n(e,c)&&(d+=h,f+=m),c=c instanceof ShadowRoot?c.host:c.parentNode}while(!s&&c!==document.body||s&&(t.contains(c)||t===c));return l&&(Math.abs(d)<1||!o)?u=!0:l||!(Math.abs(f)<1)&&o||(u=!0),u}(p,t,e,"h"===p?s:u,!0)},[]),s=d.useCallback(function(e){var n=e;if(or.length&&or[or.length-1]===i){var r="deltaY"in n?er(n):Qn(n),o=t.current.filter(function(e){return e.name===n.type&&(e.target===n.target||n.target===e.shadowParent)&&(t=e.delta,o=r,t[0]===o[0]&&t[1]===o[1]);var t,o})[0];if(o&&o.should)n.cancelable&&n.preventDefault();else if(!o){var s=(a.current.shards||[]).map(tr).filter(Boolean).filter(function(e){return e.contains(n.target)});(s.length>0?c(n,s[0]):!a.current.noIsolation)&&n.cancelable&&n.preventDefault()}}},[]),u=d.useCallback(function(e,n,r,o){var i={name:e,delta:n,target:r,should:o,shadowParent:ir(r)};t.current.push(i),setTimeout(function(){t.current=t.current.filter(function(e){return e!==i})},1)},[]),l=d.useCallback(function(e){n.current=Qn(e),r.current=void 0},[]),f=d.useCallback(function(t){u(t.type,er(t),t.target,c(t,e.lockRef.current))},[]),p=d.useCallback(function(t){u(t.type,Qn(t),t.target,c(t,e.lockRef.current))},[]);d.useEffect(function(){return or.push(i),e.setCallbacks({onScrollCapture:f,onWheelCapture:f,onTouchMoveCapture:p}),document.addEventListener("wheel",s,Yn),document.addEventListener("touchmove",s,Yn),document.addEventListener("touchstart",l,Yn),function(){or=or.filter(function(e){return e!==i}),document.removeEventListener("wheel",s,Yn),document.removeEventListener("touchmove",s,Yn),document.removeEventListener("touchstart",l,Yn)}},[]);var m=e.removeScrollBar,h=e.inert;return d.createElement(d.Fragment,null,h?d.createElement(i,{styles:nr(o)}):null,m?d.createElement(zn,{gapMode:e.gapMode}):null)},Nn.useMedium(cr),An);var cr,sr=d.forwardRef(function(e,t){return d.createElement(Tn,_n({},e,{ref:t,sideCar:ar}))});function ur(...e){const t=e[0];if(1===e.length)return t;const n=()=>{const n=e.map(e=>({useScope:e(),scopeName:e.scopeName}));return function(e){const r=n.reduce((t,{useScope:n,scopeName:r})=>{const o=n(e)["__scope".concat(r)];return c(c({},t),o)},{});return d.useMemo(()=>({["__scope".concat(t.scopeName)]:r}),[r])}};return n.scopeName=t.scopeName,n}sr.classNames=Tn.classNames;var lr="rovingFocusGroup.onEntryFocus",dr={bubbles:!1,cancelable:!0},fr="RovingFocusGroup",[pr,mr,hr]=Jt(fr),[vr,gr]=function(e,t=[]){let n=[];const r=()=>{const t=n.map(e=>d.createContext(e));return function(n){const r=(null==n?void 0:n[e])||t;return d.useMemo(()=>({["__scope".concat(e)]:s(c({},n),{[e]:r})}),[n,r])}};return r.scopeName=e,[function(t,r){const o=d.createContext(r),i=n.length;function a(t){const n=t,{scope:r,children:a}=n,c=u(n,["scope","children"]),s=(null==r?void 0:r[e][i])||o,l=d.useMemo(()=>c,Object.values(c));return C.jsx(s.Provider,{value:l,children:a})}return n=[...n,r],a.displayName=t+"Provider",[a,function(n,a){const c=(null==a?void 0:a[e][i])||o,s=d.useContext(c);if(s)return s;if(void 0!==r)return r;throw new Error("`".concat(n,"` must be used within `").concat(t,"`"))}]},ur(r,...t)]}(fr,[hr]),[yr,wr]=vr(fr),br=d.forwardRef((e,t)=>C.jsx(pr.Provider,{scope:e.__scopeRovingFocusGroup,children:C.jsx(pr.Slot,{scope:e.__scopeRovingFocusGroup,children:C.jsx(xr,s(c({},e),{ref:t}))})}));br.displayName=fr;var xr=d.forwardRef((e,t)=>{const n=e,{__scopeRovingFocusGroup:r,orientation:o,loop:i=!1,dir:a,currentTabStopId:l,defaultCurrentTabStopId:f,onCurrentTabStopIdChange:p,onEntryFocus:m,preventScrollOnEntryFocus:h=!1}=n,v=u(n,["__scopeRovingFocusGroup","orientation","loop","dir","currentTabStopId","defaultCurrentTabStopId","onCurrentTabStopIdChange","onEntryFocus","preventScrollOnEntryFocus"]),g=d.useRef(null),y=O(t,g),w=en(a),[b=null,x]=Zt({prop:l,defaultProp:f,onChange:p}),[_,E]=d.useState(!1),R=I(m),M=mr(r),P=d.useRef(!1),[S,A]=d.useState(0);return d.useEffect(()=>{const e=g.current;if(e)return e.addEventListener(lr,R),()=>e.removeEventListener(lr,R)},[R]),C.jsx(yr,{scope:r,orientation:o,dir:w,loop:i,currentTabStopId:b,onItemFocus:d.useCallback(e=>x(e),[x]),onItemShiftTab:d.useCallback(()=>E(!0),[]),onFocusableItemAdd:d.useCallback(()=>A(e=>e+1),[]),onFocusableItemRemove:d.useCallback(()=>A(e=>e-1),[]),children:C.jsx(k.div,s(c({tabIndex:_||0===S?-1:0,"data-orientation":o},v),{ref:y,style:c({outline:"none"},e.style),onMouseDown:D(e.onMouseDown,()=>{P.current=!0}),onFocus:D(e.onFocus,e=>{const t=!P.current;if(e.target===e.currentTarget&&t&&!_){const t=new CustomEvent(lr,dr);if(e.currentTarget.dispatchEvent(t),!t.defaultPrevented){const e=M().filter(e=>e.focusable);Cr([e.find(e=>e.active),e.find(e=>e.id===b),...e].filter(Boolean).map(e=>e.ref.current),h)}}P.current=!1}),onBlur:D(e.onBlur,()=>E(!1))}))})}),_r="RovingFocusGroupItem",Er=d.forwardRef((e,t)=>{const n=e,{__scopeRovingFocusGroup:r,focusable:o=!0,active:i=!1,tabStopId:a}=n,l=u(n,["__scopeRovingFocusGroup","focusable","active","tabStopId"]),f=q(),p=a||f,m=wr(_r,r),h=m.currentTabStopId===p,v=mr(r),{onFocusableItemAdd:g,onFocusableItemRemove:y}=m;return d.useEffect(()=>{if(o)return g(),()=>y()},[o,g,y]),C.jsx(pr.ItemSlot,{scope:r,id:p,focusable:o,active:i,children:C.jsx(k.span,s(c({tabIndex:h?0:-1,"data-orientation":m.orientation},l),{ref:t,onMouseDown:D(e.onMouseDown,e=>{o?m.onItemFocus(p):e.preventDefault()}),onFocus:D(e.onFocus,()=>m.onItemFocus(p)),onKeyDown:D(e.onKeyDown,e=>{if("Tab"===e.key&&e.shiftKey)return void m.onItemShiftTab();if(e.target!==e.currentTarget)return;const t=function(e,t,n){const r=function(e,t){return"rtl"!==t?e:"ArrowLeft"===e?"ArrowRight":"ArrowRight"===e?"ArrowLeft":e}(e.key,n);return"vertical"===t&&["ArrowLeft","ArrowRight"].includes(r)||"horizontal"===t&&["ArrowUp","ArrowDown"].includes(r)?void 0:Rr[r]}(e,m.orientation,m.dir);if(void 0!==t){if(e.metaKey||e.ctrlKey||e.altKey||e.shiftKey)return;e.preventDefault();let o=v().filter(e=>e.focusable).map(e=>e.ref.current);if("last"===t)o.reverse();else if("prev"===t||"next"===t){"prev"===t&&o.reverse();const i=o.indexOf(e.currentTarget);o=m.loop?(r=i+1,(n=o).map((e,t)=>n[(r+t)%n.length])):o.slice(i+1)}setTimeout(()=>Cr(o))}var n,r})}))})});Er.displayName=_r;var Rr={ArrowLeft:"prev",ArrowUp:"prev",ArrowRight:"next",ArrowDown:"next",PageUp:"first",Home:"first",PageDown:"last",End:"last"};function Cr(e,t=!1){const n=document.activeElement;for(const r of e){if(r===n)return;if(r.focus({preventScroll:t}),document.activeElement!==n)return}}var Dr=br,Mr=Er,Or="Dialog",[Pr,Sr]=P(Or),[Ar,Nr]=Pr(Or),jr=e=>{const{__scopeDialog:t,children:n,open:r,defaultOpen:o,onOpenChange:i,modal:a=!0}=e,c=d.useRef(null),s=d.useRef(null),[u=!1,l]=Zt({prop:r,defaultProp:o,onChange:i});return C.jsx(Ar,{scope:t,triggerRef:c,contentRef:s,contentId:q(),titleId:q(),descriptionId:q(),open:u,onOpenChange:l,onOpenToggle:d.useCallback(()=>l(e=>!e),[l]),modal:a,children:n})};jr.displayName=Or;var Tr="DialogTrigger",kr=d.forwardRef((e,t)=>{const n=e,{__scopeDialog:r}=n,o=u(n,["__scopeDialog"]),i=Nr(Tr,r),a=O(t,i.triggerRef);return C.jsx(k.button,s(c({type:"button","aria-haspopup":"dialog","aria-expanded":i.open,"aria-controls":i.contentId,"data-state":eo(i.open)},o),{ref:a,onClick:D(e.onClick,i.onOpenToggle)}))});kr.displayName=Tr;var Fr="DialogPortal",[Ir,Lr]=Pr(Fr,{forceMount:void 0}),Wr=e=>{const{__scopeDialog:t,forceMount:n,children:r,container:o}=e,i=Nr(Fr,t);return C.jsx(Ir,{scope:t,forceMount:n,children:d.Children.map(r,e=>C.jsx(Yt,{present:n||i.open,children:C.jsx(Xt,{asChild:!0,container:o,children:e})}))})};Wr.displayName=Fr;var Br="DialogOverlay",Kr=d.forwardRef((e,t)=>{const n=Lr(Br,e.__scopeDialog),r=e,{forceMount:o=n.forceMount}=r,i=u(r,["forceMount"]),a=Nr(Br,e.__scopeDialog);return a.modal?C.jsx(Yt,{present:o||a.open,children:C.jsx(Hr,s(c({},i),{ref:t}))}):null});Kr.displayName=Br;var Hr=d.forwardRef((e,t)=>{const n=e,{__scopeDialog:r}=n,o=u(n,["__scopeDialog"]),i=Nr(Br,r);return C.jsx(sr,{as:A,allowPinchZoom:!0,shards:[i.contentRef],children:C.jsx(k.div,s(c({"data-state":eo(i.open)},o),{ref:t,style:c({pointerEvents:"auto"},o.style)}))})}),Ur="DialogContent",Vr=d.forwardRef((e,t)=>{const n=Lr(Ur,e.__scopeDialog),r=e,{forceMount:o=n.forceMount}=r,i=u(r,["forceMount"]),a=Nr(Ur,e.__scopeDialog);return C.jsx(Yt,{present:o||a.open,children:a.modal?C.jsx(zr,s(c({},i),{ref:t})):C.jsx(Gr,s(c({},i),{ref:t}))})});Vr.displayName=Ur;var zr=d.forwardRef((e,t)=>{const n=Nr(Ur,e.__scopeDialog),r=d.useRef(null),o=O(t,n.contentRef,r);return d.useEffect(()=>{const e=r.current;if(e)return xn(e)},[]),C.jsx(Xr,s(c({},e),{ref:o,trapFocus:n.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:D(e.onCloseAutoFocus,e=>{var t;e.preventDefault(),null==(t=n.triggerRef.current)||t.focus()}),onPointerDownOutside:D(e.onPointerDownOutside,e=>{const t=e.detail.originalEvent,n=0===t.button&&!0===t.ctrlKey;(2===t.button||n)&&e.preventDefault()}),onFocusOutside:D(e.onFocusOutside,e=>e.preventDefault())}))}),Gr=d.forwardRef((e,t)=>{const n=Nr(Ur,e.__scopeDialog),r=d.useRef(!1),o=d.useRef(!1);return C.jsx(Xr,s(c({},e),{ref:t,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:t=>{var i,a;null==(i=e.onCloseAutoFocus)||i.call(e,t),t.defaultPrevented||(r.current||null==(a=n.triggerRef.current)||a.focus(),t.preventDefault()),r.current=!1,o.current=!1},onInteractOutside:t=>{var i,a;null==(i=e.onInteractOutside)||i.call(e,t),t.defaultPrevented||(r.current=!0,"pointerdown"===t.detail.originalEvent.type&&(o.current=!0));const c=t.target;(null==(a=n.triggerRef.current)?void 0:a.contains(c))&&t.preventDefault(),"focusin"===t.detail.originalEvent.type&&o.current&&t.preventDefault()}}))}),Xr=d.forwardRef((e,t)=>{const n=e,{__scopeDialog:r,trapFocus:o,onOpenAutoFocus:i,onCloseAutoFocus:a}=n,l=u(n,["__scopeDialog","trapFocus","onOpenAutoFocus","onCloseAutoFocus"]),f=Nr(Ur,r),p=d.useRef(null),m=O(t,p);return nn(),C.jsxs(C.Fragment,{children:[C.jsx(sn,{asChild:!0,loop:!0,trapped:o,onMountAutoFocus:i,onUnmountAutoFocus:a,children:C.jsx(U,s(c({role:"dialog",id:f.contentId,"aria-describedby":f.descriptionId,"aria-labelledby":f.titleId,"data-state":eo(f.open)},l),{ref:m,onDismiss:()=>f.onOpenChange(!1)}))}),C.jsxs(C.Fragment,{children:[C.jsx(oo,{titleId:f.titleId}),C.jsx(io,{contentRef:p,descriptionId:f.descriptionId})]})]})}),Yr="DialogTitle",qr=d.forwardRef((e,t)=>{const n=e,{__scopeDialog:r}=n,o=u(n,["__scopeDialog"]),i=Nr(Yr,r);return C.jsx(k.h2,s(c({id:i.titleId},o),{ref:t}))});qr.displayName=Yr;var Zr="DialogDescription",$r=d.forwardRef((e,t)=>{const n=e,{__scopeDialog:r}=n,o=u(n,["__scopeDialog"]),i=Nr(Zr,r);return C.jsx(k.p,s(c({id:i.descriptionId},o),{ref:t}))});$r.displayName=Zr;var Jr="DialogClose",Qr=d.forwardRef((e,t)=>{const n=e,{__scopeDialog:r}=n,o=u(n,["__scopeDialog"]),i=Nr(Jr,r);return C.jsx(k.button,s(c({type:"button"},o),{ref:t,onClick:D(e.onClick,()=>i.onOpenChange(!1))}))});function eo(e){return e?"open":"closed"}Qr.displayName=Jr;var to="DialogTitleWarning",[no,ro]=function(e,t){const n=d.createContext(t),r=e=>{const t=e,{children:r}=t,o=u(t,["children"]),i=d.useMemo(()=>o,Object.values(o));return C.jsx(n.Provider,{value:i,children:r})};return r.displayName=e+"Provider",[r,function(r){const o=d.useContext(n);if(o)return o;if(void 0!==t)return t;throw new Error("`".concat(r,"` must be used within `").concat(e,"`"))}]}(to,{contentName:Ur,titleName:Yr,docsSlug:"dialog"}),oo=({titleId:e})=>{const t=ro(to),n="`".concat(t.contentName,"` requires a `").concat(t.titleName,"` for the component to be accessible for screen reader users.\n\nIf you want to hide the `").concat(t.titleName,"`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/").concat(t.docsSlug);return d.useEffect(()=>{if(e){document.getElementById(e)||console.error(n)}},[n,e]),null},io=({contentRef:e,descriptionId:t})=>{const n=ro("DialogDescriptionWarning"),r="Warning: Missing `Description` or `aria-describedby={undefined}` for {".concat(n.contentName,"}.");return d.useEffect(()=>{var n;const o=null==(n=e.current)?void 0:n.getAttribute("aria-describedby");if(t&&o){document.getElementById(t)||console.warn(r)}},[r,e,t]),null},ao=jr,co=kr,so=Wr,uo=Kr,lo=Vr,fo=qr,po=$r,mo=Qr,ho=["Enter"," "],vo=["ArrowUp","PageDown","End"],go=["ArrowDown","PageUp","Home",...vo],yo={ltr:[...ho,"ArrowRight"],rtl:[...ho,"ArrowLeft"]},wo={ltr:["ArrowLeft"],rtl:["ArrowRight"]},bo="Menu",[xo,_o,Eo]=Jt(bo),[Ro,Co]=P(bo,[Eo,Mt,gr]),Do=Mt(),Mo=gr(),[Oo,Po]=Ro(bo),[So,Ao]=Ro(bo),No=e=>{const{__scopeMenu:t,open:n=!1,children:r,dir:o,onOpenChange:i,modal:a=!0}=e,u=Do(t),[l,f]=d.useState(null),p=d.useRef(!1),m=I(i),h=en(o);return d.useEffect(()=>{const e=()=>{p.current=!0,document.addEventListener("pointerdown",t,{capture:!0,once:!0}),document.addEventListener("pointermove",t,{capture:!0,once:!0})},t=()=>p.current=!1;return document.addEventListener("keydown",e,{capture:!0}),()=>{document.removeEventListener("keydown",e,{capture:!0}),document.removeEventListener("pointerdown",t,{capture:!0}),document.removeEventListener("pointermove",t,{capture:!0})}},[]),C.jsx(Ut,s(c({},u),{children:C.jsx(Oo,{scope:t,open:n,onOpenChange:m,content:l,onContentChange:f,children:C.jsx(So,{scope:t,onClose:d.useCallback(()=>m(!1),[m]),isUsingKeyboardRef:p,dir:h,modal:a,children:r})})}))};No.displayName=bo;var jo=d.forwardRef((e,t)=>{const n=e,{__scopeMenu:r}=n,o=u(n,["__scopeMenu"]),i=Do(r);return C.jsx(Vt,s(c(c({},i),o),{ref:t}))});jo.displayName="MenuAnchor";var To="MenuPortal",[ko,Fo]=Ro(To,{forceMount:void 0}),Io=e=>{const{__scopeMenu:t,forceMount:n,children:r,container:o}=e,i=Po(To,t);return C.jsx(ko,{scope:t,forceMount:n,children:C.jsx(Yt,{present:n||i.open,children:C.jsx(Xt,{asChild:!0,container:o,children:r})})})};Io.displayName=To;var Lo="MenuContent",[Wo,Bo]=Ro(Lo),Ko=d.forwardRef((e,t)=>{const n=Fo(Lo,e.__scopeMenu),r=e,{forceMount:o=n.forceMount}=r,i=u(r,["forceMount"]),a=Po(Lo,e.__scopeMenu),l=Ao(Lo,e.__scopeMenu);return C.jsx(xo.Provider,{scope:e.__scopeMenu,children:C.jsx(Yt,{present:o||a.open,children:C.jsx(xo.Slot,{scope:e.__scopeMenu,children:l.modal?C.jsx(Ho,s(c({},i),{ref:t})):C.jsx(Uo,s(c({},i),{ref:t}))})})})}),Ho=d.forwardRef((e,t)=>{const n=Po(Lo,e.__scopeMenu),r=d.useRef(null),o=O(t,r);return d.useEffect(()=>{const e=r.current;if(e)return xn(e)},[]),C.jsx(Vo,s(c({},e),{ref:o,trapFocus:n.open,disableOutsidePointerEvents:n.open,disableOutsideScroll:!0,onFocusOutside:D(e.onFocusOutside,e=>e.preventDefault(),{checkForDefaultPrevented:!1}),onDismiss:()=>n.onOpenChange(!1)}))}),Uo=d.forwardRef((e,t)=>{const n=Po(Lo,e.__scopeMenu);return C.jsx(Vo,s(c({},e),{ref:t,trapFocus:!1,disableOutsidePointerEvents:!1,disableOutsideScroll:!1,onDismiss:()=>n.onOpenChange(!1)}))}),Vo=d.forwardRef((e,t)=>{const n=e,{__scopeMenu:r,loop:o=!1,trapFocus:i,onOpenAutoFocus:a,onCloseAutoFocus:l,disableOutsidePointerEvents:f,onEntryFocus:p,onEscapeKeyDown:m,onPointerDownOutside:h,onFocusOutside:v,onInteractOutside:g,onDismiss:y,disableOutsideScroll:w}=n,b=u(n,["__scopeMenu","loop","trapFocus","onOpenAutoFocus","onCloseAutoFocus","disableOutsidePointerEvents","onEntryFocus","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","onDismiss","disableOutsideScroll"]),x=Po(Lo,r),_=Ao(Lo,r),E=Do(r),R=Mo(r),M=_o(r),[P,S]=d.useState(null),N=d.useRef(null),j=O(t,N,x.onContentChange),T=d.useRef(0),k=d.useRef(""),F=d.useRef(0),I=d.useRef(null),L=d.useRef("right"),W=d.useRef(0),B=w?sr:d.Fragment,K=w?{as:A,allowPinchZoom:!0}:void 0,H=e=>{var t,n;const r=k.current+e,o=M().filter(e=>!e.disabled),i=document.activeElement,a=null==(t=o.find(e=>e.ref.current===i))?void 0:t.textValue,c=function(e,t,n){const r=t.length>1&&Array.from(t).every(e=>e===t[0]),o=r?t[0]:t,i=n?e.indexOf(n):-1;let a=(c=e,s=Math.max(i,0),c.map((e,t)=>c[(s+t)%c.length]));var c,s;1===o.length&&(a=a.filter(e=>e!==n));const u=a.find(e=>e.toLowerCase().startsWith(o.toLowerCase()));return u!==n?u:void 0}(o.map(e=>e.textValue),r,a),s=null==(n=o.find(e=>e.textValue===c))?void 0:n.ref.current;!function e(t){k.current=t,window.clearTimeout(T.current),""!==t&&(T.current=window.setTimeout(()=>e(""),1e3))}(r),s&&setTimeout(()=>s.focus())};d.useEffect(()=>()=>window.clearTimeout(T.current),[]),nn();const V=d.useCallback(e=>{var t,n;return L.current===(null==(t=I.current)?void 0:t.side)&&function(e,t){if(!t)return!1;const n={x:e.clientX,y:e.clientY};return function(e,t){const{x:n,y:r}=e;let o=!1;for(let i=0,a=t.length-1;i<t.length;a=i++){const e=t[i].x,c=t[i].y,s=t[a].x,u=t[a].y;c>r!=u>r&&n<(s-e)*(r-c)/(u-c)+e&&(o=!o)}return o}(n,t)}(e,null==(n=I.current)?void 0:n.area)},[]);return C.jsx(Wo,{scope:r,searchRef:k,onItemEnter:d.useCallback(e=>{V(e)&&e.preventDefault()},[V]),onItemLeave:d.useCallback(e=>{var t;V(e)||(null==(t=N.current)||t.focus(),S(null))},[V]),onTriggerLeave:d.useCallback(e=>{V(e)&&e.preventDefault()},[V]),pointerGraceTimerRef:F,onPointerGraceIntentChange:d.useCallback(e=>{I.current=e},[]),children:C.jsx(B,s(c({},K),{children:C.jsx(sn,{asChild:!0,trapped:i,onMountAutoFocus:D(a,e=>{var t;e.preventDefault(),null==(t=N.current)||t.focus({preventScroll:!0})}),onUnmountAutoFocus:l,children:C.jsx(U,{asChild:!0,disableOutsidePointerEvents:f,onEscapeKeyDown:m,onPointerDownOutside:h,onFocusOutside:v,onInteractOutside:g,onDismiss:y,children:C.jsx(Dr,s(c({asChild:!0},R),{dir:_.dir,orientation:"vertical",loop:o,currentTabStopId:P,onCurrentTabStopIdChange:S,onEntryFocus:D(p,e=>{_.isUsingKeyboardRef.current||e.preventDefault()}),preventScrollOnEntryFocus:!0,children:C.jsx(zt,s(c(c({role:"menu","aria-orientation":"vertical","data-state":vi(x.open),"data-radix-menu-content":"",dir:_.dir},E),b),{ref:j,style:c({outline:"none"},b.style),onKeyDown:D(b.onKeyDown,e=>{const t=e.target.closest("[data-radix-menu-content]")===e.currentTarget,n=e.ctrlKey||e.altKey||e.metaKey,r=1===e.key.length;t&&("Tab"===e.key&&e.preventDefault(),!n&&r&&H(e.key));const o=N.current;if(e.target!==o)return;if(!go.includes(e.key))return;e.preventDefault();const i=M().filter(e=>!e.disabled).map(e=>e.ref.current);vo.includes(e.key)&&i.reverse(),function(e){const t=document.activeElement;for(const n of e){if(n===t)return;if(n.focus(),document.activeElement!==t)return}}(i)}),onBlur:D(e.onBlur,e=>{e.currentTarget.contains(e.target)||(window.clearTimeout(T.current),k.current="")}),onPointerMove:D(e.onPointerMove,wi(e=>{const t=e.target,n=W.current!==e.clientX;if(e.currentTarget.contains(t)&&n){const t=e.clientX>W.current?"right":"left";L.current=t,W.current=e.clientX}}))}))}))})})}))})});Ko.displayName=Lo;var zo=d.forwardRef((e,t)=>{const n=e,{__scopeMenu:r}=n,o=u(n,["__scopeMenu"]);return C.jsx(k.div,s(c({role:"group"},o),{ref:t}))});zo.displayName="MenuGroup";var Go=d.forwardRef((e,t)=>{const n=e,{__scopeMenu:r}=n,o=u(n,["__scopeMenu"]);return C.jsx(k.div,s(c({},o),{ref:t}))});Go.displayName="MenuLabel";var Xo="MenuItem",Yo="menu.itemSelect",qo=d.forwardRef((e,t)=>{const n=e,{disabled:r=!1,onSelect:o}=n,i=u(n,["disabled","onSelect"]),a=d.useRef(null),l=Ao(Xo,e.__scopeMenu),f=Bo(Xo,e.__scopeMenu),p=O(t,a),m=d.useRef(!1);return C.jsx(Zo,s(c({},i),{ref:p,disabled:r,onClick:D(e.onClick,()=>{const e=a.current;if(!r&&e){const t=new CustomEvent(Yo,{bubbles:!0,cancelable:!0});e.addEventListener(Yo,e=>null==o?void 0:o(e),{once:!0}),F(e,t),t.defaultPrevented?m.current=!1:l.onClose()}}),onPointerDown:t=>{var n;null==(n=e.onPointerDown)||n.call(e,t),m.current=!0},onPointerUp:D(e.onPointerUp,e=>{var t;m.current||null==(t=e.currentTarget)||t.click()}),onKeyDown:D(e.onKeyDown,e=>{const t=""!==f.searchRef.current;r||t&&" "===e.key||ho.includes(e.key)&&(e.currentTarget.click(),e.preventDefault())})}))});qo.displayName=Xo;var Zo=d.forwardRef((e,t)=>{const n=e,{__scopeMenu:r,disabled:o=!1,textValue:i}=n,a=u(n,["__scopeMenu","disabled","textValue"]),l=Bo(Xo,r),f=Mo(r),p=d.useRef(null),m=O(t,p),[h,v]=d.useState(!1),[g,y]=d.useState("");return d.useEffect(()=>{var e;const t=p.current;t&&y((null!=(e=t.textContent)?e:"").trim())},[a.children]),C.jsx(xo.ItemSlot,{scope:r,disabled:o,textValue:null!=i?i:g,children:C.jsx(Mr,s(c({asChild:!0},f),{focusable:!o,children:C.jsx(k.div,s(c({role:"menuitem","data-highlighted":h?"":void 0,"aria-disabled":o||void 0,"data-disabled":o?"":void 0},a),{ref:m,onPointerMove:D(e.onPointerMove,wi(e=>{if(o)l.onItemLeave(e);else if(l.onItemEnter(e),!e.defaultPrevented){e.currentTarget.focus({preventScroll:!0})}})),onPointerLeave:D(e.onPointerLeave,wi(e=>l.onItemLeave(e))),onFocus:D(e.onFocus,()=>v(!0)),onBlur:D(e.onBlur,()=>v(!1))}))}))})}),$o=d.forwardRef((e,t)=>{const n=e,{checked:r=!1,onCheckedChange:o}=n,i=u(n,["checked","onCheckedChange"]);return C.jsx(ii,{scope:e.__scopeMenu,checked:r,children:C.jsx(qo,s(c({role:"menuitemcheckbox","aria-checked":gi(r)?"mixed":r},i),{ref:t,"data-state":yi(r),onSelect:D(i.onSelect,()=>null==o?void 0:o(!!gi(r)||!r),{checkForDefaultPrevented:!1})}))})});$o.displayName="MenuCheckboxItem";var Jo="MenuRadioGroup",[Qo,ei]=Ro(Jo,{value:void 0,onValueChange:()=>{}}),ti=d.forwardRef((e,t)=>{const n=e,{value:r,onValueChange:o}=n,i=u(n,["value","onValueChange"]),a=I(o);return C.jsx(Qo,{scope:e.__scopeMenu,value:r,onValueChange:a,children:C.jsx(zo,s(c({},i),{ref:t}))})});ti.displayName=Jo;var ni="MenuRadioItem",ri=d.forwardRef((e,t)=>{const n=e,{value:r}=n,o=u(n,["value"]),i=ei(ni,e.__scopeMenu),a=r===i.value;return C.jsx(ii,{scope:e.__scopeMenu,checked:a,children:C.jsx(qo,s(c({role:"menuitemradio","aria-checked":a},o),{ref:t,"data-state":yi(a),onSelect:D(o.onSelect,()=>{var e;return null==(e=i.onValueChange)?void 0:e.call(i,r)},{checkForDefaultPrevented:!1})}))})});ri.displayName=ni;var oi="MenuItemIndicator",[ii,ai]=Ro(oi,{checked:!1}),ci=d.forwardRef((e,t)=>{const n=e,{__scopeMenu:r,forceMount:o}=n,i=u(n,["__scopeMenu","forceMount"]),a=ai(oi,r);return C.jsx(Yt,{present:o||gi(a.checked)||!0===a.checked,children:C.jsx(k.span,s(c({},i),{ref:t,"data-state":yi(a.checked)}))})});ci.displayName=oi;var si=d.forwardRef((e,t)=>{const n=e,{__scopeMenu:r}=n,o=u(n,["__scopeMenu"]);return C.jsx(k.div,s(c({role:"separator","aria-orientation":"horizontal"},o),{ref:t}))});si.displayName="MenuSeparator";var ui=d.forwardRef((e,t)=>{const n=e,{__scopeMenu:r}=n,o=u(n,["__scopeMenu"]),i=Do(r);return C.jsx(Gt,s(c(c({},i),o),{ref:t}))});ui.displayName="MenuArrow";var[li,di]=Ro("MenuSub"),fi="MenuSubTrigger",pi=d.forwardRef((e,t)=>{const n=Po(fi,e.__scopeMenu),r=Ao(fi,e.__scopeMenu),o=di(fi,e.__scopeMenu),i=Bo(fi,e.__scopeMenu),a=d.useRef(null),{pointerGraceTimerRef:u,onPointerGraceIntentChange:l}=i,f={__scopeMenu:e.__scopeMenu},p=d.useCallback(()=>{a.current&&window.clearTimeout(a.current),a.current=null},[]);return d.useEffect(()=>p,[p]),d.useEffect(()=>{const e=u.current;return()=>{window.clearTimeout(e),l(null)}},[u,l]),C.jsx(jo,s(c({asChild:!0},f),{children:C.jsx(Zo,s(c({id:o.triggerId,"aria-haspopup":"menu","aria-expanded":n.open,"aria-controls":o.contentId,"data-state":vi(n.open)},e),{ref:M(t,o.onTriggerChange),onClick:t=>{var r;null==(r=e.onClick)||r.call(e,t),e.disabled||t.defaultPrevented||(t.currentTarget.focus(),n.open||n.onOpenChange(!0))},onPointerMove:D(e.onPointerMove,wi(t=>{i.onItemEnter(t),t.defaultPrevented||e.disabled||n.open||a.current||(i.onPointerGraceIntentChange(null),a.current=window.setTimeout(()=>{n.onOpenChange(!0),p()},100))})),onPointerLeave:D(e.onPointerLeave,wi(e=>{var t,r;p();const o=null==(t=n.content)?void 0:t.getBoundingClientRect();if(o){const t=null==(r=n.content)?void 0:r.dataset.side,a="right"===t,c=a?-5:5,s=o[a?"left":"right"],l=o[a?"right":"left"];i.onPointerGraceIntentChange({area:[{x:e.clientX+c,y:e.clientY},{x:s,y:o.top},{x:l,y:o.top},{x:l,y:o.bottom},{x:s,y:o.bottom}],side:t}),window.clearTimeout(u.current),u.current=window.setTimeout(()=>i.onPointerGraceIntentChange(null),300)}else{if(i.onTriggerLeave(e),e.defaultPrevented)return;i.onPointerGraceIntentChange(null)}})),onKeyDown:D(e.onKeyDown,t=>{var o;const a=""!==i.searchRef.current;e.disabled||a&&" "===t.key||yo[r.dir].includes(t.key)&&(n.onOpenChange(!0),null==(o=n.content)||o.focus(),t.preventDefault())})}))}))});pi.displayName=fi;var mi="MenuSubContent",hi=d.forwardRef((e,t)=>{const n=Fo(Lo,e.__scopeMenu),r=e,{forceMount:o=n.forceMount}=r,i=u(r,["forceMount"]),a=Po(Lo,e.__scopeMenu),l=Ao(Lo,e.__scopeMenu),f=di(mi,e.__scopeMenu),p=d.useRef(null),m=O(t,p);return C.jsx(xo.Provider,{scope:e.__scopeMenu,children:C.jsx(Yt,{present:o||a.open,children:C.jsx(xo.Slot,{scope:e.__scopeMenu,children:C.jsx(Vo,s(c({id:f.contentId,"aria-labelledby":f.triggerId},i),{ref:m,align:"start",side:"rtl"===l.dir?"left":"right",disableOutsidePointerEvents:!1,disableOutsideScroll:!1,trapFocus:!1,onOpenAutoFocus:e=>{var t;l.isUsingKeyboardRef.current&&(null==(t=p.current)||t.focus()),e.preventDefault()},onCloseAutoFocus:e=>e.preventDefault(),onFocusOutside:D(e.onFocusOutside,e=>{e.target!==f.trigger&&a.onOpenChange(!1)}),onEscapeKeyDown:D(e.onEscapeKeyDown,e=>{l.onClose(),e.preventDefault()}),onKeyDown:D(e.onKeyDown,e=>{var t;const n=e.currentTarget.contains(e.target),r=wo[l.dir].includes(e.key);n&&r&&(a.onOpenChange(!1),null==(t=f.trigger)||t.focus(),e.preventDefault())})}))})})})});function vi(e){return e?"open":"closed"}function gi(e){return"indeterminate"===e}function yi(e){return gi(e)?"indeterminate":e?"checked":"unchecked"}function wi(e){return t=>"mouse"===t.pointerType?e(t):void 0}hi.displayName=mi;var bi=No,xi=jo,_i=Io,Ei=Ko,Ri=zo,Ci=Go,Di=qo,Mi=$o,Oi=ti,Pi=ri,Si=ci,Ai=si,Ni=ui,ji=pi,Ti=hi,ki="DropdownMenu",[Fi,Ii]=P(ki,[Co]),Li=Co(),[Wi,Bi]=Fi(ki),Ki=e=>{const{__scopeDropdownMenu:t,children:n,dir:r,open:o,defaultOpen:i,onOpenChange:a,modal:u=!0}=e,l=Li(t),f=d.useRef(null),[p=!1,m]=Zt({prop:o,defaultProp:i,onChange:a});return C.jsx(Wi,{scope:t,triggerId:q(),triggerRef:f,contentId:q(),open:p,onOpenChange:m,onOpenToggle:d.useCallback(()=>m(e=>!e),[m]),modal:u,children:C.jsx(bi,s(c({},l),{open:p,onOpenChange:m,dir:r,modal:u,children:n}))})};Ki.displayName=ki;var Hi="DropdownMenuTrigger",Ui=d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r,disabled:o=!1}=n,i=u(n,["__scopeDropdownMenu","disabled"]),a=Bi(Hi,r),l=Li(r);return C.jsx(xi,s(c({asChild:!0},l),{children:C.jsx(k.button,s(c({type:"button",id:a.triggerId,"aria-haspopup":"menu","aria-expanded":a.open,"aria-controls":a.open?a.contentId:void 0,"data-state":a.open?"open":"closed","data-disabled":o?"":void 0,disabled:o},i),{ref:M(t,a.triggerRef),onPointerDown:D(e.onPointerDown,e=>{o||0!==e.button||!1!==e.ctrlKey||(a.onOpenToggle(),a.open||e.preventDefault())}),onKeyDown:D(e.onKeyDown,e=>{o||(["Enter"," "].includes(e.key)&&a.onOpenToggle(),"ArrowDown"===e.key&&a.onOpenChange(!0),["Enter"," ","ArrowDown"].includes(e.key)&&e.preventDefault())})}))}))});Ui.displayName=Hi;var Vi=e=>{const t=e,{__scopeDropdownMenu:n}=t,r=u(t,["__scopeDropdownMenu"]),o=Li(n);return C.jsx(_i,c(c({},o),r))};Vi.displayName="DropdownMenuPortal";var zi="DropdownMenuContent",Gi=d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Bi(zi,r),a=Li(r),l=d.useRef(!1);return C.jsx(Ei,s(c(c({id:i.contentId,"aria-labelledby":i.triggerId},a),o),{ref:t,onCloseAutoFocus:D(e.onCloseAutoFocus,e=>{var t;l.current||null==(t=i.triggerRef.current)||t.focus(),l.current=!1,e.preventDefault()}),onInteractOutside:D(e.onInteractOutside,e=>{const t=e.detail.originalEvent,n=0===t.button&&!0===t.ctrlKey,r=2===t.button||n;i.modal&&!r||(l.current=!0)}),style:c(c({},e.style),{"--radix-dropdown-menu-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-dropdown-menu-content-available-width":"var(--radix-popper-available-width)","--radix-dropdown-menu-content-available-height":"var(--radix-popper-available-height)","--radix-dropdown-menu-trigger-width":"var(--radix-popper-anchor-width)","--radix-dropdown-menu-trigger-height":"var(--radix-popper-anchor-height)"})}))});Gi.displayName=zi;d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(Ri,s(c(c({},i),o),{ref:t}))}).displayName="DropdownMenuGroup";var Xi=d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(Ci,s(c(c({},i),o),{ref:t}))});Xi.displayName="DropdownMenuLabel";var Yi=d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(Di,s(c(c({},i),o),{ref:t}))});Yi.displayName="DropdownMenuItem";var qi=d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(Mi,s(c(c({},i),o),{ref:t}))});qi.displayName="DropdownMenuCheckboxItem";d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(Oi,s(c(c({},i),o),{ref:t}))}).displayName="DropdownMenuRadioGroup";var Zi=d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(Pi,s(c(c({},i),o),{ref:t}))});Zi.displayName="DropdownMenuRadioItem";var $i=d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(Si,s(c(c({},i),o),{ref:t}))});$i.displayName="DropdownMenuItemIndicator";var Ji=d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(Ai,s(c(c({},i),o),{ref:t}))});Ji.displayName="DropdownMenuSeparator";d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(Ni,s(c(c({},i),o),{ref:t}))}).displayName="DropdownMenuArrow";var Qi=d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(ji,s(c(c({},i),o),{ref:t}))});Qi.displayName="DropdownMenuSubTrigger";var ea=d.forwardRef((e,t)=>{const n=e,{__scopeDropdownMenu:r}=n,o=u(n,["__scopeDropdownMenu"]),i=Li(r);return C.jsx(Ti,s(c(c({},i),o),{ref:t,style:c(c({},e.style),{"--radix-dropdown-menu-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-dropdown-menu-content-available-width":"var(--radix-popper-available-width)","--radix-dropdown-menu-content-available-height":"var(--radix-popper-available-height)","--radix-dropdown-menu-trigger-width":"var(--radix-popper-anchor-width)","--radix-dropdown-menu-trigger-height":"var(--radix-popper-anchor-height)"})}))});ea.displayName="DropdownMenuSubContent";var ta=Ki,na=Ui,ra=Vi,oa=Gi,ia=Xi,aa=Yi,ca=qi,sa=Zi,ua=$i,la=Ji,da=Qi,fa=ea;export{Vt as A,co as B,zt as C,U as D,Sr as E,sn as F,da as G,fa as H,Mr as I,ra as J,oa as K,aa as L,ca as M,ua as N,uo as O,k as P,sa as Q,sr as R,j as S,fo as T,ia as U,la as V,no as W,ta as X,na as Y,Mt as a,D as b,P as c,Yt as d,Gt as e,A as f,Jt as g,G as h,xn as i,C as j,nn as k,q as l,I as m,Xt as n,en as o,Zt as p,Ut as q,gr as r,Dr as s,Rt as t,O as u,lo as v,mo as w,po as x,so as y,ao as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
