var e=(e,t,s)=>new Promise((n,r)=>{var i=e=>{try{a(s.next(e))}catch(t){r(t)}},o=e=>{try{a(s.throw(e))}catch(t){r(t)}},a=e=>e.done?n(e.value):Promise.resolve(e.value).then(i,o);a((s=s.apply(e,t)).next())});import{g as t,d as s}from"./vendor-BuTl1vWo.js";const n={},r=function(e,t,s){let r=Promise.resolve();if(t&&t.length>0){document.getElementsByTagName("link");const e=document.querySelector("meta[property=csp-nonce]"),s=(null==e?void 0:e.nonce)||(null==e?void 0:e.getAttribute("nonce"));r=Promise.allSettled(t.map(e=>{if((e=function(e){return"/"+e}(e))in n)return;n[e]=!0;const t=e.endsWith(".css"),r=t?'[rel="stylesheet"]':"";if(document.querySelector('link[href="'.concat(e,'"]').concat(r)))return;const i=document.createElement("link");return i.rel=t?"stylesheet":"modulepreload",t||(i.as="script"),i.crossOrigin="",i.href=e,s&&i.setAttribute("nonce",s),document.head.appendChild(i),t?new Promise((t,s)=>{i.addEventListener("load",t),i.addEventListener("error",()=>s(new Error("Unable to preload CSS for ".concat(e))))}):void 0}))}function i(e){const t=new Event("vite:preloadError",{cancelable:!0});if(t.payload=e,window.dispatchEvent(t),!t.defaultPrevented)throw e}return r.then(t=>{for(const e of t||[])"rejected"===e.status&&i(e.reason);return e().catch(i)})};class i extends Error{constructor(e,t="FunctionsError",s){super(e),this.name=t,this.context=s}}class o extends i{constructor(e){super("Failed to send a request to the Edge Function","FunctionsFetchError",e)}}class a extends i{constructor(e){super("Relay Error invoking the Edge Function","FunctionsRelayError",e)}}class l extends i{constructor(e){super("Edge Function returned a non-2xx status code","FunctionsHttpError",e)}}var c,h;(h=c||(c={})).Any="any",h.ApNortheast1="ap-northeast-1",h.ApNortheast2="ap-northeast-2",h.ApSouth1="ap-south-1",h.ApSoutheast1="ap-southeast-1",h.ApSoutheast2="ap-southeast-2",h.CaCentral1="ca-central-1",h.EuCentral1="eu-central-1",h.EuWest1="eu-west-1",h.EuWest2="eu-west-2",h.EuWest3="eu-west-3",h.SaEast1="sa-east-1",h.UsEast1="us-east-1",h.UsWest1="us-west-1",h.UsWest2="us-west-2";var u=function(e,t,s,n){return new(s||(s=Promise))(function(r,i){function o(e){try{l(n.next(e))}catch(t){i(t)}}function a(e){try{l(n.throw(e))}catch(t){i(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof s?t:new s(function(e){e(t)})).then(o,a)}l((n=n.apply(e,t||[])).next())})};class d{constructor(t,{headers:s={},customFetch:n,region:i=c.Any}={}){this.url=t,this.headers=s,this.region=i,this.fetch=(t=>{let s;return s=t||("undefined"==typeof fetch?(...t)=>r(()=>e(void 0,null,function*(){const{default:e}=yield Promise.resolve().then(()=>j);return{default:e}}),void 0).then(({default:e})=>e(...t)):fetch),(...e)=>s(...e)})(n)}setAuth(e){this.headers.Authorization="Bearer ".concat(e)}invoke(e,t={}){var s;return u(this,void 0,void 0,function*(){try{const{headers:n,method:r,body:i}=t;let c,h={},{region:u}=t;u||(u=this.region),u&&"any"!==u&&(h["x-region"]=u),i&&(n&&!Object.prototype.hasOwnProperty.call(n,"Content-Type")||!n)&&("undefined"!=typeof Blob&&i instanceof Blob||i instanceof ArrayBuffer?(h["Content-Type"]="application/octet-stream",c=i):"string"==typeof i?(h["Content-Type"]="text/plain",c=i):"undefined"!=typeof FormData&&i instanceof FormData?c=i:(h["Content-Type"]="application/json",c=JSON.stringify(i)));const d=yield this.fetch("".concat(this.url,"/").concat(e),{method:r||"POST",headers:Object.assign(Object.assign(Object.assign({},h),this.headers),n),body:c}).catch(e=>{throw new o(e)}),f=d.headers.get("x-relay-error");if(f&&"true"===f)throw new a(d);if(!d.ok)throw new l(d);let p,g=(null!==(s=d.headers.get("Content-Type"))&&void 0!==s?s:"text/plain").split(";")[0].trim();return p="application/json"===g?yield d.json():"application/octet-stream"===g?yield d.blob():"text/event-stream"===g?d:"multipart/form-data"===g?yield d.formData():yield d.text(),{data:p,error:null}}catch(n){return{data:null,error:n}}})}}var f={},p={},g={},y={},v={},m={},_=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof globalThis)return globalThis;throw new Error("unable to locate global object")}();const b=_.fetch,w=_.fetch.bind(_),k=_.Headers,S=_.Request,T=_.Response,j=Object.freeze(Object.defineProperty({__proto__:null,Headers:k,Request:S,Response:T,default:w,fetch:b},Symbol.toStringTag,{value:"Module"})),E=t(j);var P={};Object.defineProperty(P,"__esModule",{value:!0});let O=class extends Error{constructor(e){super(e.message),this.name="PostgrestError",this.details=e.details,this.hint=e.hint,this.code=e.code}};P.default=O;var A=s&&s.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(m,"__esModule",{value:!0});const C=A(E),I=A(P);m.default=class{constructor(e){this.shouldThrowOnError=!1,this.method=e.method,this.url=e.url,this.headers=e.headers,this.schema=e.schema,this.body=e.body,this.shouldThrowOnError=e.shouldThrowOnError,this.signal=e.signal,this.isMaybeSingle=e.isMaybeSingle,e.fetch?this.fetch=e.fetch:"undefined"==typeof fetch?this.fetch=C.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(e,t){return this.headers=Object.assign({},this.headers),this.headers[e]=t,this}then(t,s){void 0===this.schema||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),"GET"!==this.method&&"HEAD"!==this.method&&(this.headers["Content-Type"]="application/json");let n=(0,this.fetch)(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(t=>e(this,null,function*(){var e,s,n;let r=null,i=null,o=null,a=t.status,l=t.statusText;if(t.ok){if("HEAD"!==this.method){const e=yield t.text();""===e||(i="text/csv"===this.headers.Accept||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?e:JSON.parse(e))}const n=null===(e=this.headers.Prefer)||void 0===e?void 0:e.match(/count=(exact|planned|estimated)/),c=null===(s=t.headers.get("content-range"))||void 0===s?void 0:s.split("/");n&&c&&c.length>1&&(o=parseInt(c[1])),this.isMaybeSingle&&"GET"===this.method&&Array.isArray(i)&&(i.length>1?(r={code:"PGRST116",details:"Results contain ".concat(i.length," rows, application/vnd.pgrst.object+json requires 1 row"),hint:null,message:"JSON object requested, multiple (or no) rows returned"},i=null,o=null,a=406,l="Not Acceptable"):i=1===i.length?i[0]:null)}else{const e=yield t.text();try{r=JSON.parse(e),Array.isArray(r)&&404===t.status&&(i=[],r=null,a=200,l="OK")}catch(c){404===t.status&&""===e?(a=204,l="No Content"):r={message:e}}if(r&&this.isMaybeSingle&&(null===(n=null==r?void 0:r.details)||void 0===n?void 0:n.includes("0 rows"))&&(r=null,a=200,l="OK"),r&&this.shouldThrowOnError)throw new I.default(r)}return{error:r,data:i,count:o,status:a,statusText:l}}));return this.shouldThrowOnError||(n=n.catch(e=>{var t,s,n;return{error:{message:"".concat(null!==(t=null==e?void 0:e.name)&&void 0!==t?t:"FetchError",": ").concat(null==e?void 0:e.message),details:"".concat(null!==(s=null==e?void 0:e.stack)&&void 0!==s?s:""),hint:"",code:"".concat(null!==(n=null==e?void 0:e.code)&&void 0!==n?n:"")},data:null,count:null,status:0,statusText:""}})),n.then(t,s)}returns(){return this}overrideTypes(){return this}};var R=s&&s.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(v,"__esModule",{value:!0});const x=R(m);let L=class extends x.default{select(e){let t=!1;const s=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!t?"":('"'===e&&(t=!t),e)).join("");return this.url.searchParams.set("select",s),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(e,{ascending:t=!0,nullsFirst:s,foreignTable:n,referencedTable:r=n}={}){const i=r?"".concat(r,".order"):"order",o=this.url.searchParams.get(i);return this.url.searchParams.set(i,"".concat(o?"".concat(o,","):"").concat(e,".").concat(t?"asc":"desc").concat(void 0===s?"":s?".nullsfirst":".nullslast")),this}limit(e,{foreignTable:t,referencedTable:s=t}={}){const n=void 0===s?"limit":"".concat(s,".limit");return this.url.searchParams.set(n,"".concat(e)),this}range(e,t,{foreignTable:s,referencedTable:n=s}={}){const r=void 0===n?"offset":"".concat(n,".offset"),i=void 0===n?"limit":"".concat(n,".limit");return this.url.searchParams.set(r,"".concat(e)),this.url.searchParams.set(i,"".concat(t-e+1)),this}abortSignal(e){return this.signal=e,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return"GET"===this.method?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:e=!1,verbose:t=!1,settings:s=!1,buffers:n=!1,wal:r=!1,format:i="text"}={}){var o;const a=[e?"analyze":null,t?"verbose":null,s?"settings":null,n?"buffers":null,r?"wal":null].filter(Boolean).join("|"),l=null!==(o=this.headers.Accept)&&void 0!==o?o:"application/json";return this.headers.Accept="application/vnd.pgrst.plan+".concat(i,'; for="').concat(l,'"; options=').concat(a,";"),this}rollback(){var e;return(null!==(e=this.headers.Prefer)&&void 0!==e?e:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}};v.default=L;var U=s&&s.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(y,"__esModule",{value:!0});const D=U(v);let N=class extends D.default{eq(e,t){return this.url.searchParams.append(e,"eq.".concat(t)),this}neq(e,t){return this.url.searchParams.append(e,"neq.".concat(t)),this}gt(e,t){return this.url.searchParams.append(e,"gt.".concat(t)),this}gte(e,t){return this.url.searchParams.append(e,"gte.".concat(t)),this}lt(e,t){return this.url.searchParams.append(e,"lt.".concat(t)),this}lte(e,t){return this.url.searchParams.append(e,"lte.".concat(t)),this}like(e,t){return this.url.searchParams.append(e,"like.".concat(t)),this}likeAllOf(e,t){return this.url.searchParams.append(e,"like(all).{".concat(t.join(","),"}")),this}likeAnyOf(e,t){return this.url.searchParams.append(e,"like(any).{".concat(t.join(","),"}")),this}ilike(e,t){return this.url.searchParams.append(e,"ilike.".concat(t)),this}ilikeAllOf(e,t){return this.url.searchParams.append(e,"ilike(all).{".concat(t.join(","),"}")),this}ilikeAnyOf(e,t){return this.url.searchParams.append(e,"ilike(any).{".concat(t.join(","),"}")),this}is(e,t){return this.url.searchParams.append(e,"is.".concat(t)),this}in(e,t){const s=Array.from(new Set(t)).map(e=>"string"==typeof e&&new RegExp("[,()]").test(e)?'"'.concat(e,'"'):"".concat(e)).join(",");return this.url.searchParams.append(e,"in.(".concat(s,")")),this}contains(e,t){return"string"==typeof t?this.url.searchParams.append(e,"cs.".concat(t)):Array.isArray(t)?this.url.searchParams.append(e,"cs.{".concat(t.join(","),"}")):this.url.searchParams.append(e,"cs.".concat(JSON.stringify(t))),this}containedBy(e,t){return"string"==typeof t?this.url.searchParams.append(e,"cd.".concat(t)):Array.isArray(t)?this.url.searchParams.append(e,"cd.{".concat(t.join(","),"}")):this.url.searchParams.append(e,"cd.".concat(JSON.stringify(t))),this}rangeGt(e,t){return this.url.searchParams.append(e,"sr.".concat(t)),this}rangeGte(e,t){return this.url.searchParams.append(e,"nxl.".concat(t)),this}rangeLt(e,t){return this.url.searchParams.append(e,"sl.".concat(t)),this}rangeLte(e,t){return this.url.searchParams.append(e,"nxr.".concat(t)),this}rangeAdjacent(e,t){return this.url.searchParams.append(e,"adj.".concat(t)),this}overlaps(e,t){return"string"==typeof t?this.url.searchParams.append(e,"ov.".concat(t)):this.url.searchParams.append(e,"ov.{".concat(t.join(","),"}")),this}textSearch(e,t,{config:s,type:n}={}){let r="";"plain"===n?r="pl":"phrase"===n?r="ph":"websearch"===n&&(r="w");const i=void 0===s?"":"(".concat(s,")");return this.url.searchParams.append(e,"".concat(r,"fts").concat(i,".").concat(t)),this}match(e){return Object.entries(e).forEach(([e,t])=>{this.url.searchParams.append(e,"eq.".concat(t))}),this}not(e,t,s){return this.url.searchParams.append(e,"not.".concat(t,".").concat(s)),this}or(e,{foreignTable:t,referencedTable:s=t}={}){const n=s?"".concat(s,".or"):"or";return this.url.searchParams.append(n,"(".concat(e,")")),this}filter(e,t,s){return this.url.searchParams.append(e,"".concat(t,".").concat(s)),this}};y.default=N;var q=s&&s.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(g,"__esModule",{value:!0});const B=q(y);g.default=class{constructor(e,{headers:t={},schema:s,fetch:n}){this.url=e,this.headers=t,this.schema=s,this.fetch=n}select(e,{head:t=!1,count:s}={}){const n=t?"HEAD":"GET";let r=!1;const i=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!r?"":('"'===e&&(r=!r),e)).join("");return this.url.searchParams.set("select",i),s&&(this.headers.Prefer="count=".concat(s)),new B.default({method:n,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(e,{count:t,defaultToNull:s=!0}={}){const n=[];if(this.headers.Prefer&&n.push(this.headers.Prefer),t&&n.push("count=".concat(t)),s||n.push("missing=default"),this.headers.Prefer=n.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>'"'.concat(e,'"'));this.url.searchParams.set("columns",e.join(","))}}return new B.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}upsert(e,{onConflict:t,ignoreDuplicates:s=!1,count:n,defaultToNull:r=!0}={}){const i=["resolution=".concat(s?"ignore":"merge","-duplicates")];if(void 0!==t&&this.url.searchParams.set("on_conflict",t),this.headers.Prefer&&i.push(this.headers.Prefer),n&&i.push("count=".concat(n)),r||i.push("missing=default"),this.headers.Prefer=i.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>'"'.concat(e,'"'));this.url.searchParams.set("columns",e.join(","))}}return new B.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}update(e,{count:t}={}){const s=[];return this.headers.Prefer&&s.push(this.headers.Prefer),t&&s.push("count=".concat(t)),this.headers.Prefer=s.join(","),new B.default({method:"PATCH",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}delete({count:e}={}){const t=[];return e&&t.push("count=".concat(e)),this.headers.Prefer&&t.unshift(this.headers.Prefer),this.headers.Prefer=t.join(","),new B.default({method:"DELETE",url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}};var M={},F={};Object.defineProperty(F,"__esModule",{value:!0}),F.version=void 0,F.version="0.0.0-automated",Object.defineProperty(M,"__esModule",{value:!0}),M.DEFAULT_HEADERS=void 0;const z=F;M.DEFAULT_HEADERS={"X-Client-Info":"postgrest-js/".concat(z.version)};var J=s&&s.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(p,"__esModule",{value:!0});const K=J(g),W=J(y),H=M;p.default=class e{constructor(e,{headers:t={},schema:s,fetch:n}={}){this.url=e,this.headers=Object.assign(Object.assign({},H.DEFAULT_HEADERS),t),this.schemaName=s,this.fetch=n}from(e){const t=new URL("".concat(this.url,"/").concat(e));return new K.default(t,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(t){return new e(this.url,{headers:this.headers,schema:t,fetch:this.fetch})}rpc(e,t={},{head:s=!1,get:n=!1,count:r}={}){let i;const o=new URL("".concat(this.url,"/rpc/").concat(e));let a;s||n?(i=s?"HEAD":"GET",Object.entries(t).filter(([e,t])=>void 0!==t).map(([e,t])=>[e,Array.isArray(t)?"{".concat(t.join(","),"}"):"".concat(t)]).forEach(([e,t])=>{o.searchParams.append(e,t)})):(i="POST",a=t);const l=Object.assign({},this.headers);return r&&(l.Prefer="count=".concat(r)),new W.default({method:i,url:o,headers:l,schema:this.schemaName,body:a,fetch:this.fetch,allowEmpty:!1})}};var G=s&&s.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(f,"__esModule",{value:!0}),f.PostgrestError=f.PostgrestBuilder=f.PostgrestTransformBuilder=f.PostgrestFilterBuilder=f.PostgrestQueryBuilder=f.PostgrestClient=void 0;const V=G(p);f.PostgrestClient=V.default;const Y=G(g);f.PostgrestQueryBuilder=Y.default;const $=G(y);f.PostgrestFilterBuilder=$.default;const Q=G(v);f.PostgrestTransformBuilder=Q.default;const X=G(m);f.PostgrestBuilder=X.default;const Z=G(P);f.PostgrestError=Z.default;var ee=f.default={PostgrestClient:V.default,PostgrestQueryBuilder:Y.default,PostgrestFilterBuilder:$.default,PostgrestTransformBuilder:Q.default,PostgrestBuilder:X.default,PostgrestError:Z.default};const{PostgrestClient:te,PostgrestQueryBuilder:se,PostgrestFilterBuilder:ne,PostgrestTransformBuilder:re,PostgrestBuilder:ie,PostgrestError:oe}=ee;let ae;ae="undefined"==typeof window?require("ws"):window.WebSocket;const le=ae,ce={"X-Client-Info":"realtime-js/".concat("2.11.10")};var he,ue,de,fe,pe,ge,ye,ve,me,_e,be;(ue=he||(he={}))[ue.connecting=0]="connecting",ue[ue.open=1]="open",ue[ue.closing=2]="closing",ue[ue.closed=3]="closed",(fe=de||(de={})).closed="closed",fe.errored="errored",fe.joined="joined",fe.joining="joining",fe.leaving="leaving",(ge=pe||(pe={})).close="phx_close",ge.error="phx_error",ge.join="phx_join",ge.reply="phx_reply",ge.leave="phx_leave",ge.access_token="access_token",(ye||(ye={})).websocket="websocket",(me=ve||(ve={})).Connecting="connecting",me.Open="open",me.Closing="closing",me.Closed="closed";class we{constructor(){this.HEADER_LENGTH=1}decode(e,t){return e.constructor===ArrayBuffer?t(this._binaryDecode(e)):t("string"==typeof e?JSON.parse(e):{})}_binaryDecode(e){const t=new DataView(e),s=new TextDecoder;return this._decodeBroadcast(e,t,s)}_decodeBroadcast(e,t,s){const n=t.getUint8(1),r=t.getUint8(2);let i=this.HEADER_LENGTH+2;const o=s.decode(e.slice(i,i+n));i+=n;const a=s.decode(e.slice(i,i+r));i+=r;return{ref:null,topic:o,event:a,payload:JSON.parse(s.decode(e.slice(i,e.byteLength)))}}}class ke{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=void 0,this.tries=0,this.callback=e,this.timerCalc=t}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}(be=_e||(_e={})).abstime="abstime",be.bool="bool",be.date="date",be.daterange="daterange",be.float4="float4",be.float8="float8",be.int2="int2",be.int4="int4",be.int4range="int4range",be.int8="int8",be.int8range="int8range",be.json="json",be.jsonb="jsonb",be.money="money",be.numeric="numeric",be.oid="oid",be.reltime="reltime",be.text="text",be.time="time",be.timestamp="timestamp",be.timestamptz="timestamptz",be.timetz="timetz",be.tsrange="tsrange",be.tstzrange="tstzrange";const Se=(e,t,s={})=>{var n;const r=null!==(n=s.skipTypes)&&void 0!==n?n:[];return Object.keys(t).reduce((s,n)=>(s[n]=Te(n,e,t,r),s),{})},Te=(e,t,s,n)=>{const r=t.find(t=>t.name===e),i=null==r?void 0:r.type,o=s[e];return i&&!n.includes(i)?je(i,o):Ee(o)},je=(e,t)=>{if("_"===e.charAt(0)){const s=e.slice(1,e.length);return Ce(t,s)}switch(e){case _e.bool:return Pe(t);case _e.float4:case _e.float8:case _e.int2:case _e.int4:case _e.int8:case _e.numeric:case _e.oid:return Oe(t);case _e.json:case _e.jsonb:return Ae(t);case _e.timestamp:return Ie(t);case _e.abstime:case _e.date:case _e.daterange:case _e.int4range:case _e.int8range:case _e.money:case _e.reltime:case _e.text:case _e.time:case _e.timestamptz:case _e.timetz:case _e.tsrange:case _e.tstzrange:default:return Ee(t)}},Ee=e=>e,Pe=e=>{switch(e){case"t":return!0;case"f":return!1;default:return e}},Oe=e=>{if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return t}return e},Ae=e=>{if("string"==typeof e)try{return JSON.parse(e)}catch(t){return console.log("JSON parse error: ".concat(t)),e}return e},Ce=(e,t)=>{if("string"!=typeof e)return e;const s=e.length-1,n=e[s];if("{"===e[0]&&"}"===n){let n;const i=e.slice(1,s);try{n=JSON.parse("["+i+"]")}catch(r){n=i?i.split(","):[]}return n.map(e=>je(t,e))}return e},Ie=e=>"string"==typeof e?e.replace(" ","T"):e,Re=e=>{let t=e;return t=t.replace(/^ws/i,"http"),t=t.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),t.replace(/\/+$/,"")};class xe{constructor(e,t,s={},n=1e4){this.channel=e,this.event=t,this.payload=s,this.timeout=n,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(e){this.timeout=e,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(e){this.payload=Object.assign(Object.assign({},this.payload),e)}receive(e,t){var s;return this._hasReceived(e)&&t(null===(s=this.receivedResp)||void 0===s?void 0:s.response),this.recHooks.push({status:e,callback:t}),this}startTimeout(){if(this.timeoutTimer)return;this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref);this.channel._on(this.refEvent,{},e=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=e,this._matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}trigger(e,t){this.refEvent&&this.channel._trigger(this.refEvent,{status:e,response:t})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:e,response:t}){this.recHooks.filter(t=>t.status===e).forEach(e=>e.callback(t))}_hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}}var Le,Ue,De,Ne,qe,Be,Me,Fe;(Ue=Le||(Le={})).SYNC="sync",Ue.JOIN="join",Ue.LEAVE="leave";class ze{constructor(e,t){this.channel=e,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const s=(null==t?void 0:t.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(s.state,{},e=>{const{onJoin:t,onLeave:s,onSync:n}=this.caller;this.joinRef=this.channel._joinRef(),this.state=ze.syncState(this.state,e,t,s),this.pendingDiffs.forEach(e=>{this.state=ze.syncDiff(this.state,e,t,s)}),this.pendingDiffs=[],n()}),this.channel._on(s.diff,{},e=>{const{onJoin:t,onLeave:s,onSync:n}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(e):(this.state=ze.syncDiff(this.state,e,t,s),n())}),this.onJoin((e,t,s)=>{this.channel._trigger("presence",{event:"join",key:e,currentPresences:t,newPresences:s})}),this.onLeave((e,t,s)=>{this.channel._trigger("presence",{event:"leave",key:e,currentPresences:t,leftPresences:s})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(e,t,s,n){const r=this.cloneDeep(e),i=this.transformState(t),o={},a={};return this.map(r,(e,t)=>{i[e]||(a[e]=t)}),this.map(i,(e,t)=>{const s=r[e];if(s){const n=t.map(e=>e.presence_ref),r=s.map(e=>e.presence_ref),i=t.filter(e=>r.indexOf(e.presence_ref)<0),l=s.filter(e=>n.indexOf(e.presence_ref)<0);i.length>0&&(o[e]=i),l.length>0&&(a[e]=l)}else o[e]=t}),this.syncDiff(r,{joins:o,leaves:a},s,n)}static syncDiff(e,t,s,n){const{joins:r,leaves:i}={joins:this.transformState(t.joins),leaves:this.transformState(t.leaves)};return s||(s=()=>{}),n||(n=()=>{}),this.map(r,(t,n)=>{var r;const i=null!==(r=e[t])&&void 0!==r?r:[];if(e[t]=this.cloneDeep(n),i.length>0){const s=e[t].map(e=>e.presence_ref),n=i.filter(e=>s.indexOf(e.presence_ref)<0);e[t].unshift(...n)}s(t,i,n)}),this.map(i,(t,s)=>{let r=e[t];if(!r)return;const i=s.map(e=>e.presence_ref);r=r.filter(e=>i.indexOf(e.presence_ref)<0),e[t]=r,n(t,r,s),0===r.length&&delete e[t]}),e}static map(e,t){return Object.getOwnPropertyNames(e).map(s=>t(s,e[s]))}static transformState(e){return e=this.cloneDeep(e),Object.getOwnPropertyNames(e).reduce((t,s)=>{const n=e[s];return t[s]="metas"in n?n.metas.map(e=>(e.presence_ref=e.phx_ref,delete e.phx_ref,delete e.phx_ref_prev,e)):n,t},{})}static cloneDeep(e){return JSON.parse(JSON.stringify(e))}onJoin(e){this.caller.onJoin=e}onLeave(e){this.caller.onLeave=e}onSync(e){this.caller.onSync=e}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}(Ne=De||(De={})).ALL="*",Ne.INSERT="INSERT",Ne.UPDATE="UPDATE",Ne.DELETE="DELETE",(Be=qe||(qe={})).BROADCAST="broadcast",Be.PRESENCE="presence",Be.POSTGRES_CHANGES="postgres_changes",Be.SYSTEM="system",(Fe=Me||(Me={})).SUBSCRIBED="SUBSCRIBED",Fe.TIMED_OUT="TIMED_OUT",Fe.CLOSED="CLOSED",Fe.CHANNEL_ERROR="CHANNEL_ERROR";class Je{constructor(e,t={config:{}},s){this.topic=e,this.params=t,this.socket=s,this.bindings={},this.state=de.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=e.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},t.config),this.timeout=this.socket.timeout,this.joinPush=new xe(this,pe.join,this.params,this.timeout),this.rejoinTimer=new ke(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=de.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(e=>e.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel","close ".concat(this.topic," ").concat(this._joinRef())),this.state=de.closed,this.socket._remove(this)}),this._onError(e=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel","error ".concat(this.topic),e),this.state=de.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel","timeout ".concat(this.topic),this.joinPush.timeout),this.state=de.errored,this.rejoinTimer.scheduleTimeout())}),this._on(pe.reply,{},(e,t)=>{this._trigger(this._replyEventName(t),e)}),this.presence=new ze(this),this.broadcastEndpointURL=Re(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(t,s=this.timeout){var n,r;if(this.socket.isConnected()||this.socket.connect(),this.joinedOnce)throw"tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance";{const{config:{broadcast:i,presence:o,private:a}}=this.params;this._onError(e=>null==t?void 0:t(Me.CHANNEL_ERROR,e)),this._onClose(()=>null==t?void 0:t(Me.CLOSED));const l={},c={broadcast:i,presence:o,postgres_changes:null!==(r=null===(n=this.bindings.postgres_changes)||void 0===n?void 0:n.map(e=>e.filter))&&void 0!==r?r:[],private:a};this.socket.accessTokenValue&&(l.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:c},l)),this.joinedOnce=!0,this._rejoin(s),this.joinPush.receive("ok",s=>e(this,[s],function*({postgres_changes:e}){var s;if(this.socket.setAuth(),void 0!==e){const n=this.bindings.postgres_changes,r=null!==(s=null==n?void 0:n.length)&&void 0!==s?s:0,i=[];for(let s=0;s<r;s++){const r=n[s],{filter:{event:o,schema:a,table:l,filter:c}}=r,h=e&&e[s];if(!h||h.event!==o||h.schema!==a||h.table!==l||h.filter!==c)return this.unsubscribe(),this.state=de.errored,void(null==t||t(Me.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes")));i.push(Object.assign(Object.assign({},r),{id:h.id}))}return this.bindings.postgres_changes=i,void(t&&t(Me.SUBSCRIBED))}null==t||t(Me.SUBSCRIBED)})).receive("error",e=>{this.state=de.errored,null==t||t(Me.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(e).join(", ")||"error")))}).receive("timeout",()=>{null==t||t(Me.TIMED_OUT)})}return this}presenceState(){return this.presence.state}track(t){return e(this,arguments,function*(e,t={}){return yield this.send({type:"presence",event:"track",payload:e},t.timeout||this.timeout)})}untrack(){return e(this,arguments,function*(e={}){return yield this.send({type:"presence",event:"untrack"},e)})}on(e,t,s){return this._on(e,t,s)}send(t){return e(this,arguments,function*(e,t={}){var s,n;if(this._canPush()||"broadcast"!==e.type)return new Promise(s=>{var n,r,i;const o=this._push(e.type,e,t.timeout||this.timeout);"broadcast"!==e.type||(null===(i=null===(r=null===(n=this.params)||void 0===n?void 0:n.config)||void 0===r?void 0:r.broadcast)||void 0===i?void 0:i.ack)||s("ok"),o.receive("ok",()=>s("ok")),o.receive("error",()=>s("error")),o.receive("timeout",()=>s("timed out"))});{const{event:i,payload:o}=e,a={method:"POST",headers:{Authorization:this.socket.accessTokenValue?"Bearer ".concat(this.socket.accessTokenValue):"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:i,payload:o,private:this.private}]})};try{const e=yield this._fetchWithTimeout(this.broadcastEndpointURL,a,null!==(s=t.timeout)&&void 0!==s?s:this.timeout);return yield null===(n=e.body)||void 0===n?void 0:n.cancel(),e.ok?"ok":"error"}catch(r){return"AbortError"===r.name?"timed out":"error"}}})}updateJoinPayload(e){this.joinPush.updatePayload(e)}unsubscribe(e=this.timeout){this.state=de.leaving;const t=()=>{this.socket.log("channel","leave ".concat(this.topic)),this._trigger(pe.close,"leave",this._joinRef())};return this.joinPush.destroy(),new Promise(s=>{const n=new xe(this,pe.leave,{},e);n.receive("ok",()=>{t(),s("ok")}).receive("timeout",()=>{t(),s("timed out")}).receive("error",()=>{s("error")}),n.send(),this._canPush()||n.trigger("ok",{})})}teardown(){this.pushBuffer.forEach(e=>e.destroy()),this.rejoinTimer&&clearTimeout(this.rejoinTimer.timer),this.joinPush.destroy()}_fetchWithTimeout(t,s,n){return e(this,null,function*(){const e=new AbortController,r=setTimeout(()=>e.abort(),n),i=yield this.socket.fetch(t,Object.assign(Object.assign({},s),{signal:e.signal}));return clearTimeout(r),i})}_push(e,t,s=this.timeout){if(!this.joinedOnce)throw"tried to push '".concat(e,"' to '").concat(this.topic,"' before joining. Use channel.subscribe() before pushing events");let n=new xe(this,e,t,s);return this._canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}_onMessage(e,t,s){return t}_isMember(e){return this.topic===e}_joinRef(){return this.joinPush.ref}_trigger(e,t,s){var n,r;const i=e.toLocaleLowerCase(),{close:o,error:a,leave:l,join:c}=pe;if(s&&[o,a,l,c].indexOf(i)>=0&&s!==this._joinRef())return;let h=this._onMessage(i,t,s);if(t&&!h)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(i)?null===(n=this.bindings.postgres_changes)||void 0===n||n.filter(e=>{var t,s,n;return"*"===(null===(t=e.filter)||void 0===t?void 0:t.event)||(null===(n=null===(s=e.filter)||void 0===s?void 0:s.event)||void 0===n?void 0:n.toLocaleLowerCase())===i}).map(e=>e.callback(h,s)):null===(r=this.bindings[i])||void 0===r||r.filter(e=>{var s,n,r,o,a,l;if(["broadcast","presence","postgres_changes"].includes(i)){if("id"in e){const i=e.id,o=null===(s=e.filter)||void 0===s?void 0:s.event;return i&&(null===(n=t.ids)||void 0===n?void 0:n.includes(i))&&("*"===o||(null==o?void 0:o.toLocaleLowerCase())===(null===(r=t.data)||void 0===r?void 0:r.type.toLocaleLowerCase()))}{const s=null===(a=null===(o=null==e?void 0:e.filter)||void 0===o?void 0:o.event)||void 0===a?void 0:a.toLocaleLowerCase();return"*"===s||s===(null===(l=null==t?void 0:t.event)||void 0===l?void 0:l.toLocaleLowerCase())}}return e.type.toLocaleLowerCase()===i}).map(e=>{if("object"==typeof h&&"ids"in h){const e=h.data,{schema:t,table:s,commit_timestamp:n,type:r,errors:i}=e,o={schema:t,table:s,commit_timestamp:n,eventType:r,new:{},old:{},errors:i};h=Object.assign(Object.assign({},o),this._getPayloadRecords(e))}e.callback(h,s)})}_isClosed(){return this.state===de.closed}_isJoined(){return this.state===de.joined}_isJoining(){return this.state===de.joining}_isLeaving(){return this.state===de.leaving}_replyEventName(e){return"chan_reply_".concat(e)}_on(e,t,s){const n=e.toLocaleLowerCase(),r={type:n,filter:t,callback:s};return this.bindings[n]?this.bindings[n].push(r):this.bindings[n]=[r],this}_off(e,t){const s=e.toLocaleLowerCase();return this.bindings[s]=this.bindings[s].filter(e=>{var n;return!((null===(n=e.type)||void 0===n?void 0:n.toLocaleLowerCase())===s&&Je.isEqual(e.filter,t))}),this}static isEqual(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const s in e)if(e[s]!==t[s])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(e){this._on(pe.close,{},e)}_onError(e){this._on(pe.error,{},t=>e(t))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(e=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=de.joining,this.joinPush.resend(e))}_getPayloadRecords(e){const t={new:{},old:{}};return"INSERT"!==e.type&&"UPDATE"!==e.type||(t.new=Se(e.columns,e.record)),"UPDATE"!==e.type&&"DELETE"!==e.type||(t.old=Se(e.columns,e.old_record)),t}}const Ke=()=>{};class We{constructor(t,s){var n;this.accessTokenValue=null,this.apiKey=null,this.channels=new Array,this.endPoint="",this.httpEndpoint="",this.headers=ce,this.params={},this.timeout=1e4,this.heartbeatIntervalMs=25e3,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.heartbeatCallback=Ke,this.ref=0,this.logger=Ke,this.conn=null,this.sendBuffer=[],this.serializer=new we,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=t=>{let s;return s=t||("undefined"==typeof fetch?(...t)=>r(()=>e(this,null,function*(){const{default:e}=yield Promise.resolve().then(()=>j);return{default:e}}),void 0).then(({default:e})=>e(...t)):fetch),(...e)=>s(...e)},this.endPoint="".concat(t,"/").concat(ye.websocket),this.httpEndpoint=Re(t),(null==s?void 0:s.transport)?this.transport=s.transport:this.transport=null,(null==s?void 0:s.params)&&(this.params=s.params),(null==s?void 0:s.headers)&&(this.headers=Object.assign(Object.assign({},this.headers),s.headers)),(null==s?void 0:s.timeout)&&(this.timeout=s.timeout),(null==s?void 0:s.logger)&&(this.logger=s.logger),((null==s?void 0:s.logLevel)||(null==s?void 0:s.log_level))&&(this.logLevel=s.logLevel||s.log_level,this.params=Object.assign(Object.assign({},this.params),{log_level:this.logLevel})),(null==s?void 0:s.heartbeatIntervalMs)&&(this.heartbeatIntervalMs=s.heartbeatIntervalMs);const i=null===(n=null==s?void 0:s.params)||void 0===n?void 0:n.apikey;if(i&&(this.accessTokenValue=i,this.apiKey=i),this.reconnectAfterMs=(null==s?void 0:s.reconnectAfterMs)?s.reconnectAfterMs:e=>[1e3,2e3,5e3,1e4][e-1]||1e4,this.encode=(null==s?void 0:s.encode)?s.encode:(e,t)=>t(JSON.stringify(e)),this.decode=(null==s?void 0:s.decode)?s.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new ke(()=>e(this,null,function*(){this.disconnect(),this.connect()}),this.reconnectAfterMs),this.fetch=this._resolveFetch(null==s?void 0:s.fetch),null==s?void 0:s.worker){if("undefined"!=typeof window&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(null==s?void 0:s.worker)||!1,this.workerUrl=null==s?void 0:s.workerUrl}this.accessToken=(null==s?void 0:s.accessToken)||null}connect(){if(!this.conn){if(this.transport||(this.transport=le),this.transport){const e="undefined"!=typeof window&&this.transport===window.WebSocket;return this.conn=e?new this.transport(this.endpointURL()):new this.transport(this.endpointURL(),void 0,{headers:this.headers}),void this.setupConnection()}this.conn=new He(this.endpointURL(),void 0,{close:()=>{this.conn=null}})}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:"1.0.0"}))}disconnect(e,t){this.conn&&(this.conn.onclose=function(){},e?this.conn.close(e,null!=t?t:""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset(),this.channels.forEach(e=>e.teardown()))}getChannels(){return this.channels}removeChannel(t){return e(this,null,function*(){const e=yield t.unsubscribe();return this.channels=this.channels.filter(e=>e._joinRef!==t._joinRef),0===this.channels.length&&this.disconnect(),e})}removeAllChannels(){return e(this,null,function*(){const e=yield Promise.all(this.channels.map(e=>e.unsubscribe()));return this.channels=[],this.disconnect(),e})}log(e,t,s){this.logger(e,t,s)}connectionState(){switch(this.conn&&this.conn.readyState){case he.connecting:return ve.Connecting;case he.open:return ve.Open;case he.closing:return ve.Closing;default:return ve.Closed}}isConnected(){return this.connectionState()===ve.Open}channel(e,t={config:{}}){const s="realtime:".concat(e),n=this.getChannels().find(e=>e.topic===s);if(n)return n;{const s=new Je("realtime:".concat(e),t,this);return this.channels.push(s),s}}push(e){const{topic:t,event:s,payload:n,ref:r}=e,i=()=>{this.encode(e,e=>{var t;null===(t=this.conn)||void 0===t||t.send(e)})};this.log("push","".concat(t," ").concat(s," (").concat(r,")"),n),this.isConnected()?i():this.sendBuffer.push(i)}setAuth(t=null){return e(this,null,function*(){let e=t||this.accessToken&&(yield this.accessToken())||this.accessTokenValue;this.accessTokenValue!=e&&(this.accessTokenValue=e,this.channels.forEach(t=>{e&&t.updateJoinPayload({access_token:e,version:this.headers&&this.headers["X-Client-Info"]}),t.joinedOnce&&t._isJoined()&&t._push(pe.access_token,{access_token:e})}))})}sendHeartbeat(){return e(this,null,function*(){var e;if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.heartbeatCallback("timeout"),void(null===(e=this.conn)||void 0===e||e.close(1e3,"hearbeat timeout"));this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatCallback("sent"),yield this.setAuth()}else this.heartbeatCallback("disconnected")})}onHeartbeat(e){this.heartbeatCallback=e}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}_makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}_leaveOpenTopic(e){let t=this.channels.find(t=>t.topic===e&&(t._isJoined()||t._isJoining()));t&&(this.log("transport",'leaving duplicate topic "'.concat(e,'"')),t.unsubscribe())}_remove(e){this.channels=this.channels.filter(t=>t.topic!==e.topic)}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=e=>this._onConnError(e),this.conn.onmessage=e=>this._onConnMessage(e),this.conn.onclose=e=>this._onConnClose(e))}_onConnMessage(e){this.decode(e.data,e=>{let{topic:t,event:s,payload:n,ref:r}=e;"phoenix"===t&&"phx_reply"===s&&this.heartbeatCallback("ok"==e.payload.status?"ok":"error"),r&&r===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive","".concat(n.status||""," ").concat(t," ").concat(s," ").concat(r&&"("+r+")"||""),n),Array.from(this.channels).filter(e=>e._isMember(t)).forEach(e=>e._trigger(s,n,r)),this.stateChangeCallbacks.message.forEach(t=>t(e))})}_onConnOpen(){if(this.log("transport","connected to ".concat(this.endpointURL())),this.flushSendBuffer(),this.reconnectTimer.reset(),this.worker){this.workerUrl?this.log("worker","starting worker for from ".concat(this.workerUrl)):this.log("worker","starting default worker");const e=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(e),this.workerRef.onerror=e=>{this.log("worker","worker error",e.message),this.workerRef.terminate()},this.workerRef.onmessage=e=>{"keepAlive"===e.data.event&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}else this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs);this.stateChangeCallbacks.open.forEach(e=>e())}_onConnClose(e){this.log("transport","close",e),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(t=>t(e))}_onConnError(e){this.log("transport",e.message),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(t=>t(e))}_triggerChanError(){this.channels.forEach(e=>e._trigger(pe.error))}_appendParams(e,t){if(0===Object.keys(t).length)return e;const s=e.match(/\?/)?"&":"?",n=new URLSearchParams(t);return"".concat(e).concat(s).concat(n)}_workerObjectUrl(e){let t;if(e)t=e;else{const e=new Blob(['\n  addEventListener("message", (e) => {\n    if (e.data.event === "start") {\n      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);\n    }\n  });'],{type:"application/javascript"});t=URL.createObjectURL(e)}return t}}class He{constructor(e,t,s){this.binaryType="arraybuffer",this.onclose=()=>{},this.onerror=()=>{},this.onmessage=()=>{},this.onopen=()=>{},this.readyState=he.connecting,this.send=()=>{},this.url=null,this.url=e,this.close=s.close}}class Ge extends Error{constructor(e){super(e),this.__isStorageError=!0,this.name="StorageError"}}function Ve(e){return"object"==typeof e&&null!==e&&"__isStorageError"in e}class Ye extends Ge{constructor(e,t){super(e),this.name="StorageApiError",this.status=t}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class $e extends Ge{constructor(e,t){super(e),this.name="StorageUnknownError",this.originalError=t}}var Qe=function(e,t,s,n){return new(s||(s=Promise))(function(r,i){function o(e){try{l(n.next(e))}catch(t){i(t)}}function a(e){try{l(n.throw(e))}catch(t){i(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof s?t:new s(function(e){e(t)})).then(o,a)}l((n=n.apply(e,t||[])).next())})};const Xe=t=>{let s;return s=t||("undefined"==typeof fetch?(...t)=>r(()=>e(void 0,null,function*(){const{default:e}=yield Promise.resolve().then(()=>j);return{default:e}}),void 0).then(({default:e})=>e(...t)):fetch),(...e)=>s(...e)},Ze=e=>{if(Array.isArray(e))return e.map(e=>Ze(e));if("function"==typeof e||e!==Object(e))return e;const t={};return Object.entries(e).forEach(([e,s])=>{const n=e.replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace(/[-_]/g,""));t[n]=Ze(s)}),t};var et=function(e,t,s,n){return new(s||(s=Promise))(function(r,i){function o(e){try{l(n.next(e))}catch(t){i(t)}}function a(e){try{l(n.throw(e))}catch(t){i(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof s?t:new s(function(e){e(t)})).then(o,a)}l((n=n.apply(e,t||[])).next())})};const tt=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),st=(e,t,s)=>et(void 0,void 0,void 0,function*(){const n=yield Qe(void 0,void 0,void 0,function*(){return"undefined"==typeof Response?(yield r(()=>Promise.resolve().then(()=>j),void 0)).Response:Response});e instanceof n&&!(null==s?void 0:s.noResolveJson)?e.json().then(s=>{t(new Ye(tt(s),e.status||500))}).catch(e=>{t(new $e(tt(e),e))}):t(new $e(tt(e),e))});function nt(e,t,s,n,r,i){return et(this,void 0,void 0,function*(){return new Promise((o,a)=>{e(s,((e,t,s,n)=>{const r={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?r:(r.headers=Object.assign({"Content-Type":"application/json"},null==t?void 0:t.headers),n&&(r.body=JSON.stringify(n)),Object.assign(Object.assign({},r),s))})(t,n,r,i)).then(e=>{if(!e.ok)throw e;return(null==n?void 0:n.noResolveJson)?e:e.json()}).then(e=>o(e)).catch(e=>st(e,a,n))})})}function rt(e,t,s,n){return et(this,void 0,void 0,function*(){return nt(e,"GET",t,s,n)})}function it(e,t,s,n,r){return et(this,void 0,void 0,function*(){return nt(e,"POST",t,n,r,s)})}function ot(e,t,s,n,r){return et(this,void 0,void 0,function*(){return nt(e,"DELETE",t,n,r,s)})}var at=function(e,t,s,n){return new(s||(s=Promise))(function(r,i){function o(e){try{l(n.next(e))}catch(t){i(t)}}function a(e){try{l(n.throw(e))}catch(t){i(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof s?t:new s(function(e){e(t)})).then(o,a)}l((n=n.apply(e,t||[])).next())})};const lt={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},ct={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class ht{constructor(e,t={},s,n){this.url=e,this.headers=t,this.bucketId=s,this.fetch=Xe(n)}uploadOrUpdate(e,t,s,n){return at(this,void 0,void 0,function*(){try{let r;const i=Object.assign(Object.assign({},ct),n);let o=Object.assign(Object.assign({},this.headers),"POST"===e&&{"x-upsert":String(i.upsert)});const a=i.metadata;"undefined"!=typeof Blob&&s instanceof Blob?(r=new FormData,r.append("cacheControl",i.cacheControl),a&&r.append("metadata",this.encodeMetadata(a)),r.append("",s)):"undefined"!=typeof FormData&&s instanceof FormData?(r=s,r.append("cacheControl",i.cacheControl),a&&r.append("metadata",this.encodeMetadata(a))):(r=s,o["cache-control"]="max-age=".concat(i.cacheControl),o["content-type"]=i.contentType,a&&(o["x-metadata"]=this.toBase64(this.encodeMetadata(a)))),(null==n?void 0:n.headers)&&(o=Object.assign(Object.assign({},o),n.headers));const l=this._removeEmptyFolders(t),c=this._getFinalPath(l),h=yield this.fetch("".concat(this.url,"/object/").concat(c),Object.assign({method:e,body:r,headers:o},(null==i?void 0:i.duplex)?{duplex:i.duplex}:{})),u=yield h.json();if(h.ok)return{data:{path:l,id:u.Id,fullPath:u.Key},error:null};return{data:null,error:u}}catch(r){if(Ve(r))return{data:null,error:r};throw r}})}upload(e,t,s){return at(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",e,t,s)})}uploadToSignedUrl(e,t,s,n){return at(this,void 0,void 0,function*(){const r=this._removeEmptyFolders(e),i=this._getFinalPath(r),o=new URL(this.url+"/object/upload/sign/".concat(i));o.searchParams.set("token",t);try{let e;const t=Object.assign({upsert:ct.upsert},n),i=Object.assign(Object.assign({},this.headers),{"x-upsert":String(t.upsert)});"undefined"!=typeof Blob&&s instanceof Blob?(e=new FormData,e.append("cacheControl",t.cacheControl),e.append("",s)):"undefined"!=typeof FormData&&s instanceof FormData?(e=s,e.append("cacheControl",t.cacheControl)):(e=s,i["cache-control"]="max-age=".concat(t.cacheControl),i["content-type"]=t.contentType);const a=yield this.fetch(o.toString(),{method:"PUT",body:e,headers:i}),l=yield a.json();if(a.ok)return{data:{path:r,fullPath:l.Key},error:null};return{data:null,error:l}}catch(a){if(Ve(a))return{data:null,error:a};throw a}})}createSignedUploadUrl(e,t){return at(this,void 0,void 0,function*(){try{let s=this._getFinalPath(e);const n=Object.assign({},this.headers);(null==t?void 0:t.upsert)&&(n["x-upsert"]="true");const r=yield it(this.fetch,"".concat(this.url,"/object/upload/sign/").concat(s),{},{headers:n}),i=new URL(this.url+r.url),o=i.searchParams.get("token");if(!o)throw new Ge("No token returned by API");return{data:{signedUrl:i.toString(),path:e,token:o},error:null}}catch(s){if(Ve(s))return{data:null,error:s};throw s}})}update(e,t,s){return at(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",e,t,s)})}move(e,t,s){return at(this,void 0,void 0,function*(){try{return{data:yield it(this.fetch,"".concat(this.url,"/object/move"),{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==s?void 0:s.destinationBucket},{headers:this.headers}),error:null}}catch(n){if(Ve(n))return{data:null,error:n};throw n}})}copy(e,t,s){return at(this,void 0,void 0,function*(){try{return{data:{path:(yield it(this.fetch,"".concat(this.url,"/object/copy"),{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==s?void 0:s.destinationBucket},{headers:this.headers})).Key},error:null}}catch(n){if(Ve(n))return{data:null,error:n};throw n}})}createSignedUrl(e,t,s){return at(this,void 0,void 0,function*(){try{let n=this._getFinalPath(e),r=yield it(this.fetch,"".concat(this.url,"/object/sign/").concat(n),Object.assign({expiresIn:t},(null==s?void 0:s.transform)?{transform:s.transform}:{}),{headers:this.headers});const i=(null==s?void 0:s.download)?"&download=".concat(!0===s.download?"":s.download):"";return r={signedUrl:encodeURI("".concat(this.url).concat(r.signedURL).concat(i))},{data:r,error:null}}catch(n){if(Ve(n))return{data:null,error:n};throw n}})}createSignedUrls(e,t,s){return at(this,void 0,void 0,function*(){try{const n=yield it(this.fetch,"".concat(this.url,"/object/sign/").concat(this.bucketId),{expiresIn:t,paths:e},{headers:this.headers}),r=(null==s?void 0:s.download)?"&download=".concat(!0===s.download?"":s.download):"";return{data:n.map(e=>Object.assign(Object.assign({},e),{signedUrl:e.signedURL?encodeURI("".concat(this.url).concat(e.signedURL).concat(r)):null})),error:null}}catch(n){if(Ve(n))return{data:null,error:n};throw n}})}download(e,t){return at(this,void 0,void 0,function*(){const s=void 0!==(null==t?void 0:t.transform)?"render/image/authenticated":"object",n=this.transformOptsToQueryString((null==t?void 0:t.transform)||{}),r=n?"?".concat(n):"";try{const t=this._getFinalPath(e),n=yield rt(this.fetch,"".concat(this.url,"/").concat(s,"/").concat(t).concat(r),{headers:this.headers,noResolveJson:!0});return{data:yield n.blob(),error:null}}catch(i){if(Ve(i))return{data:null,error:i};throw i}})}info(e){return at(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{const e=yield rt(this.fetch,"".concat(this.url,"/object/info/").concat(t),{headers:this.headers});return{data:Ze(e),error:null}}catch(s){if(Ve(s))return{data:null,error:s};throw s}})}exists(e){return at(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{return yield function(e,t,s,n){return et(this,void 0,void 0,function*(){return nt(e,"HEAD",t,Object.assign(Object.assign({},s),{noResolveJson:!0}),n)})}(this.fetch,"".concat(this.url,"/object/").concat(t),{headers:this.headers}),{data:!0,error:null}}catch(s){if(Ve(s)&&s instanceof $e){const e=s.originalError;if([400,404].includes(null==e?void 0:e.status))return{data:!1,error:s}}throw s}})}getPublicUrl(e,t){const s=this._getFinalPath(e),n=[],r=(null==t?void 0:t.download)?"download=".concat(!0===t.download?"":t.download):"";""!==r&&n.push(r);const i=void 0!==(null==t?void 0:t.transform)?"render/image":"object",o=this.transformOptsToQueryString((null==t?void 0:t.transform)||{});""!==o&&n.push(o);let a=n.join("&");return""!==a&&(a="?".concat(a)),{data:{publicUrl:encodeURI("".concat(this.url,"/").concat(i,"/public/").concat(s).concat(a))}}}remove(e){return at(this,void 0,void 0,function*(){try{return{data:yield ot(this.fetch,"".concat(this.url,"/object/").concat(this.bucketId),{prefixes:e},{headers:this.headers}),error:null}}catch(t){if(Ve(t))return{data:null,error:t};throw t}})}list(e,t,s){return at(this,void 0,void 0,function*(){try{const n=Object.assign(Object.assign(Object.assign({},lt),t),{prefix:e||""});return{data:yield it(this.fetch,"".concat(this.url,"/object/list/").concat(this.bucketId),n,{headers:this.headers},s),error:null}}catch(n){if(Ve(n))return{data:null,error:n};throw n}})}encodeMetadata(e){return JSON.stringify(e)}toBase64(e){return"undefined"!=typeof Buffer?Buffer.from(e).toString("base64"):btoa(e)}_getFinalPath(e){return"".concat(this.bucketId,"/").concat(e)}_removeEmptyFolders(e){return e.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(e){const t=[];return e.width&&t.push("width=".concat(e.width)),e.height&&t.push("height=".concat(e.height)),e.resize&&t.push("resize=".concat(e.resize)),e.format&&t.push("format=".concat(e.format)),e.quality&&t.push("quality=".concat(e.quality)),t.join("&")}}const ut={"X-Client-Info":"storage-js/".concat("2.7.1")};var dt=function(e,t,s,n){return new(s||(s=Promise))(function(t,r){function i(e){try{a(n.next(e))}catch(t){r(t)}}function o(e){try{a(n.throw(e))}catch(t){r(t)}}function a(e){var n;e.done?t(e.value):(n=e.value,n instanceof s?n:new s(function(e){e(n)})).then(i,o)}a((n=n.apply(e,[])).next())})};class ft{constructor(e,t={},s){this.url=e,this.headers=Object.assign(Object.assign({},ut),t),this.fetch=Xe(s)}listBuckets(){return dt(this,0,void 0,function*(){try{return{data:yield rt(this.fetch,"".concat(this.url,"/bucket"),{headers:this.headers}),error:null}}catch(e){if(Ve(e))return{data:null,error:e};throw e}})}getBucket(e){return dt(this,0,void 0,function*(){try{return{data:yield rt(this.fetch,"".concat(this.url,"/bucket/").concat(e),{headers:this.headers}),error:null}}catch(t){if(Ve(t))return{data:null,error:t};throw t}})}createBucket(e,t={public:!1}){return dt(this,0,void 0,function*(){try{return{data:yield it(this.fetch,"".concat(this.url,"/bucket"),{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers}),error:null}}catch(s){if(Ve(s))return{data:null,error:s};throw s}})}updateBucket(e,t){return dt(this,0,void 0,function*(){try{const s=yield function(e,t,s,n,r){return et(this,void 0,void 0,function*(){return nt(e,"PUT",t,n,r,s)})}(this.fetch,"".concat(this.url,"/bucket/").concat(e),{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers});return{data:s,error:null}}catch(s){if(Ve(s))return{data:null,error:s};throw s}})}emptyBucket(e){return dt(this,0,void 0,function*(){try{return{data:yield it(this.fetch,"".concat(this.url,"/bucket/").concat(e,"/empty"),{},{headers:this.headers}),error:null}}catch(t){if(Ve(t))return{data:null,error:t};throw t}})}deleteBucket(e){return dt(this,0,void 0,function*(){try{return{data:yield ot(this.fetch,"".concat(this.url,"/bucket/").concat(e),{},{headers:this.headers}),error:null}}catch(t){if(Ve(t))return{data:null,error:t};throw t}})}}class pt extends ft{constructor(e,t={},s){super(e,t,s)}from(e){return new ht(this.url,this.headers,e,this.fetch)}}let gt="";gt="undefined"!=typeof Deno?"deno":"undefined"!=typeof document?"web":"undefined"!=typeof navigator&&"ReactNative"===navigator.product?"react-native":"node";const yt={headers:{"X-Client-Info":"supabase-js-".concat(gt,"/").concat("2.50.0")}},vt={schema:"public"},mt={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},_t={};var bt=function(e,t,s,n){return new(s||(s=Promise))(function(r,i){function o(e){try{l(n.next(e))}catch(t){i(t)}}function a(e){try{l(n.throw(e))}catch(t){i(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof s?t:new s(function(e){e(t)})).then(o,a)}l((n=n.apply(e,t||[])).next())})};const wt=(e,t,s)=>{const n=(e=>{let t;return t=e||("undefined"==typeof fetch?w:fetch),(...e)=>t(...e)})(s),r="undefined"==typeof Headers?k:Headers;return(s,i)=>bt(void 0,void 0,void 0,function*(){var o;const a=null!==(o=yield t())&&void 0!==o?o:e;let l=new r(null==i?void 0:i.headers);return l.has("apikey")||l.set("apikey",e),l.has("Authorization")||l.set("Authorization","Bearer ".concat(a)),n(s,Object.assign(Object.assign({},i),{headers:l}))})};var kt=function(e,t,s,n){return new(s||(s=Promise))(function(t,r){function i(e){try{a(n.next(e))}catch(t){r(t)}}function o(e){try{a(n.throw(e))}catch(t){r(t)}}function a(e){var n;e.done?t(e.value):(n=e.value,n instanceof s?n:new s(function(e){e(n)})).then(i,o)}a((n=n.apply(e,[])).next())})};const St="2.70.0",Tt=3e4,jt=9e4,Et={"X-Client-Info":"gotrue-js/".concat(St)},Pt="X-Supabase-Api-Version",Ot={timestamp:Date.parse("2024-01-01T00:00:00.0Z"),name:"2024-01-01"},At=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;class Ct extends Error{constructor(e,t,s){super(e),this.__isAuthError=!0,this.name="AuthError",this.status=t,this.code=s}}function It(e){return"object"==typeof e&&null!==e&&"__isAuthError"in e}class Rt extends Ct{constructor(e,t,s){super(e,t,s),this.name="AuthApiError",this.status=t,this.code=s}}class xt extends Ct{constructor(e,t){super(e),this.name="AuthUnknownError",this.originalError=t}}class Lt extends Ct{constructor(e,t,s,n){super(e,s,n),this.name=t,this.status=s}}class Ut extends Lt{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}class Dt extends Lt{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class Nt extends Lt{constructor(e){super(e,"AuthInvalidCredentialsError",400,void 0)}}class qt extends Lt{constructor(e,t=null){super(e,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Bt extends Lt{constructor(e,t=null){super(e,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Mt extends Lt{constructor(e,t){super(e,"AuthRetryableFetchError",t,void 0)}}function Ft(e){return It(e)&&"AuthRetryableFetchError"===e.name}class zt extends Lt{constructor(e,t,s){super(e,"AuthWeakPasswordError",t,"weak_password"),this.reasons=s}}class Jt extends Lt{constructor(e){super(e,"AuthInvalidJwtError",400,"invalid_jwt")}}const Kt="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),Wt=" \t\n\r=".split(""),Ht=(()=>{const e=new Array(128);for(let t=0;t<e.length;t+=1)e[t]=-1;for(let t=0;t<Wt.length;t+=1)e[Wt[t].charCodeAt(0)]=-2;for(let t=0;t<Kt.length;t+=1)e[Kt[t].charCodeAt(0)]=t;return e})();function Gt(e,t,s){if(null!==e)for(t.queue=t.queue<<8|e,t.queuedBits+=8;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;s(Kt[e]),t.queuedBits-=6}else if(t.queuedBits>0)for(t.queue=t.queue<<6-t.queuedBits,t.queuedBits=6;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;s(Kt[e]),t.queuedBits-=6}}function Vt(e,t,s){const n=Ht[e];if(!(n>-1)){if(-2===n)return;throw new Error('Invalid Base64-URL character "'.concat(String.fromCharCode(e),'"'))}for(t.queue=t.queue<<6|n,t.queuedBits+=6;t.queuedBits>=8;)s(t.queue>>t.queuedBits-8&255),t.queuedBits-=8}function Yt(e){const t=[],s=e=>{t.push(String.fromCodePoint(e))},n={utf8seq:0,codepoint:0},r={queue:0,queuedBits:0},i=e=>{!function(e,t,s){if(0===t.utf8seq){if(e<=127)return void s(e);for(let s=1;s<6;s+=1)if(!(e>>7-s&1)){t.utf8seq=s;break}if(2===t.utf8seq)t.codepoint=31&e;else if(3===t.utf8seq)t.codepoint=15&e;else{if(4!==t.utf8seq)throw new Error("Invalid UTF-8 sequence");t.codepoint=7&e}t.utf8seq-=1}else if(t.utf8seq>0){if(e<=127)throw new Error("Invalid UTF-8 sequence");t.codepoint=t.codepoint<<6|63&e,t.utf8seq-=1,0===t.utf8seq&&s(t.codepoint)}}(e,n,s)};for(let o=0;o<e.length;o+=1)Vt(e.charCodeAt(o),r,i);return t.join("")}function $t(e,t){if(!(e<=127)){if(e<=2047)return t(192|e>>6),void t(128|63&e);if(e<=65535)return t(224|e>>12),t(128|e>>6&63),void t(128|63&e);if(e<=1114111)return t(240|e>>18),t(128|e>>12&63),t(128|e>>6&63),void t(128|63&e);throw new Error("Unrecognized Unicode codepoint: ".concat(e.toString(16)))}t(e)}function Qt(e){const t=[],s={queue:0,queuedBits:0},n=e=>{t.push(e)};for(let r=0;r<e.length;r+=1)Vt(e.charCodeAt(r),s,n);return new Uint8Array(t)}function Xt(e){const t=[];return function(e,t){for(let s=0;s<e.length;s+=1){let n=e.charCodeAt(s);if(n>55295&&n<=56319){const t=1024*(n-55296)&65535;n=65536+(e.charCodeAt(s+1)-56320&65535|t),s+=1}$t(n,t)}}(e,e=>t.push(e)),new Uint8Array(t)}function Zt(e){const t=[],s={queue:0,queuedBits:0},n=e=>{t.push(e)};return e.forEach(e=>Gt(e,s,n)),Gt(null,s,n),t.join("")}const es=()=>"undefined"!=typeof window&&"undefined"!=typeof document,ts={tested:!1,writable:!1},ss=()=>{if(!es())return!1;try{if("object"!=typeof globalThis.localStorage)return!1}catch(t){return!1}if(ts.tested)return ts.writable;const e="lswt-".concat(Math.random()).concat(Math.random());try{globalThis.localStorage.setItem(e,e),globalThis.localStorage.removeItem(e),ts.tested=!0,ts.writable=!0}catch(t){ts.tested=!0,ts.writable=!1}return ts.writable};const ns=t=>{let s;return s=t||("undefined"==typeof fetch?(...t)=>r(()=>e(void 0,null,function*(){const{default:e}=yield Promise.resolve().then(()=>j);return{default:e}}),void 0).then(({default:e})=>e(...t)):fetch),(...e)=>s(...e)},rs=(t,s,n)=>e(void 0,null,function*(){yield t.setItem(s,JSON.stringify(n))}),is=(t,s)=>e(void 0,null,function*(){const e=yield t.getItem(s);if(!e)return null;try{return JSON.parse(e)}catch(n){return e}}),os=(t,s)=>e(void 0,null,function*(){yield t.removeItem(s)});class as{constructor(){this.promise=new as.promiseConstructor((e,t)=>{this.resolve=e,this.reject=t})}}function ls(e){const t=e.split(".");if(3!==t.length)throw new Jt("Invalid JWT structure");for(let s=0;s<t.length;s++)if(!At.test(t[s]))throw new Jt("JWT not in base64url format");return{header:JSON.parse(Yt(t[0])),payload:JSON.parse(Yt(t[1])),signature:Qt(t[2]),raw:{header:t[0],payload:t[1]}}}function cs(e){return("0"+e.toString(16)).substr(-2)}function hs(t){return e(this,null,function*(){if(!("undefined"!=typeof crypto&&void 0!==crypto.subtle&&"undefined"!=typeof TextEncoder))return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),t;const s=yield function(t){return e(this,null,function*(){const e=(new TextEncoder).encode(t),s=yield crypto.subtle.digest("SHA-256",e),n=new Uint8Array(s);return Array.from(n).map(e=>String.fromCharCode(e)).join("")})}(t);return btoa(s).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")})}function us(t,s,n=!1){return e(this,null,function*(){const e=function(){const e=new Uint32Array(56);if("undefined"==typeof crypto){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",t=e.length;let s="";for(let n=0;n<56;n++)s+=e.charAt(Math.floor(Math.random()*t));return s}return crypto.getRandomValues(e),Array.from(e,cs).join("")}();let r=e;n&&(r+="/PASSWORD_RECOVERY"),yield rs(t,"".concat(s,"-code-verifier"),r);const i=yield hs(e);return[i,e===i?"plain":"s256"]})}as.promiseConstructor=Promise;const ds=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;const fs=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;function ps(e){if(!fs.test(e))throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not")}const gs=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),ys=[502,503,504];function vs(t){return e(this,null,function*(){var e,s;if(!("object"==typeof(s=t)&&null!==s&&"status"in s&&"ok"in s&&"json"in s&&"function"==typeof s.json))throw new Mt(gs(t),0);if(ys.includes(t.status))throw new Mt(gs(t),t.status);let n,r;try{n=yield t.json()}catch(o){throw new xt(gs(o),o)}const i=function(e){const t=e.headers.get(Pt);if(!t)return null;if(!t.match(ds))return null;try{return new Date("".concat(t,"T00:00:00.0Z"))}catch(o){return null}}(t);if(i&&i.getTime()>=Ot.timestamp&&"object"==typeof n&&n&&"string"==typeof n.code?r=n.code:"object"==typeof n&&n&&"string"==typeof n.error_code&&(r=n.error_code),r){if("weak_password"===r)throw new zt(gs(n),t.status,(null===(e=n.weak_password)||void 0===e?void 0:e.reasons)||[]);if("session_not_found"===r)throw new Ut}else if("object"==typeof n&&n&&"object"==typeof n.weak_password&&n.weak_password&&Array.isArray(n.weak_password.reasons)&&n.weak_password.reasons.length&&n.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0))throw new zt(gs(n),t.status,n.weak_password.reasons);throw new Rt(gs(n),t.status||500,r)})}function ms(t,s,n,r){return e(this,null,function*(){var i;const o=Object.assign({},null==r?void 0:r.headers);o[Pt]||(o[Pt]=Ot.name),(null==r?void 0:r.jwt)&&(o.Authorization="Bearer ".concat(r.jwt));const a=null!==(i=null==r?void 0:r.query)&&void 0!==i?i:{};(null==r?void 0:r.redirectTo)&&(a.redirect_to=r.redirectTo);const l=Object.keys(a).length?"?"+new URLSearchParams(a).toString():"",c=yield function(t,s,n,r,i,o){return e(this,null,function*(){const e=((e,t,s,n)=>{const r={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?r:(r.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},null==t?void 0:t.headers),r.body=JSON.stringify(n),Object.assign(Object.assign({},r),s))})(s,r,i,o);let a;try{a=yield t(n,Object.assign({},e))}catch(l){throw console.error(l),new Mt(gs(l),0)}if(a.ok||(yield vs(a)),null==r?void 0:r.noResolveJson)return a;try{return yield a.json()}catch(l){yield vs(l)}})}(t,s,n+l,{headers:o,noResolveJson:null==r?void 0:r.noResolveJson},{},null==r?void 0:r.body);return(null==r?void 0:r.xform)?null==r?void 0:r.xform(c):{data:Object.assign({},c),error:null}})}function _s(e){var t;let s=null;var n;(function(e){return e.access_token&&e.refresh_token&&e.expires_in})(e)&&(s=Object.assign({},e),e.expires_at||(s.expires_at=(n=e.expires_in,Math.round(Date.now()/1e3)+n)));return{data:{session:s,user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function bs(e){const t=_s(e);return!t.error&&e.weak_password&&"object"==typeof e.weak_password&&Array.isArray(e.weak_password.reasons)&&e.weak_password.reasons.length&&e.weak_password.message&&"string"==typeof e.weak_password.message&&e.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0)&&(t.data.weak_password=e.weak_password),t}function ws(e){var t;return{data:{user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function ks(e){return{data:e,error:null}}function Ss(e){const{action_link:t,email_otp:s,hashed_token:n,redirect_to:r,verification_type:i}=e,o=function(e,t){var s={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(s[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(s[n[r]]=e[n[r]])}return s}(e,["action_link","email_otp","hashed_token","redirect_to","verification_type"]);return{data:{properties:{action_link:t,email_otp:s,hashed_token:n,redirect_to:r,verification_type:i},user:Object.assign({},o)},error:null}}function Ts(e){return e}const js=["global","local","others"];class Es{constructor({url:e="",headers:t={},fetch:s}){this.url=e,this.headers=t,this.fetch=ns(s),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}signOut(t){return e(this,arguments,function*(e,t=js[0]){if(js.indexOf(t)<0)throw new Error("@supabase/auth-js: Parameter scope must be one of ".concat(js.join(", ")));try{return yield ms(this.fetch,"POST","".concat(this.url,"/logout?scope=").concat(t),{headers:this.headers,jwt:e,noResolveJson:!0}),{data:null,error:null}}catch(s){if(It(s))return{data:null,error:s};throw s}})}inviteUserByEmail(t){return e(this,arguments,function*(e,t={}){try{return yield ms(this.fetch,"POST","".concat(this.url,"/invite"),{body:{email:e,data:t.data},headers:this.headers,redirectTo:t.redirectTo,xform:ws})}catch(s){if(It(s))return{data:{user:null},error:s};throw s}})}generateLink(t){return e(this,null,function*(){try{const{options:e}=t,s=function(e,t){var s={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(s[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(s[n[r]]=e[n[r]])}return s}(t,["options"]),n=Object.assign(Object.assign({},s),e);return"newEmail"in s&&(n.new_email=null==s?void 0:s.newEmail,delete n.newEmail),yield ms(this.fetch,"POST","".concat(this.url,"/admin/generate_link"),{body:n,headers:this.headers,xform:Ss,redirectTo:null==e?void 0:e.redirectTo})}catch(e){if(It(e))return{data:{properties:null,user:null},error:e};throw e}})}createUser(t){return e(this,null,function*(){try{return yield ms(this.fetch,"POST","".concat(this.url,"/admin/users"),{body:t,headers:this.headers,xform:ws})}catch(e){if(It(e))return{data:{user:null},error:e};throw e}})}listUsers(t){return e(this,null,function*(){var e,s,n,r,i,o,a;try{const l={nextPage:null,lastPage:0,total:0},c=yield ms(this.fetch,"GET","".concat(this.url,"/admin/users"),{headers:this.headers,noResolveJson:!0,query:{page:null!==(s=null===(e=null==t?void 0:t.page)||void 0===e?void 0:e.toString())&&void 0!==s?s:"",per_page:null!==(r=null===(n=null==t?void 0:t.perPage)||void 0===n?void 0:n.toString())&&void 0!==r?r:""},xform:Ts});if(c.error)throw c.error;const h=yield c.json(),u=null!==(i=c.headers.get("x-total-count"))&&void 0!==i?i:0,d=null!==(a=null===(o=c.headers.get("link"))||void 0===o?void 0:o.split(","))&&void 0!==a?a:[];return d.length>0&&(d.forEach(e=>{const t=parseInt(e.split(";")[0].split("=")[1].substring(0,1)),s=JSON.parse(e.split(";")[1].split("=")[1]);l["".concat(s,"Page")]=t}),l.total=parseInt(u)),{data:Object.assign(Object.assign({},h),l),error:null}}catch(l){if(It(l))return{data:{users:[]},error:l};throw l}})}getUserById(t){return e(this,null,function*(){ps(t);try{return yield ms(this.fetch,"GET","".concat(this.url,"/admin/users/").concat(t),{headers:this.headers,xform:ws})}catch(e){if(It(e))return{data:{user:null},error:e};throw e}})}updateUserById(t,s){return e(this,null,function*(){ps(t);try{return yield ms(this.fetch,"PUT","".concat(this.url,"/admin/users/").concat(t),{body:s,headers:this.headers,xform:ws})}catch(e){if(It(e))return{data:{user:null},error:e};throw e}})}deleteUser(t,s=!1){return e(this,null,function*(){ps(t);try{return yield ms(this.fetch,"DELETE","".concat(this.url,"/admin/users/").concat(t),{headers:this.headers,body:{should_soft_delete:s},xform:ws})}catch(e){if(It(e))return{data:{user:null},error:e};throw e}})}_listFactors(t){return e(this,null,function*(){ps(t.userId);try{const{data:e,error:s}=yield ms(this.fetch,"GET","".concat(this.url,"/admin/users/").concat(t.userId,"/factors"),{headers:this.headers,xform:e=>({data:{factors:e},error:null})});return{data:e,error:s}}catch(e){if(It(e))return{data:null,error:e};throw e}})}_deleteFactor(t){return e(this,null,function*(){ps(t.userId),ps(t.id);try{return{data:yield ms(this.fetch,"DELETE","".concat(this.url,"/admin/users/").concat(t.userId,"/factors/").concat(t.id),{headers:this.headers}),error:null}}catch(e){if(It(e))return{data:null,error:e};throw e}})}}const Ps={getItem:e=>ss()?globalThis.localStorage.getItem(e):null,setItem:(e,t)=>{ss()&&globalThis.localStorage.setItem(e,t)},removeItem:e=>{ss()&&globalThis.localStorage.removeItem(e)}};function Os(e={}){return{getItem:t=>e[t]||null,setItem:(t,s)=>{e[t]=s},removeItem:t=>{delete e[t]}}}const As=!!(globalThis&&ss()&&globalThis.localStorage&&"true"===globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug"));class Cs extends Error{constructor(e){super(e),this.isAcquireTimeout=!0}}class Is extends Cs{}function Rs(t,s,n){return e(this,null,function*(){As&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",t,s);const r=new globalThis.AbortController;return s>0&&setTimeout(()=>{r.abort(),As&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",t)},s),yield Promise.resolve().then(()=>globalThis.navigator.locks.request(t,0===s?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:r.signal},r=>e(this,null,function*(){if(!r){if(0===s)throw As&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",t),new Is('Acquiring an exclusive Navigator LockManager lock "'.concat(t,'" immediately failed'));if(As)try{const e=yield globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(e,null,"  "))}catch(e){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",e)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),yield n()}As&&console.log("@supabase/gotrue-js: navigatorLock: acquired",t,r.name);try{return yield n()}finally{As&&console.log("@supabase/gotrue-js: navigatorLock: released",t,r.name)}})))})}!function(){if("object"!=typeof globalThis)try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch(e){"undefined"!=typeof self&&(self.globalThis=self)}}();const xs={url:"http://localhost:9999",storageKey:"supabase.auth.token",autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:Et,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};function Ls(t,s,n){return e(this,null,function*(){return yield n()})}class Us{constructor(t){var s,n;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=Us.nextInstanceID,Us.nextInstanceID+=1,this.instanceID>0&&es()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const r=Object.assign(Object.assign({},xs),t);if(this.logDebugMessages=!!r.debug,"function"==typeof r.debug&&(this.logger=r.debug),this.persistSession=r.persistSession,this.storageKey=r.storageKey,this.autoRefreshToken=r.autoRefreshToken,this.admin=new Es({url:r.url,headers:r.headers,fetch:r.fetch}),this.url=r.url,this.headers=r.headers,this.fetch=ns(r.fetch),this.lock=r.lock||Ls,this.detectSessionInUrl=r.detectSessionInUrl,this.flowType=r.flowType,this.hasCustomAuthorizationHeader=r.hasCustomAuthorizationHeader,r.lock?this.lock=r.lock:es()&&(null===(s=null===globalThis||void 0===globalThis?void 0:globalThis.navigator)||void 0===s?void 0:s.locks)?this.lock=Rs:this.lock=Ls,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?r.storage?this.storage=r.storage:ss()?this.storage=Ps:(this.memoryStorage={},this.storage=Os(this.memoryStorage)):(this.memoryStorage={},this.storage=Os(this.memoryStorage)),es()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(i){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",i)}null===(n=this.broadcastChannel)||void 0===n||n.addEventListener("message",t=>e(this,null,function*(){this._debug("received broadcast notification from other tab or client",t),yield this._notifyAllSubscribers(t.data.event,t.data.session,!1)}))}this.initialize()}_debug(...e){return this.logDebugMessages&&this.logger("GoTrueClient@".concat(this.instanceID," (").concat(St,") ").concat((new Date).toISOString()),...e),this}initialize(){return e(this,null,function*(){return this.initializePromise||(this.initializePromise=(()=>e(this,null,function*(){return yield this._acquireLock(-1,()=>e(this,null,function*(){return yield this._initialize()}))}))()),yield this.initializePromise})}_initialize(){return e(this,null,function*(){var t;try{const s=function(e){const t={},s=new URL(e);if(s.hash&&"#"===s.hash[0])try{new URLSearchParams(s.hash.substring(1)).forEach((e,s)=>{t[s]=e})}catch(n){}return s.searchParams.forEach((e,s)=>{t[s]=e}),t}(window.location.href);let n="none";if(this._isImplicitGrantCallback(s)?n="implicit":(yield this._isPKCECallback(s))&&(n="pkce"),es()&&this.detectSessionInUrl&&"none"!==n){const{data:r,error:i}=yield this._getSessionFromURL(s,n);if(i){if(this._debug("#_initialize()","error detecting session from URL",i),function(e){return It(e)&&"AuthImplicitGrantRedirectError"===e.name}(i)){const e=null===(t=i.details)||void 0===t?void 0:t.code;if("identity_already_exists"===e||"identity_not_found"===e||"single_identity_not_deletable"===e)return{error:i}}return yield this._removeSession(),{error:i}}const{session:o,redirectType:a}=r;return this._debug("#_initialize()","detected session in URL",o,"redirect type",a),yield this._saveSession(o),setTimeout(()=>e(this,null,function*(){"recovery"===a?yield this._notifyAllSubscribers("PASSWORD_RECOVERY",o):yield this._notifyAllSubscribers("SIGNED_IN",o)}),0),{error:null}}return yield this._recoverAndRefresh(),{error:null}}catch(s){return It(s)?{error:s}:{error:new xt("Unexpected error during initialization",s)}}finally{yield this._handleVisibilityChange(),this._debug("#_initialize()","end")}})}signInAnonymously(t){return e(this,null,function*(){var e,s,n;try{const r=yield ms(this.fetch,"POST","".concat(this.url,"/signup"),{headers:this.headers,body:{data:null!==(s=null===(e=null==t?void 0:t.options)||void 0===e?void 0:e.data)&&void 0!==s?s:{},gotrue_meta_security:{captcha_token:null===(n=null==t?void 0:t.options)||void 0===n?void 0:n.captchaToken}},xform:_s}),{data:i,error:o}=r;if(o||!i)return{data:{user:null,session:null},error:o};const a=i.session,l=i.user;return i.session&&(yield this._saveSession(i.session),yield this._notifyAllSubscribers("SIGNED_IN",a)),{data:{user:l,session:a},error:null}}catch(r){if(It(r))return{data:{user:null,session:null},error:r};throw r}})}signUp(t){return e(this,null,function*(){var e,s,n;try{let r;if("email"in t){const{email:s,password:n,options:i}=t;let o=null,a=null;"pkce"===this.flowType&&([o,a]=yield us(this.storage,this.storageKey)),r=yield ms(this.fetch,"POST","".concat(this.url,"/signup"),{headers:this.headers,redirectTo:null==i?void 0:i.emailRedirectTo,body:{email:s,password:n,data:null!==(e=null==i?void 0:i.data)&&void 0!==e?e:{},gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken},code_challenge:o,code_challenge_method:a},xform:_s})}else{if(!("phone"in t))throw new Nt("You must provide either an email or phone number and a password");{const{phone:e,password:i,options:o}=t;r=yield ms(this.fetch,"POST","".concat(this.url,"/signup"),{headers:this.headers,body:{phone:e,password:i,data:null!==(s=null==o?void 0:o.data)&&void 0!==s?s:{},channel:null!==(n=null==o?void 0:o.channel)&&void 0!==n?n:"sms",gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},xform:_s})}}const{data:i,error:o}=r;if(o||!i)return{data:{user:null,session:null},error:o};const a=i.session,l=i.user;return i.session&&(yield this._saveSession(i.session),yield this._notifyAllSubscribers("SIGNED_IN",a)),{data:{user:l,session:a},error:null}}catch(r){if(It(r))return{data:{user:null,session:null},error:r};throw r}})}signInWithPassword(t){return e(this,null,function*(){try{let e;if("email"in t){const{email:s,password:n,options:r}=t;e=yield ms(this.fetch,"POST","".concat(this.url,"/token?grant_type=password"),{headers:this.headers,body:{email:s,password:n,gotrue_meta_security:{captcha_token:null==r?void 0:r.captchaToken}},xform:bs})}else{if(!("phone"in t))throw new Nt("You must provide either an email or phone number and a password");{const{phone:s,password:n,options:r}=t;e=yield ms(this.fetch,"POST","".concat(this.url,"/token?grant_type=password"),{headers:this.headers,body:{phone:s,password:n,gotrue_meta_security:{captcha_token:null==r?void 0:r.captchaToken}},xform:bs})}}const{data:s,error:n}=e;return n?{data:{user:null,session:null},error:n}:s&&s.session&&s.user?(s.session&&(yield this._saveSession(s.session),yield this._notifyAllSubscribers("SIGNED_IN",s.session)),{data:Object.assign({user:s.user,session:s.session},s.weak_password?{weakPassword:s.weak_password}:null),error:n}):{data:{user:null,session:null},error:new Dt}}catch(e){if(It(e))return{data:{user:null,session:null},error:e};throw e}})}signInWithOAuth(t){return e(this,null,function*(){var e,s,n,r;return yield this._handleProviderSignIn(t.provider,{redirectTo:null===(e=t.options)||void 0===e?void 0:e.redirectTo,scopes:null===(s=t.options)||void 0===s?void 0:s.scopes,queryParams:null===(n=t.options)||void 0===n?void 0:n.queryParams,skipBrowserRedirect:null===(r=t.options)||void 0===r?void 0:r.skipBrowserRedirect})})}exchangeCodeForSession(t){return e(this,null,function*(){return yield this.initializePromise,this._acquireLock(-1,()=>e(this,null,function*(){return this._exchangeCodeForSession(t)}))})}signInWithWeb3(t){return e(this,null,function*(){const{chain:e}=t;if("solana"===e)return yield this.signInWithSolana(t);throw new Error('@supabase/auth-js: Unsupported chain "'.concat(e,'"'))})}signInWithSolana(t){return e(this,null,function*(){var e,s,n,r,i,o,a,l,c,h,u,d;let f,p;if("message"in t)f=t.message,p=t.signature;else{const{chain:u,wallet:d,statement:g,options:y}=t;let v;if(es())if("object"==typeof d)v=d;else{const e=window;if(!("solana"in e)||"object"!=typeof e.solana||!("signIn"in e.solana&&"function"==typeof e.solana.signIn||"signMessage"in e.solana&&"function"==typeof e.solana.signMessage))throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.");v=e.solana}else{if("object"!=typeof d||!(null==y?void 0:y.url))throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");v=d}const m=new URL(null!==(e=null==y?void 0:y.url)&&void 0!==e?e:window.location.href);if("signIn"in v&&v.signIn){const e=yield v.signIn(Object.assign(Object.assign(Object.assign({issuedAt:(new Date).toISOString()},null==y?void 0:y.signInWithSolana),{version:"1",domain:m.host,uri:m.href}),g?{statement:g}:null));let t;if(Array.isArray(e)&&e[0]&&"object"==typeof e[0])t=e[0];else{if(!(e&&"object"==typeof e&&"signedMessage"in e&&"signature"in e))throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");t=e}if(!("signedMessage"in t&&"signature"in t&&("string"==typeof t.signedMessage||t.signedMessage instanceof Uint8Array)&&t.signature instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");f="string"==typeof t.signedMessage?t.signedMessage:(new TextDecoder).decode(t.signedMessage),p=t.signature}else{if(!("signMessage"in v&&"function"==typeof v.signMessage&&"publicKey"in v&&"object"==typeof v&&v.publicKey&&"toBase58"in v.publicKey&&"function"==typeof v.publicKey.toBase58))throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");f=["".concat(m.host," wants you to sign in with your Solana account:"),v.publicKey.toBase58(),...g?["",g,""]:[""],"Version: 1","URI: ".concat(m.href),"Issued At: ".concat(null!==(n=null===(s=null==y?void 0:y.signInWithSolana)||void 0===s?void 0:s.issuedAt)&&void 0!==n?n:(new Date).toISOString()),...(null===(r=null==y?void 0:y.signInWithSolana)||void 0===r?void 0:r.notBefore)?["Not Before: ".concat(y.signInWithSolana.notBefore)]:[],...(null===(i=null==y?void 0:y.signInWithSolana)||void 0===i?void 0:i.expirationTime)?["Expiration Time: ".concat(y.signInWithSolana.expirationTime)]:[],...(null===(o=null==y?void 0:y.signInWithSolana)||void 0===o?void 0:o.chainId)?["Chain ID: ".concat(y.signInWithSolana.chainId)]:[],...(null===(a=null==y?void 0:y.signInWithSolana)||void 0===a?void 0:a.nonce)?["Nonce: ".concat(y.signInWithSolana.nonce)]:[],...(null===(l=null==y?void 0:y.signInWithSolana)||void 0===l?void 0:l.requestId)?["Request ID: ".concat(y.signInWithSolana.requestId)]:[],...(null===(h=null===(c=null==y?void 0:y.signInWithSolana)||void 0===c?void 0:c.resources)||void 0===h?void 0:h.length)?["Resources",...y.signInWithSolana.resources.map(e=>"- ".concat(e))]:[]].join("\n");const e=yield v.signMessage((new TextEncoder).encode(f),"utf8");if(!(e&&e instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");p=e}}try{const{data:e,error:s}=yield ms(this.fetch,"POST","".concat(this.url,"/token?grant_type=web3"),{headers:this.headers,body:Object.assign({chain:"solana",message:f,signature:Zt(p)},(null===(u=t.options)||void 0===u?void 0:u.captchaToken)?{gotrue_meta_security:{captcha_token:null===(d=t.options)||void 0===d?void 0:d.captchaToken}}:null),xform:_s});if(s)throw s;return e&&e.session&&e.user?(e.session&&(yield this._saveSession(e.session),yield this._notifyAllSubscribers("SIGNED_IN",e.session)),{data:Object.assign({},e),error:s}):{data:{user:null,session:null},error:new Dt}}catch(g){if(It(g))return{data:{user:null,session:null},error:g};throw g}})}_exchangeCodeForSession(t){return e(this,null,function*(){const e=yield is(this.storage,"".concat(this.storageKey,"-code-verifier")),[s,n]=(null!=e?e:"").split("/");try{const{data:e,error:r}=yield ms(this.fetch,"POST","".concat(this.url,"/token?grant_type=pkce"),{headers:this.headers,body:{auth_code:t,code_verifier:s},xform:_s});if(yield os(this.storage,"".concat(this.storageKey,"-code-verifier")),r)throw r;return e&&e.session&&e.user?(e.session&&(yield this._saveSession(e.session),yield this._notifyAllSubscribers("SIGNED_IN",e.session)),{data:Object.assign(Object.assign({},e),{redirectType:null!=n?n:null}),error:r}):{data:{user:null,session:null,redirectType:null},error:new Dt}}catch(r){if(It(r))return{data:{user:null,session:null,redirectType:null},error:r};throw r}})}signInWithIdToken(t){return e(this,null,function*(){try{const{options:e,provider:s,token:n,access_token:r,nonce:i}=t,o=yield ms(this.fetch,"POST","".concat(this.url,"/token?grant_type=id_token"),{headers:this.headers,body:{provider:s,id_token:n,access_token:r,nonce:i,gotrue_meta_security:{captcha_token:null==e?void 0:e.captchaToken}},xform:_s}),{data:a,error:l}=o;return l?{data:{user:null,session:null},error:l}:a&&a.session&&a.user?(a.session&&(yield this._saveSession(a.session),yield this._notifyAllSubscribers("SIGNED_IN",a.session)),{data:a,error:l}):{data:{user:null,session:null},error:new Dt}}catch(e){if(It(e))return{data:{user:null,session:null},error:e};throw e}})}signInWithOtp(t){return e(this,null,function*(){var e,s,n,r,i;try{if("email"in t){const{email:n,options:r}=t;let i=null,o=null;"pkce"===this.flowType&&([i,o]=yield us(this.storage,this.storageKey));const{error:a}=yield ms(this.fetch,"POST","".concat(this.url,"/otp"),{headers:this.headers,body:{email:n,data:null!==(e=null==r?void 0:r.data)&&void 0!==e?e:{},create_user:null===(s=null==r?void 0:r.shouldCreateUser)||void 0===s||s,gotrue_meta_security:{captcha_token:null==r?void 0:r.captchaToken},code_challenge:i,code_challenge_method:o},redirectTo:null==r?void 0:r.emailRedirectTo});return{data:{user:null,session:null},error:a}}if("phone"in t){const{phone:e,options:s}=t,{data:o,error:a}=yield ms(this.fetch,"POST","".concat(this.url,"/otp"),{headers:this.headers,body:{phone:e,data:null!==(n=null==s?void 0:s.data)&&void 0!==n?n:{},create_user:null===(r=null==s?void 0:s.shouldCreateUser)||void 0===r||r,gotrue_meta_security:{captcha_token:null==s?void 0:s.captchaToken},channel:null!==(i=null==s?void 0:s.channel)&&void 0!==i?i:"sms"}});return{data:{user:null,session:null,messageId:null==o?void 0:o.message_id},error:a}}throw new Nt("You must provide either an email or phone number.")}catch(o){if(It(o))return{data:{user:null,session:null},error:o};throw o}})}verifyOtp(t){return e(this,null,function*(){var e,s;try{let n,r;"options"in t&&(n=null===(e=t.options)||void 0===e?void 0:e.redirectTo,r=null===(s=t.options)||void 0===s?void 0:s.captchaToken);const{data:i,error:o}=yield ms(this.fetch,"POST","".concat(this.url,"/verify"),{headers:this.headers,body:Object.assign(Object.assign({},t),{gotrue_meta_security:{captcha_token:r}}),redirectTo:n,xform:_s});if(o)throw o;if(!i)throw new Error("An error occurred on token verification.");const a=i.session,l=i.user;return(null==a?void 0:a.access_token)&&(yield this._saveSession(a),yield this._notifyAllSubscribers("recovery"==t.type?"PASSWORD_RECOVERY":"SIGNED_IN",a)),{data:{user:l,session:a},error:null}}catch(n){if(It(n))return{data:{user:null,session:null},error:n};throw n}})}signInWithSSO(t){return e(this,null,function*(){var e,s,n;try{let r=null,i=null;return"pkce"===this.flowType&&([r,i]=yield us(this.storage,this.storageKey)),yield ms(this.fetch,"POST","".concat(this.url,"/sso"),{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in t?{provider_id:t.providerId}:null),"domain"in t?{domain:t.domain}:null),{redirect_to:null!==(s=null===(e=t.options)||void 0===e?void 0:e.redirectTo)&&void 0!==s?s:void 0}),(null===(n=null==t?void 0:t.options)||void 0===n?void 0:n.captchaToken)?{gotrue_meta_security:{captcha_token:t.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:r,code_challenge_method:i}),headers:this.headers,xform:ks})}catch(r){if(It(r))return{data:null,error:r};throw r}})}reauthenticate(){return e(this,null,function*(){return yield this.initializePromise,yield this._acquireLock(-1,()=>e(this,null,function*(){return yield this._reauthenticate()}))})}_reauthenticate(){return e(this,null,function*(){try{return yield this._useSession(t=>e(this,null,function*(){const{data:{session:e},error:s}=t;if(s)throw s;if(!e)throw new Ut;const{error:n}=yield ms(this.fetch,"GET","".concat(this.url,"/reauthenticate"),{headers:this.headers,jwt:e.access_token});return{data:{user:null,session:null},error:n}}))}catch(t){if(It(t))return{data:{user:null,session:null},error:t};throw t}})}resend(t){return e(this,null,function*(){try{const e="".concat(this.url,"/resend");if("email"in t){const{email:s,type:n,options:r}=t,{error:i}=yield ms(this.fetch,"POST",e,{headers:this.headers,body:{email:s,type:n,gotrue_meta_security:{captcha_token:null==r?void 0:r.captchaToken}},redirectTo:null==r?void 0:r.emailRedirectTo});return{data:{user:null,session:null},error:i}}if("phone"in t){const{phone:s,type:n,options:r}=t,{data:i,error:o}=yield ms(this.fetch,"POST",e,{headers:this.headers,body:{phone:s,type:n,gotrue_meta_security:{captcha_token:null==r?void 0:r.captchaToken}}});return{data:{user:null,session:null,messageId:null==i?void 0:i.message_id},error:o}}throw new Nt("You must provide either an email or phone number and a type")}catch(e){if(It(e))return{data:{user:null,session:null},error:e};throw e}})}getSession(){return e(this,null,function*(){yield this.initializePromise;return yield this._acquireLock(-1,()=>e(this,null,function*(){return this._useSession(t=>e(this,null,function*(){return t}))}))})}_acquireLock(t,s){return e(this,null,function*(){this._debug("#_acquireLock","begin",t);try{if(this.lockAcquired){const t=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),n=(()=>e(this,null,function*(){return yield t,yield s()}))();return this.pendingInLock.push((()=>e(this,null,function*(){try{yield n}catch(e){}}))()),n}return yield this.lock("lock:".concat(this.storageKey),t,()=>e(this,null,function*(){this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const t=s();for(this.pendingInLock.push((()=>e(this,null,function*(){try{yield t}catch(e){}}))()),yield t;this.pendingInLock.length;){const e=[...this.pendingInLock];yield Promise.all(e),this.pendingInLock.splice(0,e.length)}return yield t}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}}))}finally{this._debug("#_acquireLock","end")}})}_useSession(t){return e(this,null,function*(){this._debug("#_useSession","begin");try{const e=yield this.__loadSession();return yield t(e)}finally{this._debug("#_useSession","end")}})}__loadSession(){return e(this,null,function*(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",(new Error).stack);try{let e=null;const t=yield is(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",t),null!==t&&(this._isValidSession(t)?e=t:(this._debug("#getSession()","session from storage is not valid"),yield this._removeSession())),!e)return{data:{session:null},error:null};const s=!!e.expires_at&&1e3*e.expires_at-Date.now()<jt;if(this._debug("#__loadSession()","session has".concat(s?"":" not"," expired"),"expires_at",e.expires_at),!s){if(this.storage.isServer){let t=this.suppressGetSessionWarning;e=new Proxy(e,{get:(e,s,n)=>(t||"user"!==s||(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),t=!0,this.suppressGetSessionWarning=!0),Reflect.get(e,s,n))})}return{data:{session:e},error:null}}const{session:n,error:r}=yield this._callRefreshToken(e.refresh_token);return r?{data:{session:null},error:r}:{data:{session:n},error:null}}finally{this._debug("#__loadSession()","end")}})}getUser(t){return e(this,null,function*(){if(t)return yield this._getUser(t);yield this.initializePromise;return yield this._acquireLock(-1,()=>e(this,null,function*(){return yield this._getUser()}))})}_getUser(t){return e(this,null,function*(){try{return t?yield ms(this.fetch,"GET","".concat(this.url,"/user"),{headers:this.headers,jwt:t,xform:ws}):yield this._useSession(t=>e(this,null,function*(){var e,s,n;const{data:r,error:i}=t;if(i)throw i;return(null===(e=r.session)||void 0===e?void 0:e.access_token)||this.hasCustomAuthorizationHeader?yield ms(this.fetch,"GET","".concat(this.url,"/user"),{headers:this.headers,jwt:null!==(n=null===(s=r.session)||void 0===s?void 0:s.access_token)&&void 0!==n?n:void 0,xform:ws}):{data:{user:null},error:new Ut}}))}catch(s){if(It(s))return function(e){return It(e)&&"AuthSessionMissingError"===e.name}(s)&&(yield this._removeSession(),yield os(this.storage,"".concat(this.storageKey,"-code-verifier"))),{data:{user:null},error:s};throw s}})}updateUser(t){return e(this,arguments,function*(t,s={}){return yield this.initializePromise,yield this._acquireLock(-1,()=>e(this,null,function*(){return yield this._updateUser(t,s)}))})}_updateUser(t){return e(this,arguments,function*(t,s={}){try{return yield this._useSession(n=>e(this,null,function*(){const{data:e,error:r}=n;if(r)throw r;if(!e.session)throw new Ut;const i=e.session;let o=null,a=null;"pkce"===this.flowType&&null!=t.email&&([o,a]=yield us(this.storage,this.storageKey));const{data:l,error:c}=yield ms(this.fetch,"PUT","".concat(this.url,"/user"),{headers:this.headers,redirectTo:null==s?void 0:s.emailRedirectTo,body:Object.assign(Object.assign({},t),{code_challenge:o,code_challenge_method:a}),jwt:i.access_token,xform:ws});if(c)throw c;return i.user=l.user,yield this._saveSession(i),yield this._notifyAllSubscribers("USER_UPDATED",i),{data:{user:i.user},error:null}}))}catch(n){if(It(n))return{data:{user:null},error:n};throw n}})}setSession(t){return e(this,null,function*(){return yield this.initializePromise,yield this._acquireLock(-1,()=>e(this,null,function*(){return yield this._setSession(t)}))})}_setSession(t){return e(this,null,function*(){try{if(!t.access_token||!t.refresh_token)throw new Ut;const e=Date.now()/1e3;let s=e,n=!0,r=null;const{payload:i}=ls(t.access_token);if(i.exp&&(s=i.exp,n=s<=e),n){const{session:e,error:s}=yield this._callRefreshToken(t.refresh_token);if(s)return{data:{user:null,session:null},error:s};if(!e)return{data:{user:null,session:null},error:null};r=e}else{const{data:n,error:i}=yield this._getUser(t.access_token);if(i)throw i;r={access_token:t.access_token,refresh_token:t.refresh_token,user:n.user,token_type:"bearer",expires_in:s-e,expires_at:s},yield this._saveSession(r),yield this._notifyAllSubscribers("SIGNED_IN",r)}return{data:{user:r.user,session:r},error:null}}catch(e){if(It(e))return{data:{session:null,user:null},error:e};throw e}})}refreshSession(t){return e(this,null,function*(){return yield this.initializePromise,yield this._acquireLock(-1,()=>e(this,null,function*(){return yield this._refreshSession(t)}))})}_refreshSession(t){return e(this,null,function*(){try{return yield this._useSession(s=>e(this,null,function*(){var e;if(!t){const{data:n,error:r}=s;if(r)throw r;t=null!==(e=n.session)&&void 0!==e?e:void 0}if(!(null==t?void 0:t.refresh_token))throw new Ut;const{session:n,error:r}=yield this._callRefreshToken(t.refresh_token);return r?{data:{user:null,session:null},error:r}:n?{data:{user:n.user,session:n},error:null}:{data:{user:null,session:null},error:null}}))}catch(s){if(It(s))return{data:{user:null,session:null},error:s};throw s}})}_getSessionFromURL(t,s){return e(this,null,function*(){try{if(!es())throw new qt("No browser detected.");if(t.error||t.error_description||t.error_code)throw new qt(t.error_description||"Error in URL with unspecified error_description",{error:t.error||"unspecified_error",code:t.error_code||"unspecified_code"});switch(s){case"implicit":if("pkce"===this.flowType)throw new Bt("Not a valid PKCE flow url.");break;case"pkce":if("implicit"===this.flowType)throw new qt("Not a valid implicit grant flow url.")}if("pkce"===s){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!t.code)throw new Bt("No code detected.");const{data:e,error:s}=yield this._exchangeCodeForSession(t.code);if(s)throw s;const n=new URL(window.location.href);return n.searchParams.delete("code"),window.history.replaceState(window.history.state,"",n.toString()),{data:{session:e.session,redirectType:null},error:null}}const{provider_token:e,provider_refresh_token:n,access_token:r,refresh_token:i,expires_in:o,expires_at:a,token_type:l}=t;if(!(r&&o&&i&&l))throw new qt("No session defined in URL");const c=Math.round(Date.now()/1e3),h=parseInt(o);let u=c+h;a&&(u=parseInt(a));const d=u-c;1e3*d<=Tt&&console.warn("@supabase/gotrue-js: Session as retrieved from URL expires in ".concat(d,"s, should have been closer to ").concat(h,"s"));const f=u-h;c-f>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",f,u,c):c-f<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",f,u,c);const{data:p,error:g}=yield this._getUser(r);if(g)throw g;const y={provider_token:e,provider_refresh_token:n,access_token:r,expires_in:h,expires_at:u,refresh_token:i,token_type:l,user:p.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:y,redirectType:t.type},error:null}}catch(e){if(It(e))return{data:{session:null,redirectType:null},error:e};throw e}})}_isImplicitGrantCallback(e){return Boolean(e.access_token||e.error_description)}_isPKCECallback(t){return e(this,null,function*(){const e=yield is(this.storage,"".concat(this.storageKey,"-code-verifier"));return!(!t.code||!e)})}signOut(){return e(this,arguments,function*(t={scope:"global"}){return yield this.initializePromise,yield this._acquireLock(-1,()=>e(this,null,function*(){return yield this._signOut(t)}))})}_signOut(){return e(this,arguments,function*({scope:t}={scope:"global"}){return yield this._useSession(s=>e(this,null,function*(){var e;const{data:n,error:r}=s;if(r)return{error:r};const i=null===(e=n.session)||void 0===e?void 0:e.access_token;if(i){const{error:e}=yield this.admin.signOut(i,t);if(e&&(!function(e){return It(e)&&"AuthApiError"===e.name}(e)||404!==e.status&&401!==e.status&&403!==e.status))return{error:e}}return"others"!==t&&(yield this._removeSession(),yield os(this.storage,"".concat(this.storageKey,"-code-verifier"))),{error:null}}))})}onAuthStateChange(t){const s="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}),n={id:s,callback:t,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",s),this.stateChangeEmitters.delete(s)}};return this._debug("#onAuthStateChange()","registered callback with id",s),this.stateChangeEmitters.set(s,n),(()=>{e(this,null,function*(){yield this.initializePromise,yield this._acquireLock(-1,()=>e(this,null,function*(){this._emitInitialSession(s)}))})})(),{data:{subscription:n}}}_emitInitialSession(t){return e(this,null,function*(){return yield this._useSession(s=>e(this,null,function*(){var e,n;try{const{data:{session:n},error:r}=s;if(r)throw r;yield null===(e=this.stateChangeEmitters.get(t))||void 0===e?void 0:e.callback("INITIAL_SESSION",n),this._debug("INITIAL_SESSION","callback id",t,"session",n)}catch(r){yield null===(n=this.stateChangeEmitters.get(t))||void 0===n?void 0:n.callback("INITIAL_SESSION",null),this._debug("INITIAL_SESSION","callback id",t,"error",r),console.error(r)}}))})}resetPasswordForEmail(t){return e(this,arguments,function*(e,t={}){let s=null,n=null;"pkce"===this.flowType&&([s,n]=yield us(this.storage,this.storageKey,!0));try{return yield ms(this.fetch,"POST","".concat(this.url,"/recover"),{body:{email:e,code_challenge:s,code_challenge_method:n,gotrue_meta_security:{captcha_token:t.captchaToken}},headers:this.headers,redirectTo:t.redirectTo})}catch(r){if(It(r))return{data:null,error:r};throw r}})}getUserIdentities(){return e(this,null,function*(){var e;try{const{data:t,error:s}=yield this.getUser();if(s)throw s;return{data:{identities:null!==(e=t.user.identities)&&void 0!==e?e:[]},error:null}}catch(t){if(It(t))return{data:null,error:t};throw t}})}linkIdentity(t){return e(this,null,function*(){var s;try{const{data:n,error:r}=yield this._useSession(s=>e(this,null,function*(){var e,n,r,i,o;const{data:a,error:l}=s;if(l)throw l;const c=yield this._getUrlForProvider("".concat(this.url,"/user/identities/authorize"),t.provider,{redirectTo:null===(e=t.options)||void 0===e?void 0:e.redirectTo,scopes:null===(n=t.options)||void 0===n?void 0:n.scopes,queryParams:null===(r=t.options)||void 0===r?void 0:r.queryParams,skipBrowserRedirect:!0});return yield ms(this.fetch,"GET",c,{headers:this.headers,jwt:null!==(o=null===(i=a.session)||void 0===i?void 0:i.access_token)&&void 0!==o?o:void 0})}));if(r)throw r;return es()&&!(null===(s=t.options)||void 0===s?void 0:s.skipBrowserRedirect)&&window.location.assign(null==n?void 0:n.url),{data:{provider:t.provider,url:null==n?void 0:n.url},error:null}}catch(n){if(It(n))return{data:{provider:t.provider,url:null},error:n};throw n}})}unlinkIdentity(t){return e(this,null,function*(){try{return yield this._useSession(s=>e(this,null,function*(){var e,n;const{data:r,error:i}=s;if(i)throw i;return yield ms(this.fetch,"DELETE","".concat(this.url,"/user/identities/").concat(t.identity_id),{headers:this.headers,jwt:null!==(n=null===(e=r.session)||void 0===e?void 0:e.access_token)&&void 0!==n?n:void 0})}))}catch(s){if(It(s))return{data:null,error:s};throw s}})}_refreshAccessToken(t){return e(this,null,function*(){const s="#_refreshAccessToken(".concat(t.substring(0,5),"...)");this._debug(s,"begin");try{const n=Date.now();return yield function(t,s){return new Promise((n,r)=>{(()=>{e(this,null,function*(){for(let i=0;i<1/0;i++)try{const e=yield t(i);if(!s(i,null,e))return void n(e)}catch(e){if(!s(i,e))return void r(e)}})})()})}(n=>e(this,null,function*(){return n>0&&(yield function(t){return e(this,null,function*(){return yield new Promise(e=>{setTimeout(()=>e(null),t)})})}(200*Math.pow(2,n-1))),this._debug(s,"refreshing attempt",n),yield ms(this.fetch,"POST","".concat(this.url,"/token?grant_type=refresh_token"),{body:{refresh_token:t},headers:this.headers,xform:_s})}),(e,t)=>{const s=200*Math.pow(2,e);return t&&Ft(t)&&Date.now()+s-n<Tt})}catch(n){if(this._debug(s,"error",n),It(n))return{data:{session:null,user:null},error:n};throw n}finally{this._debug(s,"end")}})}_isValidSession(e){return"object"==typeof e&&null!==e&&"access_token"in e&&"refresh_token"in e&&"expires_at"in e}_handleProviderSignIn(t,s){return e(this,null,function*(){const e=yield this._getUrlForProvider("".concat(this.url,"/authorize"),t,{redirectTo:s.redirectTo,scopes:s.scopes,queryParams:s.queryParams});return this._debug("#_handleProviderSignIn()","provider",t,"options",s,"url",e),es()&&!s.skipBrowserRedirect&&window.location.assign(e),{data:{provider:t,url:e},error:null}})}_recoverAndRefresh(){return e(this,null,function*(){var e;const t="#_recoverAndRefresh()";this._debug(t,"begin");try{const s=yield is(this.storage,this.storageKey);if(this._debug(t,"session from storage",s),!this._isValidSession(s))return this._debug(t,"session is not valid"),void(null!==s&&(yield this._removeSession()));const n=1e3*(null!==(e=s.expires_at)&&void 0!==e?e:1/0)-Date.now()<jt;if(this._debug(t,"session has".concat(n?"":" not"," expired with margin of ").concat(jt,"s")),n){if(this.autoRefreshToken&&s.refresh_token){const{error:e}=yield this._callRefreshToken(s.refresh_token);e&&(console.error(e),Ft(e)||(this._debug(t,"refresh failed with a non-retryable error, removing the session",e),yield this._removeSession()))}}else yield this._notifyAllSubscribers("SIGNED_IN",s)}catch(s){return this._debug(t,"error",s),void console.error(s)}finally{this._debug(t,"end")}})}_callRefreshToken(t){return e(this,null,function*(){var e,s;if(!t)throw new Ut;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const n="#_callRefreshToken(".concat(t.substring(0,5),"...)");this._debug(n,"begin");try{this.refreshingDeferred=new as;const{data:e,error:s}=yield this._refreshAccessToken(t);if(s)throw s;if(!e.session)throw new Ut;yield this._saveSession(e.session),yield this._notifyAllSubscribers("TOKEN_REFRESHED",e.session);const n={session:e.session,error:null};return this.refreshingDeferred.resolve(n),n}catch(r){if(this._debug(n,"error",r),It(r)){const t={session:null,error:r};return Ft(r)||(yield this._removeSession()),null===(e=this.refreshingDeferred)||void 0===e||e.resolve(t),t}throw null===(s=this.refreshingDeferred)||void 0===s||s.reject(r),r}finally{this.refreshingDeferred=null,this._debug(n,"end")}})}_notifyAllSubscribers(t,s,n=!0){return e(this,null,function*(){const r="#_notifyAllSubscribers(".concat(t,")");this._debug(r,"begin",s,"broadcast = ".concat(n));try{this.broadcastChannel&&n&&this.broadcastChannel.postMessage({event:t,session:s});const r=[],i=Array.from(this.stateChangeEmitters.values()).map(n=>e(this,null,function*(){try{yield n.callback(t,s)}catch(e){r.push(e)}}));if(yield Promise.all(i),r.length>0){for(let e=0;e<r.length;e+=1)console.error(r[e]);throw r[0]}}finally{this._debug(r,"end")}})}_saveSession(t){return e(this,null,function*(){this._debug("#_saveSession()",t),this.suppressGetSessionWarning=!0,yield rs(this.storage,this.storageKey,t)})}_removeSession(){return e(this,null,function*(){this._debug("#_removeSession()"),yield os(this.storage,this.storageKey),yield this._notifyAllSubscribers("SIGNED_OUT",null)})}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const e=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{e&&es()&&(null===window||void 0===window?void 0:window.removeEventListener)&&window.removeEventListener("visibilitychange",e)}catch(t){console.error("removing visibilitychange callback failed",t)}}_startAutoRefresh(){return e(this,null,function*(){yield this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const t=setInterval(()=>this._autoRefreshTokenTick(),Tt);this.autoRefreshTicker=t,t&&"object"==typeof t&&"function"==typeof t.unref?t.unref():"undefined"!=typeof Deno&&"function"==typeof Deno.unrefTimer&&Deno.unrefTimer(t),setTimeout(()=>e(this,null,function*(){yield this.initializePromise,yield this._autoRefreshTokenTick()}),0)})}_stopAutoRefresh(){return e(this,null,function*(){this._debug("#_stopAutoRefresh()");const e=this.autoRefreshTicker;this.autoRefreshTicker=null,e&&clearInterval(e)})}startAutoRefresh(){return e(this,null,function*(){this._removeVisibilityChangedCallback(),yield this._startAutoRefresh()})}stopAutoRefresh(){return e(this,null,function*(){this._removeVisibilityChangedCallback(),yield this._stopAutoRefresh()})}_autoRefreshTokenTick(){return e(this,null,function*(){this._debug("#_autoRefreshTokenTick()","begin");try{yield this._acquireLock(0,()=>e(this,null,function*(){try{const s=Date.now();try{return yield this._useSession(t=>e(this,null,function*(){const{data:{session:e}}=t;if(!e||!e.refresh_token||!e.expires_at)return void this._debug("#_autoRefreshTokenTick()","no session");const n=Math.floor((1e3*e.expires_at-s)/Tt);this._debug("#_autoRefreshTokenTick()","access token expires in ".concat(n," ticks, a tick lasts ").concat(Tt,"ms, refresh threshold is ").concat(3," ticks")),n<=3&&(yield this._callRefreshToken(e.refresh_token))}))}catch(t){console.error("Auto refresh tick failed with error. This is likely a transient error.",t)}}finally{this._debug("#_autoRefreshTokenTick()","end")}}))}catch(t){if(!(t.isAcquireTimeout||t instanceof Cs))throw t;this._debug("auto refresh token tick lock not available")}})}_handleVisibilityChange(){return e(this,null,function*(){if(this._debug("#_handleVisibilityChange()"),!es()||!(null===window||void 0===window?void 0:window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=()=>e(this,null,function*(){return yield this._onVisibilityChanged(!1)}),null===window||void 0===window||window.addEventListener("visibilitychange",this.visibilityChangedCallback),yield this._onVisibilityChanged(!0)}catch(t){console.error("_handleVisibilityChange",t)}})}_onVisibilityChanged(t){return e(this,null,function*(){const s="#_onVisibilityChanged(".concat(t,")");this._debug(s,"visibilityState",document.visibilityState),"visible"===document.visibilityState?(this.autoRefreshToken&&this._startAutoRefresh(),t||(yield this.initializePromise,yield this._acquireLock(-1,()=>e(this,null,function*(){"visible"===document.visibilityState?yield this._recoverAndRefresh():this._debug(s,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting")})))):"hidden"===document.visibilityState&&this.autoRefreshToken&&this._stopAutoRefresh()})}_getUrlForProvider(t,s,n){return e(this,null,function*(){const e=["provider=".concat(encodeURIComponent(s))];if((null==n?void 0:n.redirectTo)&&e.push("redirect_to=".concat(encodeURIComponent(n.redirectTo))),(null==n?void 0:n.scopes)&&e.push("scopes=".concat(encodeURIComponent(n.scopes))),"pkce"===this.flowType){const[t,s]=yield us(this.storage,this.storageKey),n=new URLSearchParams({code_challenge:"".concat(encodeURIComponent(t)),code_challenge_method:"".concat(encodeURIComponent(s))});e.push(n.toString())}if(null==n?void 0:n.queryParams){const t=new URLSearchParams(n.queryParams);e.push(t.toString())}return(null==n?void 0:n.skipBrowserRedirect)&&e.push("skip_http_redirect=".concat(n.skipBrowserRedirect)),"".concat(t,"?").concat(e.join("&"))})}_unenroll(t){return e(this,null,function*(){try{return yield this._useSession(s=>e(this,null,function*(){var e;const{data:n,error:r}=s;return r?{data:null,error:r}:yield ms(this.fetch,"DELETE","".concat(this.url,"/factors/").concat(t.factorId),{headers:this.headers,jwt:null===(e=null==n?void 0:n.session)||void 0===e?void 0:e.access_token})}))}catch(s){if(It(s))return{data:null,error:s};throw s}})}_enroll(t){return e(this,null,function*(){try{return yield this._useSession(s=>e(this,null,function*(){var e,n;const{data:r,error:i}=s;if(i)return{data:null,error:i};const o=Object.assign({friendly_name:t.friendlyName,factor_type:t.factorType},"phone"===t.factorType?{phone:t.phone}:{issuer:t.issuer}),{data:a,error:l}=yield ms(this.fetch,"POST","".concat(this.url,"/factors"),{body:o,headers:this.headers,jwt:null===(e=null==r?void 0:r.session)||void 0===e?void 0:e.access_token});return l?{data:null,error:l}:("totp"===t.factorType&&(null===(n=null==a?void 0:a.totp)||void 0===n?void 0:n.qr_code)&&(a.totp.qr_code="data:image/svg+xml;utf-8,".concat(a.totp.qr_code)),{data:a,error:null})}))}catch(s){if(It(s))return{data:null,error:s};throw s}})}_verify(t){return e(this,null,function*(){return this._acquireLock(-1,()=>e(this,null,function*(){try{return yield this._useSession(s=>e(this,null,function*(){var e;const{data:n,error:r}=s;if(r)return{data:null,error:r};const{data:i,error:o}=yield ms(this.fetch,"POST","".concat(this.url,"/factors/").concat(t.factorId,"/verify"),{body:{code:t.code,challenge_id:t.challengeId},headers:this.headers,jwt:null===(e=null==n?void 0:n.session)||void 0===e?void 0:e.access_token});return o?{data:null,error:o}:(yield this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+i.expires_in},i)),yield this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",i),{data:i,error:o})}))}catch(s){if(It(s))return{data:null,error:s};throw s}}))})}_challenge(t){return e(this,null,function*(){return this._acquireLock(-1,()=>e(this,null,function*(){try{return yield this._useSession(s=>e(this,null,function*(){var e;const{data:n,error:r}=s;return r?{data:null,error:r}:yield ms(this.fetch,"POST","".concat(this.url,"/factors/").concat(t.factorId,"/challenge"),{body:{channel:t.channel},headers:this.headers,jwt:null===(e=null==n?void 0:n.session)||void 0===e?void 0:e.access_token})}))}catch(s){if(It(s))return{data:null,error:s};throw s}}))})}_challengeAndVerify(t){return e(this,null,function*(){const{data:e,error:s}=yield this._challenge({factorId:t.factorId});return s?{data:null,error:s}:yield this._verify({factorId:t.factorId,challengeId:e.id,code:t.code})})}_listFactors(){return e(this,null,function*(){const{data:{user:e},error:t}=yield this.getUser();if(t)return{data:null,error:t};const s=(null==e?void 0:e.factors)||[],n=s.filter(e=>"totp"===e.factor_type&&"verified"===e.status),r=s.filter(e=>"phone"===e.factor_type&&"verified"===e.status);return{data:{all:s,totp:n,phone:r},error:null}})}_getAuthenticatorAssuranceLevel(){return e(this,null,function*(){return this._acquireLock(-1,()=>e(this,null,function*(){return yield this._useSession(t=>e(this,null,function*(){var e,s;const{data:{session:n},error:r}=t;if(r)return{data:null,error:r};if(!n)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:i}=ls(n.access_token);let o=null;i.aal&&(o=i.aal);let a=o;(null!==(s=null===(e=n.user.factors)||void 0===e?void 0:e.filter(e=>"verified"===e.status))&&void 0!==s?s:[]).length>0&&(a="aal2");return{data:{currentLevel:o,nextLevel:a,currentAuthenticationMethods:i.amr||[]},error:null}}))}))})}fetchJwk(t){return e(this,arguments,function*(e,t={keys:[]}){let s=t.keys.find(t=>t.kid===e);if(s)return s;if(s=this.jwks.keys.find(t=>t.kid===e),s&&this.jwks_cached_at+6e5>Date.now())return s;const{data:n,error:r}=yield ms(this.fetch,"GET","".concat(this.url,"/.well-known/jwks.json"),{headers:this.headers});if(r)throw r;if(!n.keys||0===n.keys.length)throw new Jt("JWKS is empty");if(this.jwks=n,this.jwks_cached_at=Date.now(),s=n.keys.find(t=>t.kid===e),!s)throw new Jt("No matching signing key found in JWKS");return s})}getClaims(t){return e(this,arguments,function*(e,t={keys:[]}){try{let s=e;if(!s){const{data:e,error:t}=yield this.getSession();if(t||!e.session)return{data:null,error:t};s=e.session.access_token}const{header:n,payload:r,signature:i,raw:{header:o,payload:a}}=ls(s);if(function(e){if(!e)throw new Error("Missing exp claim");if(e<=Math.floor(Date.now()/1e3))throw new Error("JWT has expired")}(r.exp),!n.kid||"HS256"===n.alg||!("crypto"in globalThis)||!("subtle"in globalThis.crypto)){const{error:e}=yield this.getUser(s);if(e)throw e;return{data:{claims:r,header:n,signature:i},error:null}}const l=function(e){switch(e){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}(n.alg),c=yield this.fetchJwk(n.kid,t),h=yield crypto.subtle.importKey("jwk",c,l,!0,["verify"]);if(!(yield crypto.subtle.verify(l,h,i,Xt("".concat(o,".").concat(a)))))throw new Jt("Invalid JWT signature");return{data:{claims:r,header:n,signature:i},error:null}}catch(s){if(It(s))return{data:null,error:s};throw s}})}}Us.nextInstanceID=0;const Ds=Us;class Ns extends Ds{constructor(e){super(e)}}var qs=function(e,t,s,n){return new(s||(s=Promise))(function(t,r){function i(e){try{a(n.next(e))}catch(t){r(t)}}function o(e){try{a(n.throw(e))}catch(t){r(t)}}function a(e){var n;e.done?t(e.value):(n=e.value,n instanceof s?n:new s(function(e){e(n)})).then(i,o)}a((n=n.apply(e,[])).next())})};class Bs{constructor(e,t,s){var n,r,i;if(this.supabaseUrl=e,this.supabaseKey=t,!e)throw new Error("supabaseUrl is required.");if(!t)throw new Error("supabaseKey is required.");const o=(a=e).endsWith("/")?a:a+"/";var a;const l=new URL(o);this.realtimeUrl=new URL("realtime/v1",l),this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace("http","ws"),this.authUrl=new URL("auth/v1",l),this.storageUrl=new URL("storage/v1",l),this.functionsUrl=new URL("functions/v1",l);const c="sb-".concat(l.hostname.split(".")[0],"-auth-token"),h=function(e,t){var s,n;const{db:r,auth:i,realtime:o,global:a}=e,{db:l,auth:c,realtime:h,global:u}=t,d={db:Object.assign(Object.assign({},l),r),auth:Object.assign(Object.assign({},c),i),realtime:Object.assign(Object.assign({},h),o),global:Object.assign(Object.assign(Object.assign({},u),a),{headers:Object.assign(Object.assign({},null!==(s=null==u?void 0:u.headers)&&void 0!==s?s:{}),null!==(n=null==a?void 0:a.headers)&&void 0!==n?n:{})}),accessToken:()=>kt(this,0,void 0,function*(){return""})};return e.accessToken?d.accessToken=e.accessToken:delete d.accessToken,d}(null!=s?s:{},{db:vt,realtime:_t,auth:Object.assign(Object.assign({},mt),{storageKey:c}),global:yt});this.storageKey=null!==(n=h.auth.storageKey)&&void 0!==n?n:"",this.headers=null!==(r=h.global.headers)&&void 0!==r?r:{},h.accessToken?(this.accessToken=h.accessToken,this.auth=new Proxy({},{get:(e,t)=>{throw new Error("@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.".concat(String(t)," is not possible"))}})):this.auth=this._initSupabaseAuthClient(null!==(i=h.auth)&&void 0!==i?i:{},this.headers,h.global.fetch),this.fetch=wt(t,this._getAccessToken.bind(this),h.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},h.realtime)),this.rest=new te(new URL("rest/v1",l).href,{headers:this.headers,schema:h.db.schema,fetch:this.fetch}),h.accessToken||this._listenForAuthEvents()}get functions(){return new d(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch})}get storage(){return new pt(this.storageUrl.href,this.headers,this.fetch)}from(e){return this.rest.from(e)}schema(e){return this.rest.schema(e)}rpc(e,t={},s={}){return this.rest.rpc(e,t,s)}channel(e,t={config:{}}){return this.realtime.channel(e,t)}getChannels(){return this.realtime.getChannels()}removeChannel(e){return this.realtime.removeChannel(e)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var e,t;return qs(this,0,void 0,function*(){if(this.accessToken)return yield this.accessToken();const{data:s}=yield this.auth.getSession();return null!==(t=null===(e=s.session)||void 0===e?void 0:e.access_token)&&void 0!==t?t:null})}_initSupabaseAuthClient({autoRefreshToken:e,persistSession:t,detectSessionInUrl:s,storage:n,storageKey:r,flowType:i,lock:o,debug:a},l,c){const h={Authorization:"Bearer ".concat(this.supabaseKey),apikey:"".concat(this.supabaseKey)};return new Ns({url:this.authUrl.href,headers:Object.assign(Object.assign({},h),l),storageKey:r,autoRefreshToken:e,persistSession:t,detectSessionInUrl:s,storage:n,flowType:i,lock:o,debug:a,fetch:c,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(e){return new We(this.realtimeUrl.href,Object.assign(Object.assign({},e),{params:Object.assign({apikey:this.supabaseKey},null==e?void 0:e.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((e,t)=>{this._handleTokenChanged(e,"CLIENT",null==t?void 0:t.access_token)})}_handleTokenChanged(e,t,s){"TOKEN_REFRESHED"!==e&&"SIGNED_IN"!==e||this.changedAccessToken===s?"SIGNED_OUT"===e&&(this.realtime.setAuth(),"STORAGE"==t&&this.auth.signOut(),this.changedAccessToken=void 0):this.changedAccessToken=s}}const Ms=(e,t,s)=>new Bs(e,t,s);export{r as _,Ms as c};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
